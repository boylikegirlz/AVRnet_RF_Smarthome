
avrnet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003520  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  00003520  000035d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  0080010e  0080010e  00003682  2**0
                  ALLOC
  3 .eeprom       0000000b  00810000  00810000  00003682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000180  00000000  00000000  0000368d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000008ce  00000000  00000000  0000380d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005910  00000000  00000000  000040db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014d1  00000000  00000000  000099eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000032b0  00000000  00000000  0000aebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000530  00000000  00000000  0000e16c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a2  00000000  00000000  0000e69c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000261a  00000000  00000000  0000f03e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00011658  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__ctors_end>
       4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
       8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
       c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      10:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      14:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      18:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      1c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      20:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      24:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      28:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      2c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      30:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      34:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      38:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      3c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      40:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      44:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      48:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      4c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      50:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>

00000054 <version>:
      54:	53 6d 61 72 74 20 68 6f 6d 65 00                    Smart home.

0000005f <web_title>:
      5f:	57 65 6c 6c 63 6f 6d 65 20 74 6f 20 73 6d 61 72     Wellcome to smar
      6f:	74 20 68 6f 6d 65 20 70 61 67 65 00                 t home page.

0000007b <tag_br>:
      7b:	3c 62 72 3e 00                                      <br>.

00000080 <tag_hr>:
      80:	3c 68 72 20 77 69 64 74 68 3d 22 31 30 30 25 22     <hr width="100%"
      90:	20 73 69 7a 65 3d 22 31 22 3e 3c 62 72 3e 00         size="1"><br>.

0000009f <tag_form>:
      9f:	3c 66 6f 72 6d 20 61 63 74 69 6f 6e 3d 22 2e 2f     <form action="./
      af:	3f 22 20 6d 65 74 68 6f 64 3d 22 67 65 74 22 3e     ?" method="get">
	...

000000c0 <__c.2636>:
      c0:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
      d0:	6d 69 74 22 20 76 61 6c 75 65 3d 22 57 72 69 74     mit" value="Writ
      e0:	65 20 4c 43 44 22 3e 3c 2f 66 6f 72 6d 3e 00        e LCD"></form>.

000000ef <__c.2634>:
      ef:	3c 69 6e 70 75 74 20 6e 61 6d 65 3d 22 6c 63 64     <input name="lcd
      ff:	32 22 20 74 79 70 65 3d 22 74 65 78 74 22 20 73     2" type="text" s
     10f:	69 7a 65 3d 22 31 36 22 20 6d 61 78 6c 65 6e 67     ize="16" maxleng
     11f:	74 68 3d 22 31 36 22 3e 00                          th="16">.

00000128 <__c.2632>:
     128:	3c 69 6e 70 75 74 20 6e 61 6d 65 3d 22 6c 63 64     <input name="lcd
     138:	31 22 20 74 79 70 65 3d 22 74 65 78 74 22 20 73     1" type="text" s
     148:	69 7a 65 3d 22 31 36 22 20 6d 61 78 6c 65 6e 67     ize="16" maxleng
     158:	74 68 3d 22 31 36 22 3e 3c 62 72 3e 00              th="16"><br>.

00000165 <__c.2630>:
     165:	26 64 65 67 3b 43 3c 62 72 3e 00                    &deg;C<br>.

00000170 <__c.2628>:
     170:	20 20 54 65 6d 70 61 72 61 74 75 72 65 20 3d 20       Temparature = 
	...

00000181 <__c.2626>:
     181:	41 43 44 30 20 3d 20 00                             ACD0 = .

00000189 <__c.2624>:
     189:	3c 2f 61 3e 20 5d 3c 62 72 3e 3c 62 72 3e 00        </a> ]<br><br>.

00000198 <__c.2622>:
     198:	31 22 3e 4f 4e 00                                   1">ON.

0000019e <__c.2620>:
     19e:	30 22 3e 4f 46 46 00                                0">OFF.

000001a5 <__c.2618>:
     1a5:	3c 2f 66 6f 6e 74 3e 20 5b 20 3c 61 20 68 72 65     </font> [ <a hre
     1b5:	66 3d 22 2e 2f 3f 6c 36 3d 00                       f="./?l6=.

000001bf <__c.2616>:
     1bf:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 72 65 64 3e     <font color=red>
     1cf:	4f 46 46 00                                         OFF.

000001d3 <__c.2614>:
     1d3:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 67 72 65 65     <font color=gree
     1e3:	6e 3e 4f 4e 00                                      n>ON.

000001e8 <__c.2612>:
     1e8:	3c 2f 61 3e 20 5d 2c 20 4c 45 44 36 3a 20 00        </a> ], LED6: .

000001f7 <__c.2610>:
     1f7:	31 22 3e 4f 4e 00                                   1">ON.

000001fd <__c.2608>:
     1fd:	30 22 3e 4f 46 46 00                                0">OFF.

00000204 <__c.2606>:
     204:	3c 2f 66 6f 6e 74 3e 20 5b 20 3c 61 20 68 72 65     </font> [ <a hre
     214:	66 3d 22 2e 2f 3f 6c 35 3d 00                       f="./?l5=.

0000021e <__c.2604>:
     21e:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 72 65 64 3e     <font color=red>
     22e:	4f 46 46 00                                         OFF.

00000232 <__c.2602>:
     232:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 67 72 65 65     <font color=gree
     242:	6e 3e 4f 4e 00                                      n>ON.

00000247 <__c.2600>:
     247:	3c 2f 61 3e 20 5d 2c 20 4c 45 44 35 3a 20 00        </a> ], LED5: .

00000256 <__c.2598>:
     256:	31 22 3e 4f 4e 00                                   1">ON.

0000025c <__c.2596>:
     25c:	30 22 3e 4f 46 46 00                                0">OFF.

00000263 <__c.2594>:
     263:	3c 2f 66 6f 6e 74 3e 20 5b 20 3c 61 20 68 72 65     </font> [ <a hre
     273:	66 3d 22 2e 2f 3f 6c 34 3d 00                       f="./?l4=.

0000027d <__c.2592>:
     27d:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 72 65 64 3e     <font color=red>
     28d:	4f 46 46 00                                         OFF.

00000291 <__c.2590>:
     291:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 67 72 65 65     <font color=gree
     2a1:	6e 3e 4f 4e 00                                      n>ON.

000002a6 <__c.2588>:
     2a6:	3c 2f 61 3e 20 5d 2c 20 4c 45 44 34 3a 20 00        </a> ], LED4: .

000002b5 <__c.2586>:
     2b5:	31 22 3e 4f 4e 00                                   1">ON.

000002bb <__c.2584>:
     2bb:	30 22 3e 4f 46 46 00                                0">OFF.

000002c2 <__c.2582>:
     2c2:	3c 2f 66 6f 6e 74 3e 20 5b 20 3c 61 20 68 72 65     </font> [ <a hre
     2d2:	66 3d 22 2e 2f 3f 6c 33 3d 00                       f="./?l3=.

000002dc <__c.2580>:
     2dc:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 72 65 64 3e     <font color=red>
     2ec:	4f 46 46 00                                         OFF.

000002f0 <__c.2578>:
     2f0:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 67 72 65 65     <font color=gree
     300:	6e 3e 4f 4e 00                                      n>ON.

00000305 <__c.2576>:
     305:	3c 2f 61 3e 20 5d 2c 20 4c 45 44 33 3a 20 00        </a> ], LED3: .

00000314 <__c.2574>:
     314:	31 22 3e 4f 4e 00                                   1">ON.

0000031a <__c.2572>:
     31a:	30 22 3e 4f 46 46 00                                0">OFF.

00000321 <__c.2570>:
     321:	3c 2f 66 6f 6e 74 3e 20 5b 20 3c 61 20 68 72 65     </font> [ <a hre
     331:	66 3d 22 2e 2f 3f 6c 32 3d 00                       f="./?l2=.

0000033b <__c.2568>:
     33b:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 72 65 64 3e     <font color=red>
     34b:	4f 46 46 00                                         OFF.

0000034f <__c.2566>:
     34f:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 67 72 65 65     <font color=gree
     35f:	6e 3e 4f 4e 00                                      n>ON.

00000364 <__c.2564>:
     364:	3c 2f 61 3e 20 5d 2c 20 4c 45 44 32 3a 20 00        </a> ], LED2: .

00000373 <__c.2562>:
     373:	31 22 3e 4f 4e 00                                   1">ON.

00000379 <__c.2560>:
     379:	30 22 3e 4f 46 46 00                                0">OFF.

00000380 <__c.2558>:
     380:	3c 2f 66 6f 6e 74 3e 20 5b 20 3c 61 20 68 72 65     </font> [ <a hre
     390:	66 3d 22 2e 2f 3f 6c 31 3d 00                       f="./?l1=.

0000039a <__c.2556>:
     39a:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 72 65 64 3e     <font color=red>
     3aa:	4f 46 46 00                                         OFF.

000003ae <__c.2554>:
     3ae:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 67 72 65 65     <font color=gree
     3be:	6e 3e 4f 4e 00                                      n>ON.

000003c3 <__c.2552>:
     3c3:	4c 45 44 31 3a 20 00                                LED1: .

000003ca <__c.2550>:
     3ca:	3c 2f 74 69 74 6c 65 3e 00                          </title>.

000003d3 <__c.2548>:
     3d3:	3c 74 69 74 6c 65 3e 00                             <title>.

000003db <__c.2546>:
     3db:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     3eb:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     3fb:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

00000408 <__c.2484>:
     408:	22 7d 00                                            "}.

0000040b <__c.2482>:
     40b:	2c 22 73 69 70 22 3a 22 00                          ,"sip":".

00000414 <__c.2480>:
     414:	22 00                                               ".

00000416 <__c.2478>:
     416:	2c 22 61 69 70 22 3a 22 00                          ,"aip":".

0000041f <__c.2476>:
     41f:	22 00                                               ".

00000421 <__c.2474>:
     421:	2c 22 74 65 6d 70 22 3a 22 00                       ,"temp":".

0000042b <__c.2472>:
     42b:	22 00                                               ".

0000042d <__c.2470>:
     42d:	2c 22 41 43 44 30 22 3a 22 00                       ,"ACD0":".

00000437 <__c.2468>:
     437:	30 22 00                                            0".

0000043a <__c.2466>:
     43a:	31 22 00                                            1".

0000043d <__c.2464>:
     43d:	2c 22 6c 36 22 3a 22 00                             ,"l6":".

00000445 <__c.2462>:
     445:	30 22 00                                            0".

00000448 <__c.2460>:
     448:	31 22 00                                            1".

0000044b <__c.2458>:
     44b:	2c 22 6c 35 22 3a 22 00                             ,"l5":".

00000453 <__c.2456>:
     453:	30 22 00                                            0".

00000456 <__c.2454>:
     456:	31 22 00                                            1".

00000459 <__c.2452>:
     459:	2c 22 6c 34 22 3a 22 00                             ,"l4":".

00000461 <__c.2450>:
     461:	30 22 00                                            0".

00000464 <__c.2448>:
     464:	31 22 00                                            1".

00000467 <__c.2446>:
     467:	2c 22 6c 33 22 3a 22 00                             ,"l3":".

0000046f <__c.2444>:
     46f:	31 22 00                                            1".

00000472 <__c.2442>:
     472:	30 22 00                                            0".

00000475 <__c.2440>:
     475:	2c 22 6c 32 22 3a 22 00                             ,"l2":".

0000047d <__c.2438>:
     47d:	30 22 00                                            0".

00000480 <__c.2436>:
     480:	31 22 00                                            1".

00000483 <__c.2434>:
     483:	7b 22 6c 31 22 3a 22 00                             {"l1":".

0000048b <__c.2432>:
     48b:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     49b:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     4ab:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

000004b8 <__c.2420>:
     4b8:	7b 22 73 74 61 74 75 73 22 3a 22 4f 4b 22 7d 00     {"status":"OK"}.

000004c8 <__c.2418>:
     4c8:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     4d8:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     4e8:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

000004f5 <__c.2401>:
     4f5:	43 6f 6e 6e 65 63 74 69 6f 6e 3a 20 6b 65 65 70     Connection: keep
     505:	2d 61 6c 69 76 65 0d 0a 0d 0a 00                    -alive.....

00000510 <__c.2399>:
     510:	4b 65 65 70 2d 41 6c 69 76 65 3a 20 33 30 30 0d     Keep-Alive: 300.
     520:	0a 00                                               ..

00000522 <__c.2397>:
     522:	41 63 63 65 70 74 3a 20 74 65 78 74 2f 68 74 6d     Accept: text/htm
     532:	6c 0d 0a 00                                         l...

00000536 <__c.2395>:
     536:	55 73 65 72 2d 41 67 65 6e 74 3a 20 53 6d 61 72     User-Agent: Smar
     546:	74 20 68 6f 6d 65 0d 0a 00                          t home...

0000054f <__c.2393>:
     54f:	48 6f 73 74 3a 20 31 39 32 2e 31 36 38 2e 31 2e     Host: 192.168.1.
     55f:	33 30 0d 0a 00                                      30...

00000564 <__c.2391>:
     564:	20 48 54 54 50 2f 31 2e 30 0d 0a 00                  HTTP/1.0...

00000570 <__c.2389>:
     570:	47 45 54 20 2f 61 76 72 6e 65 74 2f 73 61 76 65     GET /avrnet/save
     580:	2e 70 68 70 3f 70 77 64 3d 73 65 63 72 65 74 26     .php?pwd=secret&
     590:	74 65 6d 70 3d 00                                   temp=.

00000596 <__c.2217>:
     596:	73 74 61 74 75 73 00                                status.

0000059d <__c.2215>:
     59d:	61 70 69 00                                         api.

000005a1 <__c.2213>:
     5a1:	6d 00                                               m.

000005a3 <__c.2211>:
     5a3:	68 00                                               h.

000005a5 <__c.2209>:
     5a5:	65 6e 00                                            en.

000005a8 <__c.2207>:
     5a8:	74 63 00                                            tc.

000005ab <__c.2205>:
     5ab:	6c 63 64 32 00                                      lcd2.

000005b0 <__c.2203>:
     5b0:	6c 63 64 31 00                                      lcd1.

000005b5 <__c.2201>:
     5b5:	6c 36 00                                            l6.

000005b8 <__c.2199>:
     5b8:	6c 35 00                                            l5.

000005bb <__c.2197>:
     5bb:	6c 34 00                                            l4.

000005be <__c.2195>:
     5be:	6c 33 00                                            l3.

000005c1 <__c.2193>:
     5c1:	6c 32 00                                            l2.

000005c4 <__c.2191>:
     5c4:	6c 31 00                                            l1.

000005c7 <__c.2189>:
     5c7:	73 69 70 00                                         sip.

000005cb <__c.2187>:
     5cb:	61 69 70 00                                         aip.

000005cf <setting_cursor_max>:
     5cf:	04 04 04                                            ...

000005d2 <count_time_max>:
     5d2:	02 3c 3c 18                                         .<<.

000005d6 <str_enable>:
     5d6:	45 6e 61 62 6c 65 00                                Enable.

000005dd <str_disable>:
     5dd:	44 69 73 61 62 6c 65 00                             Disable.

000005e5 <__c.2475>:
     5e5:	4e 6f 74 20 66 6f 75 6e 64 2e 00                    Not found..

000005f0 <__c.2473>:
     5f0:	50 69 6e 67 20 4f 4b 2e 00                          Ping OK..

000005f9 <temp_list>:
     5f9:	e5 00 ef 00 f9 00 03 01 0e 01 18 01 23 01 2e 01     ............#...
     609:	39 01 44 01 4f 01 5b 01 66 01 72 01 7e 01 8a 01     9.D.O.[.f.r.~...
     619:	95 01 a1 01 ad 01 b9 01 c5 01 d1 01 dd 01 e9 01     ................
     629:	f4 01 00 02 0c 02 17 02 23 02 2e 02 39 02 44 02     ........#...9.D.
     639:	4f 02 5a 02 65 02 6f 02 79 02 84 02 8e 02 97 02     O.Z.e.o.y.......
     649:	a1 02 aa 02 b4 02 bd 02 c6 02 ce 02 d7 02 df 02     ................
     659:	e7 02 ef 02 f7 02 fe 02 06 03 0d 03 14 03 1b 03     ................
     669:	21 03 28 03 2e 03 34 03 3a 03 40 03 45 03 4b 03     !.(...4.:.@.E.K.
     679:	50 03 55 03 5a 03 5f 03 63 03 68 03 6c 03 71 03     P.U.Z._.c.h.l.q.
     689:	75 03 79 03 7d 03 81 03 84 03 88 03 8b 03 8f 03     u.y.}...........
     699:	92 03 95 03 98 03 9b 03 9e 03 a1 03 a3 03 a6 03     ................
     6a9:	a8 03 ab 03 ad 03 b0 03 b2 03 b4 03 b6 03 b8 03     ................
     6b9:	ba 03 bc 03 be 03 c0 03                             ........

000006c1 <__c.2284>:
     6c1:	45 52 52 4f 52 0d 0a 00                             ERROR...

000006c9 <__c.2282>:
     6c9:	59 00                                               Y.

000006cb <__c.2280>:
     6cb:	53 4c 4f 4b 0d 0a 00                                SLOK...

000006d2 <__c.2276>:
     6d2:	57 4c 4f 4b 0d 0a 00                                WLOK...

000006d9 <__c.2263>:
     6d9:	53 49 4f 4b 0d 0a 00                                SIOK...

000006e0 <__c.2252>:
     6e0:	53 54 4f 4b 0d 0a 00                                STOK...

000006e7 <__c.2250>:
     6e7:	3b 0d 0a 00                                         ;...

000006eb <__c.2248>:
     6eb:	3b 00                                               ;.

000006ed <__c.2246>:
     6ed:	30 00                                               0.

000006ef <__c.2244>:
     6ef:	31 00                                               1.

000006f1 <__c.2242>:
     6f1:	30 00                                               0.

000006f3 <__c.2240>:
     6f3:	31 00                                               1.

000006f5 <__c.2238>:
     6f5:	30 00                                               0.

000006f7 <__c.2236>:
     6f7:	31 00                                               1.

000006f9 <__c.2234>:
     6f9:	47 41 4f 4b 00                                      GAOK.

000006fe <__ctors_end>:
     6fe:	11 24       	eor	r1, r1
     700:	1f be       	out	0x3f, r1	; 63
     702:	cf e5       	ldi	r28, 0x5F	; 95
     704:	d8 e0       	ldi	r29, 0x08	; 8
     706:	de bf       	out	0x3e, r29	; 62
     708:	cd bf       	out	0x3d, r28	; 61

0000070a <__do_copy_data>:
     70a:	11 e0       	ldi	r17, 0x01	; 1
     70c:	a0 e6       	ldi	r26, 0x60	; 96
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	e0 e2       	ldi	r30, 0x20	; 32
     712:	f5 e3       	ldi	r31, 0x35	; 53
     714:	02 c0       	rjmp	.+4      	; 0x71a <.do_copy_data_start>

00000716 <.do_copy_data_loop>:
     716:	05 90       	lpm	r0, Z+
     718:	0d 92       	st	X+, r0

0000071a <.do_copy_data_start>:
     71a:	ae 30       	cpi	r26, 0x0E	; 14
     71c:	b1 07       	cpc	r27, r17
     71e:	d9 f7       	brne	.-10     	; 0x716 <.do_copy_data_loop>

00000720 <__do_clear_bss>:
     720:	11 e0       	ldi	r17, 0x01	; 1
     722:	ae e0       	ldi	r26, 0x0E	; 14
     724:	b1 e0       	ldi	r27, 0x01	; 1
     726:	01 c0       	rjmp	.+2      	; 0x72a <.do_clear_bss_start>

00000728 <.do_clear_bss_loop>:
     728:	1d 92       	st	X+, r1

0000072a <.do_clear_bss_start>:
     72a:	a7 34       	cpi	r26, 0x47	; 71
     72c:	b1 07       	cpc	r27, r17
     72e:	e1 f7       	brne	.-8      	; 0x728 <.do_clear_bss_loop>
     730:	0e 94 50 07 	call	0xea0	; 0xea0 <main>
     734:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <_exit>

00000738 <__bad_interrupt>:
     738:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000073c <enc28j60ReadOp>:
//
//*******************************************************************************************
BYTE enc28j60ReadOp(BYTE op, BYTE address)
{
	// activate CS
	CSACTIVE;
     73c:	c4 98       	cbi	0x18, 4	; 24
	// issue read command
	SPDR = op | (address & ADDR_MASK);
     73e:	96 2f       	mov	r25, r22
     740:	9f 71       	andi	r25, 0x1F	; 31
     742:	98 2b       	or	r25, r24
     744:	9f b9       	out	0x0f, r25	; 15
	waitspi();
     746:	77 9b       	sbis	0x0e, 7	; 14
     748:	fe cf       	rjmp	.-4      	; 0x746 <enc28j60ReadOp+0xa>
	// read data
	SPDR = 0x00;
     74a:	1f b8       	out	0x0f, r1	; 15
	waitspi();
     74c:	77 9b       	sbis	0x0e, 7	; 14
     74e:	fe cf       	rjmp	.-4      	; 0x74c <enc28j60ReadOp+0x10>
	// do dummy read if needed (for mac and mii, see datasheet page 29)
	if(address & 0x80)
     750:	67 ff       	sbrs	r22, 7
     752:	03 c0       	rjmp	.+6      	; 0x75a <enc28j60ReadOp+0x1e>
	{
		SPDR = 0x00;
     754:	1f b8       	out	0x0f, r1	; 15
		waitspi();
     756:	77 9b       	sbis	0x0e, 7	; 14
     758:	fe cf       	rjmp	.-4      	; 0x756 <enc28j60ReadOp+0x1a>
	}
	// release CS
	CSPASSIVE;
     75a:	c4 9a       	sbi	0x18, 4	; 24
	return(SPDR);
     75c:	8f b1       	in	r24, 0x0f	; 15
}
     75e:	08 95       	ret

00000760 <enc28j60WriteOp>:
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
void enc28j60WriteOp(BYTE op, BYTE address, BYTE data)
{
	CSACTIVE;
     760:	c4 98       	cbi	0x18, 4	; 24
	// issue write command
	SPDR = op | (address & ADDR_MASK);
     762:	6f 71       	andi	r22, 0x1F	; 31
     764:	68 2b       	or	r22, r24
     766:	6f b9       	out	0x0f, r22	; 15
	waitspi();
     768:	77 9b       	sbis	0x0e, 7	; 14
     76a:	fe cf       	rjmp	.-4      	; 0x768 <enc28j60WriteOp+0x8>
	// write data
	SPDR = data;
     76c:	4f b9       	out	0x0f, r20	; 15
	waitspi();
     76e:	77 9b       	sbis	0x0e, 7	; 14
     770:	fe cf       	rjmp	.-4      	; 0x76e <enc28j60WriteOp+0xe>
	CSPASSIVE;
     772:	c4 9a       	sbi	0x18, 4	; 24
}
     774:	08 95       	ret

00000776 <enc28j60SetBank>:
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
void enc28j60SetBank(BYTE address)
{
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	18 2f       	mov	r17, r24
	// set the bank (if needed)
	if((address & BANK_MASK) != Enc28j60Bank)
     77e:	c8 2f       	mov	r28, r24
     780:	d0 e0       	ldi	r29, 0x00	; 0
     782:	c0 76       	andi	r28, 0x60	; 96
     784:	d0 70       	andi	r29, 0x00	; 0
     786:	80 91 0e 01 	lds	r24, 0x010E
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	c8 17       	cp	r28, r24
     78e:	d9 07       	cpc	r29, r25
     790:	91 f0       	breq	.+36     	; 0x7b6 <enc28j60SetBank+0x40>
	{
		// set the bank
		enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
     792:	80 ea       	ldi	r24, 0xA0	; 160
     794:	6f e1       	ldi	r22, 0x1F	; 31
     796:	43 e0       	ldi	r20, 0x03	; 3
     798:	0e 94 b0 03 	call	0x760	; 0x760 <enc28j60WriteOp>
		enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
     79c:	85 e0       	ldi	r24, 0x05	; 5
     79e:	d5 95       	asr	r29
     7a0:	c7 95       	ror	r28
     7a2:	8a 95       	dec	r24
     7a4:	e1 f7       	brne	.-8      	; 0x79e <enc28j60SetBank+0x28>
     7a6:	80 e8       	ldi	r24, 0x80	; 128
     7a8:	6f e1       	ldi	r22, 0x1F	; 31
     7aa:	4c 2f       	mov	r20, r28
     7ac:	0e 94 b0 03 	call	0x760	; 0x760 <enc28j60WriteOp>
		Enc28j60Bank = (address & BANK_MASK);
     7b0:	10 76       	andi	r17, 0x60	; 96
     7b2:	10 93 0e 01 	sts	0x010E, r17
	}
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	08 95       	ret

000007be <enc28j60Read>:
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
BYTE enc28j60Read(BYTE address)
{
     7be:	1f 93       	push	r17
     7c0:	18 2f       	mov	r17, r24
	// select bank to read
	enc28j60SetBank(address);
     7c2:	0e 94 bb 03 	call	0x776	; 0x776 <enc28j60SetBank>
	
	// do the read
	return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	61 2f       	mov	r22, r17
     7ca:	0e 94 9e 03 	call	0x73c	; 0x73c <enc28j60ReadOp>
}
     7ce:	1f 91       	pop	r17
     7d0:	08 95       	ret

000007d2 <enc28j60Write>:
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
void enc28j60Write(BYTE address, BYTE data)
{
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	18 2f       	mov	r17, r24
     7d8:	06 2f       	mov	r16, r22
	// select bank to write
	enc28j60SetBank(address);
     7da:	0e 94 bb 03 	call	0x776	; 0x776 <enc28j60SetBank>

	// do the write
	enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
     7de:	80 e4       	ldi	r24, 0x40	; 64
     7e0:	61 2f       	mov	r22, r17
     7e2:	40 2f       	mov	r20, r16
     7e4:	0e 94 b0 03 	call	0x760	; 0x760 <enc28j60WriteOp>
}
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	08 95       	ret

000007ee <enc28j60_read_phyreg>:
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
WORD enc28j60_read_phyreg(BYTE address)
{
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	68 2f       	mov	r22, r24
	WORD data;
	
	// set the PHY register address
	enc28j60Write(MIREGADR, address);
     7f4:	84 ed       	ldi	r24, 0xD4	; 212
     7f6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
     7fa:	82 ed       	ldi	r24, 0xD2	; 210
     7fc:	61 e0       	ldi	r22, 0x01	; 1
     7fe:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	
	// Loop to wait until the PHY register has been read through the MII
	// This requires 10.24us
	while( (enc28j60Read(MISTAT) & MISTAT_BUSY) );
     802:	8a ee       	ldi	r24, 0xEA	; 234
     804:	0e 94 df 03 	call	0x7be	; 0x7be <enc28j60Read>
     808:	80 fd       	sbrc	r24, 0
     80a:	fb cf       	rjmp	.-10     	; 0x802 <enc28j60_read_phyreg+0x14>
	
	// Stop reading
	enc28j60Write(MICMD, MICMD_MIIRD);
     80c:	82 ed       	ldi	r24, 0xD2	; 210
     80e:	61 e0       	ldi	r22, 0x01	; 1
     810:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	
	// Obtain results and return
	data = enc28j60Read ( MIRDL );
     814:	88 ed       	ldi	r24, 0xD8	; 216
     816:	0e 94 df 03 	call	0x7be	; 0x7be <enc28j60Read>
     81a:	08 2f       	mov	r16, r24
     81c:	10 e0       	ldi	r17, 0x00	; 0
	data |= enc28j60Read ( MIRDH );
     81e:	89 ed       	ldi	r24, 0xD9	; 217
     820:	0e 94 df 03 	call	0x7be	; 0x7be <enc28j60Read>
     824:	28 2f       	mov	r18, r24
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	20 2b       	or	r18, r16
     82a:	31 2b       	or	r19, r17

	return data;
}
     82c:	c9 01       	movw	r24, r18
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	08 95       	ret

00000834 <enc28j60PhyWrite>:
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
void enc28j60PhyWrite(BYTE address, WORD_BYTES data)
{
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	98 2f       	mov	r25, r24
     83a:	16 2f       	mov	r17, r22
     83c:	07 2f       	mov	r16, r23
	// set the PHY register address
	enc28j60Write(MIREGADR, address);
     83e:	84 ed       	ldi	r24, 0xD4	; 212
     840:	69 2f       	mov	r22, r25
     842:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	// write the PHY data
	enc28j60Write(MIWRL, data.byte.low);
     846:	86 ed       	ldi	r24, 0xD6	; 214
     848:	61 2f       	mov	r22, r17
     84a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(MIWRH, data.byte.high);
     84e:	87 ed       	ldi	r24, 0xD7	; 215
     850:	60 2f       	mov	r22, r16
     852:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     856:	10 e5       	ldi	r17, 0x50	; 80
     858:	03 c0       	rjmp	.+6      	; 0x860 <__stack+0x1>
     85a:	81 2f       	mov	r24, r17
     85c:	8a 95       	dec	r24
     85e:	f1 f7       	brne	.-4      	; 0x85c <enc28j60PhyWrite+0x28>
	// wait until the PHY write completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY)
     860:	8a ee       	ldi	r24, 0xEA	; 234
     862:	0e 94 df 03 	call	0x7be	; 0x7be <enc28j60Read>
     866:	80 fd       	sbrc	r24, 0
     868:	f8 cf       	rjmp	.-16     	; 0x85a <enc28j60PhyWrite+0x26>
	{
		_delay_us(15);
	}
}
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	08 95       	ret

00000870 <enc28j60_init>:
	//enc28j60_flag.rx_buffer_is_free = 1;
	_delay_ms(20);
}
*/
void enc28j60_init( BYTE *avr_mac)
{
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	ec 01       	movw	r28, r24
	// initialize I/O
	//DDRB |= _BV( DDB4 );
	//CSPASSIVE;

	// enable PB0, reset as output 
	ENC28J60_DDR |= _BV(ENC28J60_RESET_PIN_DDR);
     876:	8b 9a       	sbi	0x11, 3	; 17

	// enable PD2/INT0, as input
	ENC28J60_DDR &= ~_BV(ENC28J60_INT_PIN_DDR);
     878:	8a 98       	cbi	0x11, 2	; 17
	ENC28J60_PORT |= _BV(ENC28J60_INT_PIN);
     87a:	92 9a       	sbi	0x12, 2	; 18

	// set output to gnd, reset the ethernet chip
	ENC28J60_PORT &= ~_BV(ENC28J60_RESET_PIN);
     87c:	93 98       	cbi	0x12, 3	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     87e:	80 e4       	ldi	r24, 0x40	; 64
     880:	9c e9       	ldi	r25, 0x9C	; 156
     882:	01 97       	sbiw	r24, 0x01	; 1
     884:	f1 f7       	brne	.-4      	; 0x882 <enc28j60_init+0x12>
	_delay_ms(10);

	// set output to Vcc, reset inactive
	ENC28J60_PORT |= _BV(ENC28J60_RESET_PIN);
     886:	93 9a       	sbi	0x12, 3	; 18
     888:	80 ed       	ldi	r24, 0xD0	; 208
     88a:	97 e0       	ldi	r25, 0x07	; 7
     88c:	20 e9       	ldi	r18, 0x90	; 144
     88e:	31 e0       	ldi	r19, 0x01	; 1
     890:	f9 01       	movw	r30, r18
     892:	31 97       	sbiw	r30, 0x01	; 1
     894:	f1 f7       	brne	.-4      	; 0x892 <enc28j60_init+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     896:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     898:	d9 f7       	brne	.-10     	; 0x890 <enc28j60_init+0x20>
	_delay_ms(200);

    //	
	DDRB  |= _BV( DDB4 ) | _BV( DDB5 ) | _BV( DDB7 ); // mosi, sck, ss output
     89a:	87 b3       	in	r24, 0x17	; 23
     89c:	80 6b       	ori	r24, 0xB0	; 176
     89e:	87 bb       	out	0x17, r24	; 23
	//DDRB &= ~_BV( DDB6 ); // MISO is input

	CSPASSIVE;
     8a0:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &= ~(_BV( PB5 ) | _BV( PB7 ) );
     8a2:	88 b3       	in	r24, 0x18	; 24
     8a4:	8f 75       	andi	r24, 0x5F	; 95
     8a6:	88 bb       	out	0x18, r24	; 24
	//
	// initialize SPI interface
	// master mode and Fosc/2 clock:
    SPCR = _BV( SPE ) | _BV( MSTR );
     8a8:	80 e5       	ldi	r24, 0x50	; 80
     8aa:	8d b9       	out	0x0d, r24	; 13
    SPSR |= _BV( SPI2X );
     8ac:	70 9a       	sbi	0x0e, 0	; 14

	// perform system reset
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     8ae:	8f ef       	ldi	r24, 0xFF	; 255
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	4f ef       	ldi	r20, 0xFF	; 255
     8b4:	0e 94 b0 03 	call	0x760	; 0x760 <enc28j60WriteOp>
     8b8:	84 ef       	ldi	r24, 0xF4	; 244
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	20 e9       	ldi	r18, 0x90	; 144
     8be:	31 e0       	ldi	r19, 0x01	; 1
     8c0:	f9 01       	movw	r30, r18
     8c2:	31 97       	sbiw	r30, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <enc28j60_init+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	d9 f7       	brne	.-10     	; 0x8c0 <enc28j60_init+0x50>
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	next_packet_ptr.word = RXSTART_INIT;
     8ca:	10 92 10 01 	sts	0x0110, r1
     8ce:	10 92 0f 01 	sts	0x010F, r1
    // Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
     8da:	89 e0       	ldi	r24, 0x09	; 9
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
     8e2:	8c e0       	ldi	r24, 0x0C	; 12
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
     8ea:	8d e0       	ldi	r24, 0x0D	; 13
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
     8f2:	8a e0       	ldi	r24, 0x0A	; 10
     8f4:	63 e2       	ldi	r22, 0x23	; 35
     8f6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
     8fa:	8b e0       	ldi	r24, 0x0B	; 11
     8fc:	6a e1       	ldi	r22, 0x1A	; 26
     8fe:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
     902:	84 e0       	ldi	r24, 0x04	; 4
     904:	64 e2       	ldi	r22, 0x24	; 36
     906:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
     90a:	85 e0       	ldi	r24, 0x05	; 5
     90c:	6a e1       	ldi	r22, 0x1A	; 26
     90e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
     912:	86 e0       	ldi	r24, 0x06	; 6
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
     91a:	87 e0       	ldi	r24, 0x07	; 7
     91c:	60 e2       	ldi	r22, 0x20	; 32
     91e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>

	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
     922:	80 ec       	ldi	r24, 0xC0	; 192
     924:	6d e0       	ldi	r22, 0x0D	; 13
     926:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	
	// bring MAC out of reset
	//enc28j60Write(MACON2, 0x00);

	// enable automatic padding to 60bytes and CRC operations
	enc28j60Write(MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     92a:	82 ec       	ldi	r24, 0xC2	; 194
     92c:	62 e3       	ldi	r22, 0x32	; 50
     92e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>

	// Allow infinite deferals if the medium is continuously busy 
    // (do not time out a transmission if the half duplex medium is 
    // completely saturated with other people's data)
    enc28j60Write(MACON4, MACON4_DEFER);
     932:	83 ec       	ldi	r24, 0xC3	; 195
     934:	60 e4       	ldi	r22, 0x40	; 64
     936:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>

	// Late collisions occur beyond 63+8 bytes (8 bytes for preamble/start of frame delimiter)
	// 55 is all that is needed for IEEE 802.3, but ENC28J60 B5 errata for improper link pulse 
	// collisions will occur less often with a larger number.
    enc28j60Write(MACLCON2, 63);
     93a:	89 ec       	ldi	r24, 0xC9	; 201
     93c:	6f e3       	ldi	r22, 0x3F	; 63
     93e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	
	// Set non-back-to-back inter-packet gap to 9.6us.  The back-to-back 
	// inter-packet gap (MABBIPG) is set by MACSetDuplex() which is called 
	// later.
	enc28j60Write(MAIPGL, 0x12);
     942:	86 ec       	ldi	r24, 0xC6	; 198
     944:	62 e1       	ldi	r22, 0x12	; 18
     946:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(MAIPGH, 0x0C);
     94a:	87 ec       	ldi	r24, 0xC7	; 199
     94c:	6c e0       	ldi	r22, 0x0C	; 12
     94e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	
	// Set the maximum packet size which the controller will accept
    // Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
     952:	8a ec       	ldi	r24, 0xCA	; 202
     954:	6e ee       	ldi	r22, 0xEE	; 238
     956:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
     95a:	8b ec       	ldi	r24, 0xCB	; 203
     95c:	65 e0       	ldi	r22, 0x05	; 5
     95e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	
	// do bank 3 stuff
    // write MAC address
	// NOTE: MAC address in ENC28J60 is byte-backward
	// ENC28J60 is big-endian avr gcc is little-endian
	enc28j60Write(MAADR5, avr_mac[0]);
     962:	84 ee       	ldi	r24, 0xE4	; 228
     964:	68 81       	ld	r22, Y
     966:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(MAADR4, avr_mac[1]);
     96a:	85 ee       	ldi	r24, 0xE5	; 229
     96c:	69 81       	ldd	r22, Y+1	; 0x01
     96e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(MAADR3, avr_mac[2]);
     972:	82 ee       	ldi	r24, 0xE2	; 226
     974:	6a 81       	ldd	r22, Y+2	; 0x02
     976:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(MAADR2, avr_mac[3]);
     97a:	83 ee       	ldi	r24, 0xE3	; 227
     97c:	6b 81       	ldd	r22, Y+3	; 0x03
     97e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(MAADR1, avr_mac[4]);
     982:	80 ee       	ldi	r24, 0xE0	; 224
     984:	6c 81       	ldd	r22, Y+4	; 0x04
     986:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(MAADR0, avr_mac[5]);
     98a:	81 ee       	ldi	r24, 0xE1	; 225
     98c:	6d 81       	ldd	r22, Y+5	; 0x05
     98e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, (WORD_BYTES){PHCON2_HDLDIS});
     992:	80 e1       	ldi	r24, 0x10	; 16
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	71 e0       	ldi	r23, 0x01	; 1
     998:	0e 94 1a 04 	call	0x834	; 0x834 <enc28j60PhyWrite>
	
	// Magjack leds configuration, see enc28j60 datasheet, page 11
	// 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
	// enc28j60PhyWrite(PHLCON,0b0000 0100 0111 00 10);
	enc28j60PhyWrite(PHLCON,(WORD_BYTES){0x0472});
     99c:	84 e1       	ldi	r24, 0x14	; 20
     99e:	62 e7       	ldi	r22, 0x72	; 114
     9a0:	74 e0       	ldi	r23, 0x04	; 4
     9a2:	0e 94 1a 04 	call	0x834	; 0x834 <enc28j60PhyWrite>
	// Type     ETH.DST
	// ARP      BROADCAST
 	// 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
	// in binary these poitions are:11 0000 0011 1111
	// This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
     9a6:	88 e3       	ldi	r24, 0x38	; 56
     9a8:	60 eb       	ldi	r22, 0xB0	; 176
     9aa:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(EPMM0, 0x3f);
     9ae:	88 e2       	ldi	r24, 0x28	; 40
     9b0:	6f e3       	ldi	r22, 0x3F	; 63
     9b2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(EPMM1, 0x30);
     9b6:	89 e2       	ldi	r24, 0x29	; 41
     9b8:	60 e3       	ldi	r22, 0x30	; 48
     9ba:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(EPMCSL, 0xf9);
     9be:	80 e3       	ldi	r24, 0x30	; 48
     9c0:	69 ef       	ldi	r22, 0xF9	; 249
     9c2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(EPMCSH, 0xf7);
     9c6:	81 e3       	ldi	r24, 0x31	; 49
     9c8:	67 ef       	ldi	r22, 0xF7	; 247
     9ca:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>

	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
     9ce:	84 ec       	ldi	r24, 0xC4	; 196
     9d0:	62 e1       	ldi	r22, 0x12	; 18
     9d2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	
	// switch to bank 0
	enc28j60SetBank(ECON1);
     9d6:	8f e1       	ldi	r24, 0x1F	; 31
     9d8:	0e 94 bb 03 	call	0x776	; 0x776 <enc28j60SetBank>

	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     9dc:	80 e8       	ldi	r24, 0x80	; 128
     9de:	6b e1       	ldi	r22, 0x1B	; 27
     9e0:	40 ec       	ldi	r20, 0xC0	; 192
     9e2:	0e 94 b0 03 	call	0x760	; 0x760 <enc28j60WriteOp>

	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     9e6:	80 e8       	ldi	r24, 0x80	; 128
     9e8:	6f e1       	ldi	r22, 0x1F	; 31
     9ea:	44 e0       	ldi	r20, 0x04	; 4
     9ec:	0e 94 b0 03 	call	0x760	; 0x760 <enc28j60WriteOp>
     9f0:	88 ec       	ldi	r24, 0xC8	; 200
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	20 e9       	ldi	r18, 0x90	; 144
     9f6:	31 e0       	ldi	r19, 0x01	; 1
     9f8:	f9 01       	movw	r30, r18
     9fa:	31 97       	sbiw	r30, 0x01	; 1
     9fc:	f1 f7       	brne	.-4      	; 0x9fa <enc28j60_init+0x18a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a00:	d9 f7       	brne	.-10     	; 0x9f8 <enc28j60_init+0x188>

	_delay_ms(20);
}
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <enc28j60getrev>:
// Description : read the revision of the chip.
//
//*******************************************************************************************
BYTE enc28j60getrev(void)
{
	return(enc28j60Read(EREVID));
     a08:	82 e7       	ldi	r24, 0x72	; 114
     a0a:	0e 94 df 03 	call	0x7be	; 0x7be <enc28j60Read>
}
     a0e:	08 95       	ret

00000a10 <enc28j60_packet_send>:
// Function : enc28j60_packet_send
// Description : Send packet to network.
//
//*******************************************************************************************
void enc28j60_packet_send ( BYTE *buffer, WORD length )
{
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	8c 01       	movw	r16, r24
     a1a:	eb 01       	movw	r28, r22
	//Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, LOW(TXSTART_INIT) );
     a1c:	82 e0       	ldi	r24, 0x02	; 2
     a1e:	64 e2       	ldi	r22, 0x24	; 36
     a20:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(EWRPTH, HIGH(TXSTART_INIT) );
     a24:	83 e0       	ldi	r24, 0x03	; 3
     a26:	6a e1       	ldi	r22, 0x1A	; 26
     a28:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>

	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, LOW((TXSTART_INIT+length)) );
     a2c:	ce 01       	movw	r24, r28
     a2e:	8c 5d       	subi	r24, 0xDC	; 220
     a30:	68 2f       	mov	r22, r24
     a32:	86 e0       	ldi	r24, 0x06	; 6
     a34:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(ETXNDH, HIGH((TXSTART_INIT+length)) );
     a38:	9e 01       	movw	r18, r28
     a3a:	2c 5d       	subi	r18, 0xDC	; 220
     a3c:	35 4e       	sbci	r19, 0xE5	; 229
     a3e:	87 e0       	ldi	r24, 0x07	; 7
     a40:	63 2f       	mov	r22, r19
     a42:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>

	// write per-packet control byte (0x00 means use macon3 settings)
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     a46:	8a e7       	ldi	r24, 0x7A	; 122
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	0e 94 b0 03 	call	0x760	; 0x760 <enc28j60WriteOp>

	CSACTIVE;
     a50:	c4 98       	cbi	0x18, 4	; 24
	// issue write command
	SPDR = ENC28J60_WRITE_BUF_MEM;
     a52:	8a e7       	ldi	r24, 0x7A	; 122
     a54:	8f b9       	out	0x0f, r24	; 15
	waitspi();
     a56:	77 9b       	sbis	0x0e, 7	; 14
     a58:	fe cf       	rjmp	.-4      	; 0xa56 <enc28j60_packet_send+0x46>
     a5a:	08 c0       	rjmp	.+16     	; 0xa6c <enc28j60_packet_send+0x5c>
	while(length)
	{
		length--;
		// write data
		SPDR = *buffer++;
     a5c:	f8 01       	movw	r30, r16
     a5e:	80 81       	ld	r24, Z
     a60:	8f b9       	out	0x0f, r24	; 15
		waitspi();
     a62:	77 9b       	sbis	0x0e, 7	; 14
     a64:	fe cf       	rjmp	.-4      	; 0xa62 <enc28j60_packet_send+0x52>
	// issue write command
	SPDR = ENC28J60_WRITE_BUF_MEM;
	waitspi();
	while(length)
	{
		length--;
     a66:	21 97       	sbiw	r28, 0x01	; 1
		// write data
		SPDR = *buffer++;
     a68:	0f 5f       	subi	r16, 0xFF	; 255
     a6a:	1f 4f       	sbci	r17, 0xFF	; 255

	CSACTIVE;
	// issue write command
	SPDR = ENC28J60_WRITE_BUF_MEM;
	waitspi();
	while(length)
     a6c:	20 97       	sbiw	r28, 0x00	; 0
     a6e:	b1 f7       	brne	.-20     	; 0xa5c <enc28j60_packet_send+0x4c>
		length--;
		// write data
		SPDR = *buffer++;
		waitspi();
	}
	CSPASSIVE;
     a70:	c4 9a       	sbi	0x18, 4	; 24
	
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     a72:	80 e8       	ldi	r24, 0x80	; 128
     a74:	6f e1       	ldi	r22, 0x1F	; 31
     a76:	48 e0       	ldi	r20, 0x08	; 8
     a78:	0e 94 b0 03 	call	0x760	; 0x760 <enc28j60WriteOp>

	// Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
	if( (enc28j60Read(EIR) & EIR_TXERIF) )
     a7c:	8c e1       	ldi	r24, 0x1C	; 28
     a7e:	0e 94 df 03 	call	0x7be	; 0x7be <enc28j60Read>
     a82:	81 ff       	sbrs	r24, 1
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <enc28j60_packet_send+0x80>
	{
		enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     a86:	80 ea       	ldi	r24, 0xA0	; 160
     a88:	6f e1       	ldi	r22, 0x1F	; 31
     a8a:	48 e0       	ldi	r20, 0x08	; 8
     a8c:	0e 94 b0 03 	call	0x760	; 0x760 <enc28j60WriteOp>
	}
}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	08 95       	ret

00000a9a <enc28j60_packet_receive>:
// Description : check received packet and return length of data
//
//*******************************************************************************************
//WORD data_length;
WORD enc28j60_packet_receive ( BYTE *rxtx_buffer, WORD max_length )
{
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	6c 01       	movw	r12, r24
     aac:	7b 01       	movw	r14, r22
	WORD_BYTES rx_status, data_length;
	
	// check if a packet has been received and buffered
	// if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
	// The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) == 0 )
     aae:	89 e3       	ldi	r24, 0x39	; 57
     ab0:	0e 94 df 03 	call	0x7be	; 0x7be <enc28j60Read>
     ab4:	88 23       	and	r24, r24
     ab6:	19 f4       	brne	.+6      	; 0xabe <enc28j60_packet_receive+0x24>
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	5a c0       	rjmp	.+180    	; 0xb72 <enc28j60_packet_receive+0xd8>
	{
		return 0;
	}

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, next_packet_ptr.bytes[0]);
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	60 91 0f 01 	lds	r22, 0x010F
     ac4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(ERDPTH, next_packet_ptr.bytes[1]);
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	60 91 10 01 	lds	r22, 0x0110
     ace:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>

	// read the next packet pointer
	next_packet_ptr.bytes[0] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     ad2:	8a e3       	ldi	r24, 0x3A	; 58
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	0e 94 9e 03 	call	0x73c	; 0x73c <enc28j60ReadOp>
     ada:	80 93 0f 01 	sts	0x010F, r24
	next_packet_ptr.bytes[1] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     ade:	8a e3       	ldi	r24, 0x3A	; 58
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	0e 94 9e 03 	call	0x73c	; 0x73c <enc28j60ReadOp>
     ae6:	08 2f       	mov	r16, r24
     ae8:	80 93 10 01 	sts	0x0110, r24

	// read the packet length (see datasheet page 43)
	data_length.bytes[0] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     aec:	8a e3       	ldi	r24, 0x3A	; 58
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	0e 94 9e 03 	call	0x73c	; 0x73c <enc28j60ReadOp>
     af4:	c8 2f       	mov	r28, r24
	data_length.bytes[1] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     af6:	8a e3       	ldi	r24, 0x3A	; 58
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	0e 94 9e 03 	call	0x73c	; 0x73c <enc28j60ReadOp>
     afe:	d8 2f       	mov	r29, r24
	data_length.word -=4; //remove the CRC count
     b00:	24 97       	sbiw	r28, 0x04	; 4
	
	// read the receive status (see datasheet page 43)
	rx_status.bytes[0] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     b02:	8a e3       	ldi	r24, 0x3A	; 58
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	0e 94 9e 03 	call	0x73c	; 0x73c <enc28j60ReadOp>
     b0a:	18 2f       	mov	r17, r24
	rx_status.bytes[1] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     b0c:	8a e3       	ldi	r24, 0x3A	; 58
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	0e 94 9e 03 	call	0x73c	; 0x73c <enc28j60ReadOp>
	
	if ( data_length.word > (max_length-1) )
     b14:	b7 01       	movw	r22, r14
     b16:	61 50       	subi	r22, 0x01	; 1
     b18:	70 40       	sbci	r23, 0x00	; 0
     b1a:	6c 17       	cp	r22, r28
     b1c:	7d 07       	cpc	r23, r29
     b1e:	08 f4       	brcc	.+2      	; 0xb22 <enc28j60_packet_receive+0x88>
	{
		data_length.word = max_length-1;
     b20:	eb 01       	movw	r28, r22
	}
	
	// check CRC and symbol errors (see datasheet page 44, table 7-3):
	// The ERXFCON.CRCEN is set by default. Normally we should not
	// need to check this.
	if ( (rx_status.word & 0x80)==0 )
     b22:	17 fd       	sbrc	r17, 7
     b24:	03 c0       	rjmp	.+6      	; 0xb2c <enc28j60_packet_receive+0x92>
	{
		// invalid
		data_length.word = 0;
     b26:	c0 e0       	ldi	r28, 0x00	; 0
     b28:	d0 e0       	ldi	r29, 0x00	; 0
     b2a:	14 c0       	rjmp	.+40     	; 0xb54 <enc28j60_packet_receive+0xba>
	}
	else
	{
		// read data from rx buffer and save to rxtx_buffer
		rx_status.word = data_length.word;
     b2c:	9e 01       	movw	r18, r28
		CSACTIVE;
     b2e:	c4 98       	cbi	0x18, 4	; 24
		// issue read command
		SPDR = ENC28J60_READ_BUF_MEM;
     b30:	8a e3       	ldi	r24, 0x3A	; 58
     b32:	8f b9       	out	0x0f, r24	; 15
		waitspi();
     b34:	77 9b       	sbis	0x0e, 7	; 14
     b36:	fe cf       	rjmp	.-4      	; 0xb34 <enc28j60_packet_receive+0x9a>
     b38:	09 c0       	rjmp	.+18     	; 0xb4c <enc28j60_packet_receive+0xb2>
		while(rx_status.word)
		{
			rx_status.word--;
			SPDR = 0x00;
     b3a:	1f b8       	out	0x0f, r1	; 15
			waitspi();
     b3c:	77 9b       	sbis	0x0e, 7	; 14
     b3e:	fe cf       	rjmp	.-4      	; 0xb3c <enc28j60_packet_receive+0xa2>
			*rxtx_buffer++ = SPDR;
     b40:	8f b1       	in	r24, 0x0f	; 15
     b42:	f6 01       	movw	r30, r12
     b44:	81 93       	st	Z+, r24
     b46:	6f 01       	movw	r12, r30
     b48:	21 50       	subi	r18, 0x01	; 1
     b4a:	30 40       	sbci	r19, 0x00	; 0
		rx_status.word = data_length.word;
		CSACTIVE;
		// issue read command
		SPDR = ENC28J60_READ_BUF_MEM;
		waitspi();
		while(rx_status.word)
     b4c:	21 15       	cp	r18, r1
     b4e:	31 05       	cpc	r19, r1
     b50:	a1 f7       	brne	.-24     	; 0xb3a <enc28j60_packet_receive+0xa0>
			rx_status.word--;
			SPDR = 0x00;
			waitspi();
			*rxtx_buffer++ = SPDR;
		}
		CSPASSIVE;
     b52:	c4 9a       	sbi	0x18, 4	; 24
	}
	
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60Write(ERXRDPTL, next_packet_ptr.bytes[0]);
     b54:	8c e0       	ldi	r24, 0x0C	; 12
     b56:	60 91 0f 01 	lds	r22, 0x010F
     b5a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>
	enc28j60Write(ERXRDPTH, next_packet_ptr.bytes[1]);
     b5e:	8d e0       	ldi	r24, 0x0D	; 13
     b60:	60 2f       	mov	r22, r16
     b62:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <enc28j60Write>

	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     b66:	80 e8       	ldi	r24, 0x80	; 128
     b68:	6e e1       	ldi	r22, 0x1E	; 30
     b6a:	40 e4       	ldi	r20, 0x40	; 64
     b6c:	0e 94 b0 03 	call	0x760	; 0x760 <enc28j60WriteOp>

	return( data_length.word );
     b70:	9e 01       	movw	r18, r28
}
     b72:	c9 01       	movw	r24, r18
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	df 90       	pop	r13
     b82:	cf 90       	pop	r12
     b84:	08 95       	ret

00000b86 <software_reset>:
//*****************************************************************************************
#ifndef REMOVE_BOOTLOADER_SUPPORT
void software_reset(void) __attribute__ ((naked));
void software_reset(void)
{
	wdt_enable(WDTO_15MS);
     b86:	28 e0       	ldi	r18, 0x08	; 8
     b88:	88 e1       	ldi	r24, 0x18	; 24
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	a8 95       	wdr
     b92:	81 bd       	out	0x21, r24	; 33
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	21 bd       	out	0x21, r18	; 33
     b98:	ff cf       	rjmp	.-2      	; 0xb98 <software_reset+0x12>

00000b9a <client_process>:
// I recommented Apache webserver and PHP script. 
// More detail about Apache and PHP installation please visit http://www.avrportal.com/
//
//*****************************************************************************************
void client_process ( void )
{
     b9a:	4f 92       	push	r4
     b9c:	5f 92       	push	r5
     b9e:	6f 92       	push	r6
     ba0:	7f 92       	push	r7
     ba2:	8f 92       	push	r8
     ba4:	9f 92       	push	r9
     ba6:	af 92       	push	r10
     ba8:	bf 92       	push	r11
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	ce 5e       	subi	r28, 0xEE	; 238
     bbe:	d5 40       	sbci	r29, 0x05	; 5
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
	WORD dlength;
	// you can change rx,tx buffer size in includes.h
	BYTE rxtx_buffer[MAX_RXTX_BUFFER];

	// wait for send temparature flag is set, this flag set by time_base function (menu.c)
	if ( flag1.bits.send_temp == 0 )
     bca:	80 91 27 01 	lds	r24, 0x0127
     bce:	84 ff       	sbrs	r24, 4
     bd0:	d0 c0       	rjmp	.+416    	; 0xd72 <client_process+0x1d8>
		return;	
	// AVR busy now and wait untill transfer data to web browser completed.
	if ( flag1.bits.syn_is_received )
     bd2:	86 fd       	sbrc	r24, 6
     bd4:	ce c0       	rjmp	.+412    	; 0xd72 <client_process+0x1d8>
		return;
	// AVR sent temparature to web server but not found web server on port 80
	//if ( flag1.bits.not_found_server )
	//	return;
	// send SYN to initial connection
	if ( flag1.bits.syn_is_sent == 0 )
     bd6:	85 fd       	sbrc	r24, 5
     bd8:	31 c0       	rjmp	.+98     	; 0xc3c <client_process+0xa2>
	{
		// start arp 
		// server ip was not found on network
		if ( arp_who_is ( rxtx_buffer, (BYTE*)&server_mac, (BYTE*)&server_ip ) == 0 )
     bda:	0e e2       	ldi	r16, 0x2E	; 46
     bdc:	11 e0       	ldi	r17, 0x01	; 1
     bde:	6e 01       	movw	r12, r28
     be0:	08 94       	sec
     be2:	c1 1c       	adc	r12, r1
     be4:	d1 1c       	adc	r13, r1
     be6:	c6 01       	movw	r24, r12
     be8:	66 e3       	ldi	r22, 0x36	; 54
     bea:	71 e0       	ldi	r23, 0x01	; 1
     bec:	a8 01       	movw	r20, r16
     bee:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <arp_who_is>
     bf2:	88 23       	and	r24, r24
     bf4:	21 f4       	brne	.+8      	; 0xbfe <client_process+0x64>
		{
			flag1.bits.send_temp = 0;
     bf6:	80 91 27 01 	lds	r24, 0x0127
     bfa:	8f 7e       	andi	r24, 0xEF	; 239
     bfc:	2f c0       	rjmp	.+94     	; 0xc5c <client_process+0xc2>
			return;
		}
	
		// send SYN packet to initial connection
		tcp_send_packet (
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <client_process+0x66>
     c00:	ed b7       	in	r30, 0x3d	; 61
     c02:	fe b7       	in	r31, 0x3e	; 62
     c04:	12 83       	std	Z+2, r17	; 0x02
     c06:	01 83       	std	Z+1, r16	; 0x01
     c08:	c6 01       	movw	r24, r12
     c0a:	60 e5       	ldi	r22, 0x50	; 80
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	40 eb       	ldi	r20, 0xB0	; 176
     c10:	54 e0       	ldi	r21, 0x04	; 4
     c12:	22 e0       	ldi	r18, 0x02	; 2
     c14:	01 e0       	ldi	r16, 0x01	; 1
     c16:	ee 24       	eor	r14, r14
     c18:	e3 94       	inc	r14
     c1a:	cc 24       	eor	r12, r12
     c1c:	dd 24       	eor	r13, r13
     c1e:	aa 24       	eor	r10, r10
     c20:	bb 24       	eor	r11, r11
     c22:	36 e3       	ldi	r19, 0x36	; 54
     c24:	83 2e       	mov	r8, r19
     c26:	31 e0       	ldi	r19, 0x01	; 1
     c28:	93 2e       	mov	r9, r19
     c2a:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <tcp_send_packet>
			1,						// (bool)clear sequence ack number
			0,						// 0=use old seq, seqack : 1=new seq,seqack no data : new seq,seqack with data
			0,						// tcp data length
			(BYTE*)&server_mac,		// server mac address
			(BYTE*)&server_ip );	// server ip address
		flag1.bits.syn_is_sent = 1;
     c2e:	80 91 27 01 	lds	r24, 0x0127
     c32:	80 62       	ori	r24, 0x20	; 32
     c34:	80 93 27 01 	sts	0x0127, r24
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
	}
	// get new packet
	dlength = enc28j60_packet_receive( (BYTE*)&rxtx_buffer, MAX_RXTX_BUFFER );
     c3c:	2e 01       	movw	r4, r28
     c3e:	08 94       	sec
     c40:	41 1c       	adc	r4, r1
     c42:	51 1c       	adc	r5, r1
     c44:	c2 01       	movw	r24, r4
     c46:	6e ee       	ldi	r22, 0xEE	; 238
     c48:	75 e0       	ldi	r23, 0x05	; 5
     c4a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <enc28j60_packet_receive>
	
	// no new packet incoming
	if ( dlength == 0 )
     c4e:	89 2b       	or	r24, r25
     c50:	41 f4       	brne	.+16     	; 0xc62 <client_process+0xc8>
	{
		// timeout occured, when SYN has been sent but no response from web server
		// reset send_temp and syn_is_sent flags
		if ( flag1.bits.send_temp_timeout )
     c52:	80 91 27 01 	lds	r24, 0x0127
     c56:	87 ff       	sbrs	r24, 7
     c58:	8c c0       	rjmp	.+280    	; 0xd72 <client_process+0x1d8>
		{
			flag1.bits.send_temp_timeout = 0;
			flag1.bits.send_temp = 0;
			flag1.bits.syn_is_sent = 0;
     c5a:	8f 74       	andi	r24, 0x4F	; 79
     c5c:	80 93 27 01 	sts	0x0127, r24
     c60:	88 c0       	rjmp	.+272    	; 0xd72 <client_process+0x1d8>
		return;
	}
	
	// check ip packet send to avr or not?
	// accept ip packet only
	if ( ip_packet_is_ip ( (BYTE*)&rxtx_buffer ) == 0 )
     c62:	c2 01       	movw	r24, r4
     c64:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <ip_packet_is_ip>
     c68:	88 23       	and	r24, r24
     c6a:	09 f4       	brne	.+2      	; 0xc6e <client_process+0xd4>
     c6c:	82 c0       	rjmp	.+260    	; 0xd72 <client_process+0x1d8>
	{
		return;
	}

	// check SYNACK flag, after AVR send SYN server response by send SYNACK to AVR
	if ( rxtx_buffer [ TCP_FLAGS_P ] == ( TCP_FLAG_SYN_V | TCP_FLAG_ACK_V ) )
     c6e:	88 a9       	ldd	r24, Y+48	; 0x30
     c70:	82 31       	cpi	r24, 0x12	; 18
     c72:	71 f5       	brne	.+92     	; 0xcd0 <client_process+0x136>
	{
		// send ACK to answer SYNACK
		tcp_send_packet (
     c74:	00 d0       	rcall	.+0      	; 0xc76 <client_process+0xdc>
     c76:	0e e2       	ldi	r16, 0x2E	; 46
     c78:	60 2e       	mov	r6, r16
     c7a:	01 e0       	ldi	r16, 0x01	; 1
     c7c:	70 2e       	mov	r7, r16
     c7e:	ed b7       	in	r30, 0x3d	; 61
     c80:	fe b7       	in	r31, 0x3e	; 62
     c82:	72 82       	std	Z+2, r7	; 0x02
     c84:	61 82       	std	Z+1, r6	; 0x01
     c86:	c2 01       	movw	r24, r4
     c88:	60 e5       	ldi	r22, 0x50	; 80
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	40 eb       	ldi	r20, 0xB0	; 176
     c8e:	54 e0       	ldi	r21, 0x04	; 4
     c90:	20 e1       	ldi	r18, 0x10	; 16
     c92:	00 e0       	ldi	r16, 0x00	; 0
     c94:	ee 24       	eor	r14, r14
     c96:	11 e0       	ldi	r17, 0x01	; 1
     c98:	c1 2e       	mov	r12, r17
     c9a:	d1 2c       	mov	r13, r1
     c9c:	aa 24       	eor	r10, r10
     c9e:	bb 24       	eor	r11, r11
     ca0:	b6 e3       	ldi	r27, 0x36	; 54
     ca2:	8b 2e       	mov	r8, r27
     ca4:	b1 e0       	ldi	r27, 0x01	; 1
     ca6:	9b 2e       	mov	r9, r27
     ca8:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <tcp_send_packet>
					1,						// 0=use old seq, seqack : 1=new seq,seqack no data : >1 new seq,seqack with data
					0,						// tcp data length
					(BYTE*)&server_mac,		// server mac address
					(BYTE*)&server_ip );	// server ip address
		// setup http request to server
		dlength = http_put_request( (BYTE*)&rxtx_buffer );
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	c2 01       	movw	r24, r4
     cb2:	0e 94 86 09 	call	0x130c	; 0x130c <http_put_request>
     cb6:	5c 01       	movw	r10, r24
		// send http request packet
		// send packet with PSHACK
		tcp_send_packet (
     cb8:	00 d0       	rcall	.+0      	; 0xcba <client_process+0x120>
     cba:	ed b7       	in	r30, 0x3d	; 61
     cbc:	fe b7       	in	r31, 0x3e	; 62
     cbe:	72 82       	std	Z+2, r7	; 0x02
     cc0:	61 82       	std	Z+1, r6	; 0x01
     cc2:	c2 01       	movw	r24, r4
     cc4:	60 e5       	ldi	r22, 0x50	; 80
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	40 eb       	ldi	r20, 0xB0	; 176
     cca:	54 e0       	ldi	r21, 0x04	; 4
     ccc:	28 e1       	ldi	r18, 0x18	; 24
     cce:	29 c0       	rjmp	.+82     	; 0xd22 <client_process+0x188>
					(BYTE*)&server_ip );	// server ip address
		return;
	}
	// after AVR send http request to server, server response by send data with PSHACK to AVR
	// AVR answer by send ACK and FINACK to server
	if ( rxtx_buffer [ TCP_FLAGS_P ] == (TCP_FLAG_ACK_V|TCP_FLAG_PSH_V) )
     cd0:	88 31       	cpi	r24, 0x18	; 24
     cd2:	61 f5       	brne	.+88     	; 0xd2c <client_process+0x192>
	{
		dlength = tcp_get_dlength( (BYTE*)&rxtx_buffer );
     cd4:	c2 01       	movw	r24, r4
     cd6:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <tcp_get_dlength>
     cda:	6c 01       	movw	r12, r24

		// send ACK to answer PSHACK from server
		tcp_send_packet (
     cdc:	00 d0       	rcall	.+0      	; 0xcde <client_process+0x144>
     cde:	ae e2       	ldi	r26, 0x2E	; 46
     ce0:	6a 2e       	mov	r6, r26
     ce2:	a1 e0       	ldi	r26, 0x01	; 1
     ce4:	7a 2e       	mov	r7, r26
     ce6:	ed b7       	in	r30, 0x3d	; 61
     ce8:	fe b7       	in	r31, 0x3e	; 62
     cea:	72 82       	std	Z+2, r7	; 0x02
     cec:	61 82       	std	Z+1, r6	; 0x01
     cee:	c2 01       	movw	r24, r4
     cf0:	60 e5       	ldi	r22, 0x50	; 80
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	40 eb       	ldi	r20, 0xB0	; 176
     cf6:	54 e0       	ldi	r21, 0x04	; 4
     cf8:	20 e1       	ldi	r18, 0x10	; 16
     cfa:	00 e0       	ldi	r16, 0x00	; 0
     cfc:	ee 24       	eor	r14, r14
     cfe:	aa 24       	eor	r10, r10
     d00:	bb 24       	eor	r11, r11
     d02:	f6 e3       	ldi	r31, 0x36	; 54
     d04:	8f 2e       	mov	r8, r31
     d06:	f1 e0       	ldi	r31, 0x01	; 1
     d08:	9f 2e       	mov	r9, r31
     d0a:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <tcp_send_packet>
					0,				// tcp data length
					(BYTE*)&server_mac,		// server mac address
					(BYTE*)&server_ip );	// server ip address
		// send finack to disconnect from web server
		
		tcp_send_packet (
     d0e:	ed b7       	in	r30, 0x3d	; 61
     d10:	fe b7       	in	r31, 0x3e	; 62
     d12:	72 82       	std	Z+2, r7	; 0x02
     d14:	61 82       	std	Z+1, r6	; 0x01
     d16:	c2 01       	movw	r24, r4
     d18:	60 e5       	ldi	r22, 0x50	; 80
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	40 eb       	ldi	r20, 0xB0	; 176
     d1e:	54 e0       	ldi	r21, 0x04	; 4
     d20:	21 e1       	ldi	r18, 0x11	; 17
     d22:	cc 24       	eor	r12, r12
     d24:	dd 24       	eor	r13, r13
     d26:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <tcp_send_packet>
     d2a:	21 c0       	rjmp	.+66     	; 0xd6e <client_process+0x1d4>
		return;
		//menu_flag.bits.send_temp = 0;
		//send_syn = 0;
	}
	// answer FINACK from web server by send ACK to web server
	if ( rxtx_buffer [ TCP_FLAGS_P ] == (TCP_FLAG_FIN_V|TCP_FLAG_ACK_V) )
     d2c:	81 31       	cpi	r24, 0x11	; 17
     d2e:	09 f5       	brne	.+66     	; 0xd72 <client_process+0x1d8>
	{
		// send ACK with seqack = 1
		tcp_send_packet (
     d30:	00 d0       	rcall	.+0      	; 0xd32 <client_process+0x198>
     d32:	8e e2       	ldi	r24, 0x2E	; 46
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	ed b7       	in	r30, 0x3d	; 61
     d38:	fe b7       	in	r31, 0x3e	; 62
     d3a:	92 83       	std	Z+2, r25	; 0x02
     d3c:	81 83       	std	Z+1, r24	; 0x01
     d3e:	c2 01       	movw	r24, r4
     d40:	60 e5       	ldi	r22, 0x50	; 80
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	40 eb       	ldi	r20, 0xB0	; 176
     d46:	54 e0       	ldi	r21, 0x04	; 4
     d48:	20 e1       	ldi	r18, 0x10	; 16
     d4a:	00 e0       	ldi	r16, 0x00	; 0
     d4c:	ee 24       	eor	r14, r14
     d4e:	e1 e0       	ldi	r30, 0x01	; 1
     d50:	ce 2e       	mov	r12, r30
     d52:	d1 2c       	mov	r13, r1
     d54:	aa 24       	eor	r10, r10
     d56:	bb 24       	eor	r11, r11
     d58:	36 e3       	ldi	r19, 0x36	; 54
     d5a:	83 2e       	mov	r8, r19
     d5c:	31 e0       	ldi	r19, 0x01	; 1
     d5e:	93 2e       	mov	r9, r19
     d60:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <tcp_send_packet>
					0,				// tcp data length
					(BYTE*)&server_mac,		// server mac address
					(BYTE*)&server_ip );	// server ip address
		// temparature has been sent
		// and wait for next schedule to send temparature
		flag1.bits.send_temp = 0;
     d64:	80 91 27 01 	lds	r24, 0x0127
		flag1.bits.syn_is_sent = 0;
     d68:	8f 7c       	andi	r24, 0xCF	; 207
     d6a:	80 93 27 01 	sts	0x0127, r24
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
	}
}
     d72:	c2 51       	subi	r28, 0x12	; 18
     d74:	da 4f       	sbci	r29, 0xFA	; 250
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	ef 90       	pop	r14
     d8a:	df 90       	pop	r13
     d8c:	cf 90       	pop	r12
     d8e:	bf 90       	pop	r11
     d90:	af 90       	pop	r10
     d92:	9f 90       	pop	r9
     d94:	8f 90       	pop	r8
     d96:	7f 90       	pop	r7
     d98:	6f 90       	pop	r6
     d9a:	5f 90       	pop	r5
     d9c:	4f 90       	pop	r4
     d9e:	08 95       	ret

00000da0 <server_process>:
// Function : server_process
// Description : Run web server and listen on port 80
//
//*****************************************************************************************
void server_process ( void )
{
     da0:	cf 92       	push	r12
     da2:	df 92       	push	r13
     da4:	ef 92       	push	r14
     da6:	ff 92       	push	r15
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	c8 5f       	subi	r28, 0xF8	; 248
     db6:	d5 40       	sbci	r29, 0x05	; 5
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
	IP_ADDR client_ip;
	// you can change rx,tx buffer size in includes.h
	BYTE rxtx_buffer[MAX_RXTX_BUFFER];
	WORD plen;
	
	if ( flag1.bits.syn_is_sent )
     dc2:	80 91 27 01 	lds	r24, 0x0127
     dc6:	85 fd       	sbrc	r24, 5
     dc8:	5b c0       	rjmp	.+182    	; 0xe80 <server_process+0xe0>
		return;
	// get new packet
	plen = enc28j60_packet_receive( (BYTE*)&rxtx_buffer, MAX_RXTX_BUFFER );
     dca:	ce 01       	movw	r24, r28
     dcc:	0b 96       	adiw	r24, 0x0b	; 11
     dce:	6e ee       	ldi	r22, 0xEE	; 238
     dd0:	75 e0       	ldi	r23, 0x05	; 5
     dd2:	0e 94 4d 05 	call	0xa9a	; 0xa9a <enc28j60_packet_receive>
	
	//plen will ne unequal to zero if there is a valid packet (without crc error)
	if(plen==0)
     dd6:	89 2b       	or	r24, r25
     dd8:	09 f4       	brne	.+2      	; 0xddc <server_process+0x3c>
     dda:	52 c0       	rjmp	.+164    	; 0xe80 <server_process+0xe0>
		return;

	// copy client mac address from buffer to client mac variable
	memcpy ( (BYTE*)&client_mac, &rxtx_buffer[ ETH_SRC_MAC_P ], sizeof(MAC_ADDR) );
     ddc:	de 01       	movw	r26, r28
     dde:	15 96       	adiw	r26, 0x05	; 5
     de0:	fe 01       	movw	r30, r28
     de2:	71 96       	adiw	r30, 0x11	; 17
     de4:	86 e0       	ldi	r24, 0x06	; 6
     de6:	01 90       	ld	r0, Z+
     de8:	0d 92       	st	X+, r0
     dea:	81 50       	subi	r24, 0x01	; 1
     dec:	e1 f7       	brne	.-8      	; 0xde6 <server_process+0x46>
	
	// check arp packet if match with avr ip let's send reply
	if ( arp_packet_is_arp( rxtx_buffer, (WORD_BYTES){ARP_OPCODE_REQUEST_V} ) )
     dee:	5b e0       	ldi	r21, 0x0B	; 11
     df0:	c5 2e       	mov	r12, r21
     df2:	d1 2c       	mov	r13, r1
     df4:	cc 0e       	add	r12, r28
     df6:	dd 1e       	adc	r13, r29
     df8:	c6 01       	movw	r24, r12
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <arp_packet_is_arp>
     e02:	88 23       	and	r24, r24
     e04:	39 f0       	breq	.+14     	; 0xe14 <server_process+0x74>
	{
		arp_send_reply ( (BYTE*)&rxtx_buffer, (BYTE*)&client_mac );
     e06:	c6 01       	movw	r24, r12
     e08:	be 01       	movw	r22, r28
     e0a:	6b 5f       	subi	r22, 0xFB	; 251
     e0c:	7f 4f       	sbci	r23, 0xFF	; 255
     e0e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <arp_send_reply>
     e12:	36 c0       	rjmp	.+108    	; 0xe80 <server_process+0xe0>
		return;
	}

	// get client ip address
	memcpy ( (BYTE*)&client_ip, &rxtx_buffer[ IP_SRC_IP_P ], sizeof(IP_ADDR) );
     e14:	8d a1       	ldd	r24, Y+37	; 0x25
     e16:	9e a1       	ldd	r25, Y+38	; 0x26
     e18:	af a1       	ldd	r26, Y+39	; 0x27
     e1a:	b8 a5       	ldd	r27, Y+40	; 0x28
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	ab 83       	std	Y+3, r26	; 0x03
     e22:	bc 83       	std	Y+4, r27	; 0x04
	// check ip packet send to avr or not?
	if ( ip_packet_is_ip ( (BYTE*)&rxtx_buffer ) == 0 )
     e24:	c6 01       	movw	r24, r12
     e26:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <ip_packet_is_ip>
     e2a:	88 23       	and	r24, r24
     e2c:	49 f1       	breq	.+82     	; 0xe80 <server_process+0xe0>
	{
		return;
	}

	// check ICMP packet, if packet is icmp packet let's send icmp echo reply
	if ( icmp_send_reply ( (BYTE*)&rxtx_buffer, (BYTE*)&client_mac, (BYTE*)&client_ip ) )
     e2e:	45 e0       	ldi	r20, 0x05	; 5
     e30:	e4 2e       	mov	r14, r20
     e32:	f1 2c       	mov	r15, r1
     e34:	ec 0e       	add	r14, r28
     e36:	fd 1e       	adc	r15, r29
     e38:	c6 01       	movw	r24, r12
     e3a:	b7 01       	movw	r22, r14
     e3c:	8e 01       	movw	r16, r28
     e3e:	0f 5f       	subi	r16, 0xFF	; 255
     e40:	1f 4f       	sbci	r17, 0xFF	; 255
     e42:	a8 01       	movw	r20, r16
     e44:	0e 94 26 10 	call	0x204c	; 0x204c <icmp_send_reply>
     e48:	88 23       	and	r24, r24
     e4a:	d1 f4       	brne	.+52     	; 0xe80 <server_process+0xe0>
	{
		return;
	}

	// check UDP packet
	if (udp_receive ( (BYTE *)&rxtx_buffer, (BYTE *)&client_mac, (BYTE *)&client_ip ))
     e4c:	c6 01       	movw	r24, r12
     e4e:	b7 01       	movw	r22, r14
     e50:	a8 01       	movw	r20, r16
     e52:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <udp_receive>
     e56:	88 23       	and	r24, r24
     e58:	71 f0       	breq	.+28     	; 0xe76 <server_process+0xd6>
	{
// added in V1.1 ***********************************
#ifndef REMOVE_BOOTLOADER_SUPPORT
		if( flag2.bits.software_reset )
     e5a:	80 91 26 01 	lds	r24, 0x0126
     e5e:	81 ff       	sbrs	r24, 1
     e60:	0f c0       	rjmp	.+30     	; 0xe80 <server_process+0xe0>
//*****************************************************************************************
#ifndef REMOVE_BOOTLOADER_SUPPORT
void software_reset(void) __attribute__ ((naked));
void software_reset(void)
{
	wdt_enable(WDTO_15MS);
     e62:	28 e0       	ldi	r18, 0x08	; 8
     e64:	88 e1       	ldi	r24, 0x18	; 24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	a8 95       	wdr
     e6e:	81 bd       	out	0x21, r24	; 33
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	21 bd       	out	0x21, r18	; 33
     e74:	ff cf       	rjmp	.-2      	; 0xe74 <server_process+0xd4>
		return;
	}
	
	// tcp start here
	// start web server at port 80, see http.c
	http_webserver_process ( (BYTE*)rxtx_buffer, (BYTE*)&client_mac, (BYTE*)&client_ip );
     e76:	c6 01       	movw	r24, r12
     e78:	b7 01       	movw	r22, r14
     e7a:	a8 01       	movw	r20, r16
     e7c:	0e 94 3e 0b 	call	0x167c	; 0x167c <http_webserver_process>
}
     e80:	c8 50       	subi	r28, 0x08	; 8
     e82:	da 4f       	sbci	r29, 0xFA	; 250
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	df 90       	pop	r13
     e9c:	cf 90       	pop	r12
     e9e:	08 95       	ret

00000ea0 <main>:
// Function : main
// Description : main program, 
//
//*****************************************************************************************
int main (void)
{
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
	// change your mac address here
	avr_mac.byte[0] = 'A';
     ea4:	81 e4       	ldi	r24, 0x41	; 65
     ea6:	80 93 28 01 	sts	0x0128, r24
	avr_mac.byte[1] = 'V';
     eaa:	86 e5       	ldi	r24, 0x56	; 86
     eac:	80 93 29 01 	sts	0x0129, r24
	avr_mac.byte[2] = 'R';
     eb0:	92 e5       	ldi	r25, 0x52	; 82
     eb2:	90 93 2a 01 	sts	0x012A, r25
	avr_mac.byte[3] = 'P';
     eb6:	80 e5       	ldi	r24, 0x50	; 80
     eb8:	80 93 2b 01 	sts	0x012B, r24
	avr_mac.byte[4] = 'O';
     ebc:	8f e4       	ldi	r24, 0x4F	; 79
     ebe:	80 93 2c 01 	sts	0x012C, r24
	avr_mac.byte[5] = 'R';
     ec2:	90 93 2d 01 	sts	0x012D, r25

	// read avr and server ip from eeprom
	eeprom_read_block ( &avr_ip, ee_avr_ip, 4 );
     ec6:	82 e3       	ldi	r24, 0x32	; 50
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	44 e0       	ldi	r20, 0x04	; 4
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	0e 94 5f 1a 	call	0x34be	; 0x34be <__eerd_block_m32>
	eeprom_read_block ( &server_ip, ee_server_ip, 4 );
     ed6:	8e e2       	ldi	r24, 0x2E	; 46
     ed8:	91 e0       	ldi	r25, 0x01	; 1
     eda:	64 e0       	ldi	r22, 0x04	; 4
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	44 e0       	ldi	r20, 0x04	; 4
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	0e 94 5f 1a 	call	0x34be	; 0x34be <__eerd_block_m32>
	
	// setup port as input and enable pull-up
	SW_DDR &= ~ ( _BV( SW_MENU ) | _BV( SW_EXIT ) | _BV( SW_UP ) | _BV( SW_DW ) );
     ee6:	8a b3       	in	r24, 0x1a	; 26
     ee8:	8f 70       	andi	r24, 0x0F	; 15
     eea:	8a bb       	out	0x1a, r24	; 26
	SW_PORT |= _BV( SW_MENU ) | _BV( SW_EXIT ) | _BV( SW_UP ) | _BV( SW_DW );
     eec:	8b b3       	in	r24, 0x1b	; 27
     eee:	80 6f       	ori	r24, 0xF0	; 240
     ef0:	8b bb       	out	0x1b, r24	; 27
	SFIOR &= ~_BV( PUD );
     ef2:	80 b7       	in	r24, 0x30	; 48
     ef4:	8b 7f       	andi	r24, 0xFB	; 251
     ef6:	80 bf       	out	0x30, r24	; 48

	// setup lcd backlight as output
	LCD_BL_DDR |= _BV( LCD_BL_PIN );
     ef8:	bb 9a       	sbi	0x17, 3	; 23
	// lcd backlight on
	LCD_BL_PORT |= _BV( LCD_BL_PIN );
     efa:	c3 9a       	sbi	0x18, 3	; 24
	
	// setup clock for timer1
	TCCR1B = 0x01;	// clk/1 no prescaling
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	8e bd       	out	0x2e, r24	; 46

	// initial adc, lcd, and menu
	adc_init();
     f00:	0e 94 88 16 	call	0x2d10	; 0x2d10 <adc_init>
	lcd_init ();
     f04:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <lcd_init>
	menu_init ();
     f08:	0e 94 81 12 	call	0x2502	; 0x2502 <menu_init>

	// set LED1, LED2 as output */
	LED_DDR |= _BV( LED_PIN1_DDR ) | _BV( LED_PIN2_DDR )| _BV( LED_PIN3_DDR )| _BV( LED_PIN4_DDR )| _BV( LED_PIN5_DDR )| _BV( LED_PIN6_DDR );
     f0c:	84 b3       	in	r24, 0x14	; 20
     f0e:	8c 6f       	ori	r24, 0xFC	; 252
     f10:	84 bb       	out	0x14, r24	; 20
	// set LED pin to "1" ( LED1,LED2 off)
	//LED_PORT |= _BV( LED_PIN1 ) | _BV( LED_PIN2 )| _BV( LED_PIN3 )| _BV( LED_PIN4 )| _BV( LED_PIN5 )| _BV( LED_PIN6 );
	LED_PORT =0x03;
     f12:	83 e0       	ldi	r24, 0x03	; 3
     f14:	85 bb       	out	0x15, r24	; 21

	// initial enc28j60
	enc28j60_init( (BYTE*)&avr_mac );
     f16:	88 e2       	ldi	r24, 0x28	; 40
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	0e 94 38 04 	call	0x870	; 0x870 <enc28j60_init>
	
// added in V1.1
	lcd_print_p( (PGM_P)version );
     f1e:	84 e5       	ldi	r24, 0x54	; 84
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <lcd_print_p>
	for(;;)
	{
		// wait until timer1 overflow
		while ( (TIFR & _BV ( TOV1 )) == 0 );
		TIFR |= _BV(TOV1);
		TCNT1 = 1536;	// Timer1 overflow every 1/16MHz * ( 65536 - 1536 ) = 4ms, 250Hz
     f26:	c0 e0       	ldi	r28, 0x00	; 0
     f28:	d6 e0       	ldi	r29, 0x06	; 6

	// loop forever
	for(;;)
	{
		// wait until timer1 overflow
		while ( (TIFR & _BV ( TOV1 )) == 0 );
     f2a:	08 b6       	in	r0, 0x38	; 56
     f2c:	02 fe       	sbrs	r0, 2
     f2e:	fd cf       	rjmp	.-6      	; 0xf2a <main+0x8a>
		TIFR |= _BV(TOV1);
     f30:	88 b7       	in	r24, 0x38	; 56
     f32:	84 60       	ori	r24, 0x04	; 4
     f34:	88 bf       	out	0x38, r24	; 56
		TCNT1 = 1536;	// Timer1 overflow every 1/16MHz * ( 65536 - 1536 ) = 4ms, 250Hz
     f36:	dd bd       	out	0x2d, r29	; 45
     f38:	cc bd       	out	0x2c, r28	; 44

		// general time base, generate by timer1
		// overflow every 1/250 seconds
		time_base ();
     f3a:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <time_base>
		
		// read temparature
		adc_read_temp();
     f3e:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <adc_read_temp>

		// server process response for arp, icmp, http
		server_process ();
     f42:	0e 94 d0 06 	call	0xda0	; 0xda0 <server_process>

		// send temparature to web server unsing http protocol
		// disable by default.
		client_process ();
     f46:	0e 94 cd 05 	call	0xb9a	; 0xb9a <client_process>

		// lcd user interface menu
		// setup IP address, countdown timer
		menu_process ();
     f4a:	0e 94 fe 13 	call	0x27fc	; 0x27fc <menu_process>

		// display AVR ethernet status
		// temparature, AVR ip, server ip, countdown time
		standby_display ();
     f4e:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <standby_display>
     f52:	eb cf       	rjmp	.-42     	; 0xf2a <main+0x8a>

00000f54 <http_get_ip>:
// 10.1.1.1 (ascii), http_get_ip function convert ip address in ascii to binary and stored
// in BYTE *dest
//
//********************************************************************************************
unsigned char http_get_ip ( unsigned char *buf, BYTE *dest )
{
     f54:	dc 01       	movw	r26, r24
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	31 e0       	ldi	r19, 0x01	; 1
     f5a:	20 e0       	ldi	r18, 0x00	; 0

		if ( ch >= '0' && ch <= '9' )
		{
			ch = ch - '0';
			temp = (temp * digit) + ch;
			digit *= 10;
     f5c:	5a e0       	ldi	r21, 0x0A	; 10
	digit = 1;
	temp = 0;

	while ( 1 )
	{
		ch = *buf++;
     f5e:	9d 91       	ld	r25, X+

		if ( ch >= '0' && ch <= '9' )
     f60:	49 2f       	mov	r20, r25
     f62:	40 53       	subi	r20, 0x30	; 48
     f64:	4a 30       	cpi	r20, 0x0A	; 10
     f66:	40 f4       	brcc	.+16     	; 0xf78 <http_get_ip+0x24>
		{
			ch = ch - '0';
			temp = (temp * digit) + ch;
     f68:	23 9f       	mul	r18, r19
     f6a:	20 2d       	mov	r18, r0
     f6c:	11 24       	eor	r1, r1
     f6e:	24 0f       	add	r18, r20
			digit *= 10;
     f70:	35 9f       	mul	r19, r21
     f72:	30 2d       	mov	r19, r0
     f74:	11 24       	eor	r1, r1
     f76:	0d c0       	rjmp	.+26     	; 0xf92 <http_get_ip+0x3e>
		}
		else if ( ch == '.' || ch == '\0' )
     f78:	9e 32       	cpi	r25, 0x2E	; 46
     f7a:	21 f0       	breq	.+8      	; 0xf84 <http_get_ip+0x30>
     f7c:	99 23       	and	r25, r25
     f7e:	11 f0       	breq	.+4      	; 0xf84 <http_get_ip+0x30>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	08 95       	ret
		{
			dest[ i ] = temp;
     f84:	fb 01       	movw	r30, r22
     f86:	e8 0f       	add	r30, r24
     f88:	f1 1d       	adc	r31, r1
     f8a:	20 83       	st	Z, r18
			i++;
     f8c:	8f 5f       	subi	r24, 0xFF	; 255
     f8e:	31 e0       	ldi	r19, 0x01	; 1
     f90:	20 e0       	ldi	r18, 0x00	; 0
		}
		else
		{
			return 0;
		}
		if ( i == 4 )
     f92:	84 30       	cpi	r24, 0x04	; 4
     f94:	21 f7       	brne	.-56     	; 0xf5e <http_get_ip+0xa>
			return i;
	}
}
     f96:	08 95       	ret

00000f98 <hex2int>:
// Function : hex2int
// Description : convert a single hex digit character to its integer value
//
//********************************************************************************************
unsigned char hex2int(char c)
{
     f98:	98 2f       	mov	r25, r24
	if (c >= '0' && c <='9')
     f9a:	80 53       	subi	r24, 0x30	; 48
     f9c:	8a 30       	cpi	r24, 0x0A	; 10
     f9e:	68 f0       	brcs	.+26     	; 0xfba <hex2int+0x22>
		return((unsigned char)c - '0');

	if (c >= 'a' && c <='f')
     fa0:	81 53       	subi	r24, 0x31	; 49
     fa2:	86 30       	cpi	r24, 0x06	; 6
     fa4:	10 f4       	brcc	.+4      	; 0xfaa <hex2int+0x12>
		return((unsigned char)c - 'a' + 10);
     fa6:	86 5f       	subi	r24, 0xF6	; 246
     fa8:	08 95       	ret
	
	if (c >= 'A' && c <='F')
     faa:	89 2f       	mov	r24, r25
     fac:	81 54       	subi	r24, 0x41	; 65
     fae:	86 30       	cpi	r24, 0x06	; 6
     fb0:	10 f0       	brcs	.+4      	; 0xfb6 <hex2int+0x1e>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	08 95       	ret
		return((unsigned char)c - 'A' + 10);
     fb6:	89 2f       	mov	r24, r25
     fb8:	87 53       	subi	r24, 0x37	; 55

	return 0;
}
     fba:	08 95       	ret

00000fbc <urldecode>:
// Function : urldecode
// Description : decode a url string e.g "hello%20joe" or "hello+joe" becomes "hello joe"
//
//********************************************************************************************
void urldecode(unsigned char *urlbuf)
{
     fbc:	cf 92       	push	r12
     fbe:	df 92       	push	r13
     fc0:	ff 92       	push	r15
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	ec 01       	movw	r28, r24
     fcc:	6c 01       	movw	r12, r24
     fce:	1c c0       	rjmp	.+56     	; 0x1008 <urldecode+0x4c>
	unsigned char *dst;

	dst=urlbuf;
	while ((c = *urlbuf))
	{
		if (c == '+') c = ' ';
     fd0:	9b 32       	cpi	r25, 0x2B	; 43
     fd2:	11 f4       	brne	.+4      	; 0xfd8 <urldecode+0x1c>
     fd4:	90 e2       	ldi	r25, 0x20	; 32
     fd6:	14 c0       	rjmp	.+40     	; 0x1000 <urldecode+0x44>
		if (c == '%')
     fd8:	95 32       	cpi	r25, 0x25	; 37
     fda:	91 f4       	brne	.+36     	; 0x1000 <urldecode+0x44>
		{
			urlbuf++;
     fdc:	8e 01       	movw	r16, r28
     fde:	0f 5f       	subi	r16, 0xFF	; 255
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255
			c = *urlbuf;
			urlbuf++;
     fe2:	e8 01       	movw	r28, r16
     fe4:	21 96       	adiw	r28, 0x01	; 1
			c = (hex2int(c) << 4) | hex2int(*urlbuf);
     fe6:	f8 01       	movw	r30, r16
     fe8:	80 81       	ld	r24, Z
     fea:	0e 94 cc 07 	call	0xf98	; 0xf98 <hex2int>
     fee:	f8 2e       	mov	r15, r24
     ff0:	f8 01       	movw	r30, r16
     ff2:	81 81       	ldd	r24, Z+1	; 0x01
     ff4:	0e 94 cc 07 	call	0xf98	; 0xf98 <hex2int>
     ff8:	9f 2d       	mov	r25, r15
     ffa:	92 95       	swap	r25
     ffc:	90 7f       	andi	r25, 0xF0	; 240
     ffe:	98 2b       	or	r25, r24
		}
		*dst = c;
    1000:	f6 01       	movw	r30, r12
    1002:	91 93       	st	Z+, r25
    1004:	6f 01       	movw	r12, r30
		dst++;
		urlbuf++;
    1006:	21 96       	adiw	r28, 0x01	; 1
{
	unsigned char c;
	unsigned char *dst;

	dst=urlbuf;
	while ((c = *urlbuf))
    1008:	98 81       	ld	r25, Y
    100a:	99 23       	and	r25, r25
    100c:	09 f7       	brne	.-62     	; 0xfd0 <urldecode+0x14>
		}
		*dst = c;
		dst++;
		urlbuf++;
	}
	*dst = '\0';
    100e:	f6 01       	movw	r30, r12
    1010:	10 82       	st	Z, r1
}
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	df 90       	pop	r13
    101e:	cf 90       	pop	r12
    1020:	08 95       	ret

00001022 <http_status>:

	return dlength;
}

WORD http_status( BYTE *rxtx_buffer )
{
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	8c 01       	movw	r16, r24
	WORD dlen;
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n" ), 0 );
    1028:	68 ec       	ldi	r22, 0xC8	; 200
    102a:	74 e0       	ldi	r23, 0x04	; 4
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1034:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "{\"status\":\"OK\"}" ), dlen );
    1036:	c8 01       	movw	r24, r16
    1038:	68 eb       	ldi	r22, 0xB8	; 184
    103a:	74 e0       	ldi	r23, 0x04	; 4
    103c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
	return(dlen);
}
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	08 95       	ret

00001046 <http_home>:
// Function : http_home
// Description : prepare the webpage by writing the data to the tcp send buffer
//
//*****************************************************************************************
WORD http_home( BYTE *rxtx_buffer )
{
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	c0 54       	subi	r28, 0x40	; 64
    105c:	d0 40       	sbci	r29, 0x00	; 0
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	6c 01       	movw	r12, r24
	WORD dlen, adc0_value;
	BYTE temp_value;
	//	BYTE count_time_temp[3];
	BYTE generic_buf[64];

	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n" ), 0 );
    106a:	6b ed       	ldi	r22, 0xDB	; 219
    106c:	73 e0       	ldi	r23, 0x03	; 3
    106e:	40 e0       	ldi	r20, 0x00	; 0
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1076:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR  ( "<title>" ), dlen );
    1078:	c6 01       	movw	r24, r12
    107a:	63 ed       	ldi	r22, 0xD3	; 211
    107c:	73 e0       	ldi	r23, 0x03	; 3
    107e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1082:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, (PGM_P)web_title, dlen );
    1084:	c6 01       	movw	r24, r12
    1086:	6f e5       	ldi	r22, 0x5F	; 95
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    108e:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</title>" ), dlen );
    1090:	c6 01       	movw	r24, r12
    1092:	6a ec       	ldi	r22, 0xCA	; 202
    1094:	73 e0       	ldi	r23, 0x03	; 3
    1096:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    109a:	ac 01       	movw	r20, r24


	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "LED1: " ), dlen );
    109c:	c6 01       	movw	r24, r12
    109e:	63 ec       	ldi	r22, 0xC3	; 195
    10a0:	73 e0       	ldi	r23, 0x03	; 3
    10a2:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    10a6:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN1 )) )
    10a8:	af 9b       	sbis	0x15, 7	; 21
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <http_home+0x6e>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=green>ON" ), dlen );
    10ac:	c6 01       	movw	r24, r12
    10ae:	6e ea       	ldi	r22, 0xAE	; 174
    10b0:	73 e0       	ldi	r23, 0x03	; 3
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <http_home+0x74>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=red>OFF" ), dlen );
    10b4:	c6 01       	movw	r24, r12
    10b6:	6a e9       	ldi	r22, 0x9A	; 154
    10b8:	73 e0       	ldi	r23, 0x03	; 3
    10ba:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    10be:	ac 01       	movw	r20, r24
		
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</font> [ <a href=\"./?l1=" ), dlen );
    10c0:	c6 01       	movw	r24, r12
    10c2:	60 e8       	ldi	r22, 0x80	; 128
    10c4:	73 e0       	ldi	r23, 0x03	; 3
    10c6:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    10ca:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN1 )) )
    10cc:	af 9b       	sbis	0x15, 7	; 21
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <http_home+0x92>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\">OFF" ), dlen );
    10d0:	c6 01       	movw	r24, r12
    10d2:	69 e7       	ldi	r22, 0x79	; 121
    10d4:	73 e0       	ldi	r23, 0x03	; 3
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <http_home+0x98>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\">ON" ), dlen );
    10d8:	c6 01       	movw	r24, r12
    10da:	63 e7       	ldi	r22, 0x73	; 115
    10dc:	73 e0       	ldi	r23, 0x03	; 3
    10de:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    10e2:	ac 01       	movw	r20, r24


	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</a> ], LED2: " ), dlen );
    10e4:	c6 01       	movw	r24, r12
    10e6:	64 e6       	ldi	r22, 0x64	; 100
    10e8:	73 e0       	ldi	r23, 0x03	; 3
    10ea:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    10ee:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN2 )) )
    10f0:	ae 9b       	sbis	0x15, 6	; 21
    10f2:	04 c0       	rjmp	.+8      	; 0x10fc <http_home+0xb6>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=green>ON" ), dlen );
    10f4:	c6 01       	movw	r24, r12
    10f6:	6f e4       	ldi	r22, 0x4F	; 79
    10f8:	73 e0       	ldi	r23, 0x03	; 3
    10fa:	03 c0       	rjmp	.+6      	; 0x1102 <http_home+0xbc>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=red>OFF" ), dlen );
    10fc:	c6 01       	movw	r24, r12
    10fe:	6b e3       	ldi	r22, 0x3B	; 59
    1100:	73 e0       	ldi	r23, 0x03	; 3
    1102:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1106:	ac 01       	movw	r20, r24
		
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</font> [ <a href=\"./?l2=" ), dlen );
    1108:	c6 01       	movw	r24, r12
    110a:	61 e2       	ldi	r22, 0x21	; 33
    110c:	73 e0       	ldi	r23, 0x03	; 3
    110e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1112:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN2 )) )
    1114:	ae 9b       	sbis	0x15, 6	; 21
    1116:	04 c0       	rjmp	.+8      	; 0x1120 <http_home+0xda>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\">OFF" ), dlen );
    1118:	c6 01       	movw	r24, r12
    111a:	6a e1       	ldi	r22, 0x1A	; 26
    111c:	73 e0       	ldi	r23, 0x03	; 3
    111e:	03 c0       	rjmp	.+6      	; 0x1126 <http_home+0xe0>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\">ON" ), dlen );
    1120:	c6 01       	movw	r24, r12
    1122:	64 e1       	ldi	r22, 0x14	; 20
    1124:	73 e0       	ldi	r23, 0x03	; 3
    1126:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    112a:	ac 01       	movw	r20, r24
		


	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</a> ], LED3: " ), dlen );
    112c:	c6 01       	movw	r24, r12
    112e:	65 e0       	ldi	r22, 0x05	; 5
    1130:	73 e0       	ldi	r23, 0x03	; 3
    1132:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1136:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN3 )) )
    1138:	ad 9b       	sbis	0x15, 5	; 21
    113a:	04 c0       	rjmp	.+8      	; 0x1144 <http_home+0xfe>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=green>ON" ), dlen );
    113c:	c6 01       	movw	r24, r12
    113e:	60 ef       	ldi	r22, 0xF0	; 240
    1140:	72 e0       	ldi	r23, 0x02	; 2
    1142:	03 c0       	rjmp	.+6      	; 0x114a <http_home+0x104>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=red>OFF" ), dlen );
    1144:	c6 01       	movw	r24, r12
    1146:	6c ed       	ldi	r22, 0xDC	; 220
    1148:	72 e0       	ldi	r23, 0x02	; 2
    114a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    114e:	ac 01       	movw	r20, r24
		
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</font> [ <a href=\"./?l3=" ), dlen );
    1150:	c6 01       	movw	r24, r12
    1152:	62 ec       	ldi	r22, 0xC2	; 194
    1154:	72 e0       	ldi	r23, 0x02	; 2
    1156:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    115a:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN3 )) )
    115c:	ad 9b       	sbis	0x15, 5	; 21
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <http_home+0x122>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\">OFF" ), dlen );
    1160:	c6 01       	movw	r24, r12
    1162:	6b eb       	ldi	r22, 0xBB	; 187
    1164:	72 e0       	ldi	r23, 0x02	; 2
    1166:	03 c0       	rjmp	.+6      	; 0x116e <http_home+0x128>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\">ON" ), dlen );
    1168:	c6 01       	movw	r24, r12
    116a:	65 eb       	ldi	r22, 0xB5	; 181
    116c:	72 e0       	ldi	r23, 0x02	; 2
    116e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1172:	ac 01       	movw	r20, r24
		


	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</a> ], LED4: " ), dlen );
    1174:	c6 01       	movw	r24, r12
    1176:	66 ea       	ldi	r22, 0xA6	; 166
    1178:	72 e0       	ldi	r23, 0x02	; 2
    117a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    117e:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN4 )) )
    1180:	ac 9b       	sbis	0x15, 4	; 21
    1182:	04 c0       	rjmp	.+8      	; 0x118c <http_home+0x146>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=green>ON" ), dlen );
    1184:	c6 01       	movw	r24, r12
    1186:	61 e9       	ldi	r22, 0x91	; 145
    1188:	72 e0       	ldi	r23, 0x02	; 2
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <http_home+0x14c>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=red>OFF" ), dlen );
    118c:	c6 01       	movw	r24, r12
    118e:	6d e7       	ldi	r22, 0x7D	; 125
    1190:	72 e0       	ldi	r23, 0x02	; 2
    1192:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1196:	ac 01       	movw	r20, r24
		
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</font> [ <a href=\"./?l4=" ), dlen );
    1198:	c6 01       	movw	r24, r12
    119a:	63 e6       	ldi	r22, 0x63	; 99
    119c:	72 e0       	ldi	r23, 0x02	; 2
    119e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    11a2:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN4 )) )
    11a4:	ac 9b       	sbis	0x15, 4	; 21
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <http_home+0x16a>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\">OFF" ), dlen );
    11a8:	c6 01       	movw	r24, r12
    11aa:	6c e5       	ldi	r22, 0x5C	; 92
    11ac:	72 e0       	ldi	r23, 0x02	; 2
    11ae:	03 c0       	rjmp	.+6      	; 0x11b6 <http_home+0x170>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\">ON" ), dlen );
    11b0:	c6 01       	movw	r24, r12
    11b2:	66 e5       	ldi	r22, 0x56	; 86
    11b4:	72 e0       	ldi	r23, 0x02	; 2
    11b6:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    11ba:	ac 01       	movw	r20, r24
		


	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</a> ], LED5: " ), dlen );
    11bc:	c6 01       	movw	r24, r12
    11be:	67 e4       	ldi	r22, 0x47	; 71
    11c0:	72 e0       	ldi	r23, 0x02	; 2
    11c2:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    11c6:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN5 )) )
    11c8:	ab 9b       	sbis	0x15, 3	; 21
    11ca:	04 c0       	rjmp	.+8      	; 0x11d4 <http_home+0x18e>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=green>ON" ), dlen );
    11cc:	c6 01       	movw	r24, r12
    11ce:	62 e3       	ldi	r22, 0x32	; 50
    11d0:	72 e0       	ldi	r23, 0x02	; 2
    11d2:	03 c0       	rjmp	.+6      	; 0x11da <http_home+0x194>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=red>OFF" ), dlen );
    11d4:	c6 01       	movw	r24, r12
    11d6:	6e e1       	ldi	r22, 0x1E	; 30
    11d8:	72 e0       	ldi	r23, 0x02	; 2
    11da:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    11de:	ac 01       	movw	r20, r24
		
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</font> [ <a href=\"./?l5=" ), dlen );
    11e0:	c6 01       	movw	r24, r12
    11e2:	64 e0       	ldi	r22, 0x04	; 4
    11e4:	72 e0       	ldi	r23, 0x02	; 2
    11e6:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    11ea:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN5 )) )
    11ec:	ab 9b       	sbis	0x15, 3	; 21
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <http_home+0x1b2>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\">OFF" ), dlen );
    11f0:	c6 01       	movw	r24, r12
    11f2:	6d ef       	ldi	r22, 0xFD	; 253
    11f4:	71 e0       	ldi	r23, 0x01	; 1
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <http_home+0x1b8>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\">ON" ), dlen );
    11f8:	c6 01       	movw	r24, r12
    11fa:	67 ef       	ldi	r22, 0xF7	; 247
    11fc:	71 e0       	ldi	r23, 0x01	; 1
    11fe:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1202:	ac 01       	movw	r20, r24
		


	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</a> ], LED6: " ), dlen );
    1204:	c6 01       	movw	r24, r12
    1206:	68 ee       	ldi	r22, 0xE8	; 232
    1208:	71 e0       	ldi	r23, 0x01	; 1
    120a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    120e:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN6 )) )
    1210:	aa 9b       	sbis	0x15, 2	; 21
    1212:	04 c0       	rjmp	.+8      	; 0x121c <http_home+0x1d6>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=green>ON" ), dlen );
    1214:	c6 01       	movw	r24, r12
    1216:	63 ed       	ldi	r22, 0xD3	; 211
    1218:	71 e0       	ldi	r23, 0x01	; 1
    121a:	03 c0       	rjmp	.+6      	; 0x1222 <http_home+0x1dc>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=red>OFF" ), dlen );
    121c:	c6 01       	movw	r24, r12
    121e:	6f eb       	ldi	r22, 0xBF	; 191
    1220:	71 e0       	ldi	r23, 0x01	; 1
    1222:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1226:	ac 01       	movw	r20, r24
		
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</font> [ <a href=\"./?l6=" ), dlen );
    1228:	c6 01       	movw	r24, r12
    122a:	65 ea       	ldi	r22, 0xA5	; 165
    122c:	71 e0       	ldi	r23, 0x01	; 1
    122e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1232:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN6 )) )
    1234:	aa 9b       	sbis	0x15, 2	; 21
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <http_home+0x1fa>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\">OFF" ), dlen );
    1238:	c6 01       	movw	r24, r12
    123a:	6e e9       	ldi	r22, 0x9E	; 158
    123c:	71 e0       	ldi	r23, 0x01	; 1
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <http_home+0x200>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\">ON" ), dlen );
    1240:	c6 01       	movw	r24, r12
    1242:	68 e9       	ldi	r22, 0x98	; 152
    1244:	71 e0       	ldi	r23, 0x01	; 1
    1246:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    124a:	ac 01       	movw	r20, r24
		



	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</a> ]<br><br>" ), dlen );
    124c:	c6 01       	movw	r24, r12
    124e:	69 e8       	ldi	r22, 0x89	; 137
    1250:	71 e0       	ldi	r23, 0x01	; 1
    1252:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1256:	ac 01       	movw	r20, r24
	// read adc0
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "ACD0 = " ), dlen );
    1258:	c6 01       	movw	r24, r12
    125a:	61 e8       	ldi	r22, 0x81	; 129
    125c:	71 e0       	ldi	r23, 0x01	; 1
    125e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1262:	7c 01       	movw	r14, r24
	adc0_value = adc_read ( 0 );
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	0e 94 77 16 	call	0x2cee	; 0x2cee <adc_read>
    126a:	ac 01       	movw	r20, r24
	print_decimal ( generic_buf, 4, adc0_value );
    126c:	8e 01       	movw	r16, r28
    126e:	0f 5f       	subi	r16, 0xFF	; 255
    1270:	1f 4f       	sbci	r17, 0xFF	; 255
    1272:	c8 01       	movw	r24, r16
    1274:	64 e0       	ldi	r22, 0x04	; 4
    1276:	0e 94 ca 10 	call	0x2194	; 0x2194 <print_decimal>
	generic_buf[ 4 ] = '\0';
    127a:	1d 82       	std	Y+5, r1	; 0x05
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    127c:	c6 01       	movw	r24, r12
    127e:	b8 01       	movw	r22, r16
    1280:	a7 01       	movw	r20, r14
    1282:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <tcp_puts_data>
    1286:	ac 01       	movw	r20, r24
	
	// read temp
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "  Temparature = " ), dlen );
    1288:	c6 01       	movw	r24, r12
    128a:	60 e7       	ldi	r22, 0x70	; 112
    128c:	71 e0       	ldi	r23, 0x01	; 1
    128e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1292:	7c 01       	movw	r14, r24
	temp_value = adc_read_temp();
    1294:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <adc_read_temp>
    1298:	48 2f       	mov	r20, r24
	print_decimal ( generic_buf, 2, temp_value );
    129a:	c8 01       	movw	r24, r16
    129c:	62 e0       	ldi	r22, 0x02	; 2
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	0e 94 ca 10 	call	0x2194	; 0x2194 <print_decimal>
	generic_buf[ 2 ] = '\0';
    12a4:	1b 82       	std	Y+3, r1	; 0x03
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    12a6:	c6 01       	movw	r24, r12
    12a8:	b8 01       	movw	r22, r16
    12aa:	a7 01       	movw	r20, r14
    12ac:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <tcp_puts_data>
    12b0:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "&deg;C<br>" ), dlen );
    12b2:	c6 01       	movw	r24, r12
    12b4:	65 e6       	ldi	r22, 0x65	; 101
    12b6:	71 e0       	ldi	r23, 0x01	; 1
    12b8:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    12bc:	ac 01       	movw	r20, r24
	print_ip ( generic_buf, (BYTE*)&server_ip, 0 );
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "\"> <input type=\"submit\" value=\"Server IP\"></form>" ), dlen );
	*/
	// Write LCD form
	dlen = tcp_puts_data_p ( rxtx_buffer, (PGM_P) tag_form, dlen );
    12be:	c6 01       	movw	r24, r12
    12c0:	6f e9       	ldi	r22, 0x9F	; 159
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    12c8:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<input name=\"lcd1\" type=\"text\" size=\"16\" maxlength=\"16\"><br>" ), dlen );
    12ca:	c6 01       	movw	r24, r12
    12cc:	68 e2       	ldi	r22, 0x28	; 40
    12ce:	71 e0       	ldi	r23, 0x01	; 1
    12d0:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    12d4:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<input name=\"lcd2\" type=\"text\" size=\"16\" maxlength=\"16\">" ), dlen );
    12d6:	c6 01       	movw	r24, r12
    12d8:	6f ee       	ldi	r22, 0xEF	; 239
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    12e0:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<input type=\"submit\" value=\"Write LCD\"></form>" ), dlen );
    12e2:	c6 01       	movw	r24, r12
    12e4:	60 ec       	ldi	r22, 0xC0	; 192
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
	

	return(dlen);
}
    12ec:	c0 5c       	subi	r28, 0xC0	; 192
    12ee:	df 4f       	sbci	r29, 0xFF	; 255
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	ff 90       	pop	r15
    1304:	ef 90       	pop	r14
    1306:	df 90       	pop	r13
    1308:	cf 90       	pop	r12
    130a:	08 95       	ret

0000130c <http_put_request>:
// Description : put http request to tx buffer contain 2-variables pwd and temp.
// webserver receive pwd, temp and save to text file by PHP script on webserver.
//
//*****************************************************************************************
WORD http_put_request ( BYTE *rxtx_buffer )
{
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	c0 54       	subi	r28, 0x40	; 64
    131e:	d0 40       	sbci	r29, 0x00	; 0
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	8c 01       	movw	r16, r24
	BYTE temp_value;
	WORD dlength;
	BYTE generic_buf[64];
	
	temp_value = adc_read_temp();
    132c:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <adc_read_temp>
    1330:	48 2f       	mov	r20, r24
	print_decimal ( generic_buf, 2, temp_value );
    1332:	7e 01       	movw	r14, r28
    1334:	08 94       	sec
    1336:	e1 1c       	adc	r14, r1
    1338:	f1 1c       	adc	r15, r1
    133a:	c7 01       	movw	r24, r14
    133c:	62 e0       	ldi	r22, 0x02	; 2
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	0e 94 ca 10 	call	0x2194	; 0x2194 <print_decimal>
	generic_buf[ 2 ] = '\0';
    1344:	1b 82       	std	Y+3, r1	; 0x03

	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "GET /avrnet/save.php?pwd=secret&temp=" ), 0 );
    1346:	c8 01       	movw	r24, r16
    1348:	60 e7       	ldi	r22, 0x70	; 112
    134a:	75 e0       	ldi	r23, 0x05	; 5
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1354:	ac 01       	movw	r20, r24
	dlength = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength );
    1356:	c8 01       	movw	r24, r16
    1358:	b7 01       	movw	r22, r14
    135a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <tcp_puts_data>
    135e:	ac 01       	movw	r20, r24
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( " HTTP/1.0\r\n" ), dlength );
    1360:	c8 01       	movw	r24, r16
    1362:	64 e6       	ldi	r22, 0x64	; 100
    1364:	75 e0       	ldi	r23, 0x05	; 5
    1366:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    136a:	ac 01       	movw	r20, r24
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "Host: 192.168.1.30\r\n" ), dlength );
    136c:	c8 01       	movw	r24, r16
    136e:	6f e4       	ldi	r22, 0x4F	; 79
    1370:	75 e0       	ldi	r23, 0x05	; 5
    1372:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1376:	ac 01       	movw	r20, r24
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "User-Agent: Smart home\r\n" ), dlength );
    1378:	c8 01       	movw	r24, r16
    137a:	66 e3       	ldi	r22, 0x36	; 54
    137c:	75 e0       	ldi	r23, 0x05	; 5
    137e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1382:	ac 01       	movw	r20, r24
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "Accept: text/html\r\n" ), dlength );
    1384:	c8 01       	movw	r24, r16
    1386:	62 e2       	ldi	r22, 0x22	; 34
    1388:	75 e0       	ldi	r23, 0x05	; 5
    138a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    138e:	ac 01       	movw	r20, r24
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "Keep-Alive: 300\r\n" ), dlength );
    1390:	c8 01       	movw	r24, r16
    1392:	60 e1       	ldi	r22, 0x10	; 16
    1394:	75 e0       	ldi	r23, 0x05	; 5
    1396:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    139a:	ac 01       	movw	r20, r24
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "Connection: keep-alive\r\n\r\n" ), dlength );
    139c:	c8 01       	movw	r24, r16
    139e:	65 ef       	ldi	r22, 0xF5	; 245
    13a0:	74 e0       	ldi	r23, 0x04	; 4
    13a2:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>

	return dlength;
}
    13a6:	c0 5c       	subi	r28, 0xC0	; 192
    13a8:	df 4f       	sbci	r29, 0xFF	; 255
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	ff 90       	pop	r15
    13be:	ef 90       	pop	r14
    13c0:	08 95       	ret

000013c2 <http_api>:
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "{\"status\":\"OK\"}" ), dlen );
	return(dlen);
}

WORD http_api( BYTE *rxtx_buffer )
{
    13c2:	cf 92       	push	r12
    13c4:	df 92       	push	r13
    13c6:	ef 92       	push	r14
    13c8:	ff 92       	push	r15
    13ca:	0f 93       	push	r16
    13cc:	1f 93       	push	r17
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	c0 54       	subi	r28, 0x40	; 64
    13d8:	d0 40       	sbci	r29, 0x00	; 0
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	6c 01       	movw	r12, r24
	WORD dlen, adc0_value;
	BYTE temp_value;
	BYTE generic_buf[64];

	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n" ), 0 );
    13e6:	6b e8       	ldi	r22, 0x8B	; 139
    13e8:	74 e0       	ldi	r23, 0x04	; 4
    13ea:	40 e0       	ldi	r20, 0x00	; 0
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    13f2:	ac 01       	movw	r20, r24
	

	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "{\"l1\":\"" ), dlen );
    13f4:	c6 01       	movw	r24, r12
    13f6:	63 e8       	ldi	r22, 0x83	; 131
    13f8:	74 e0       	ldi	r23, 0x04	; 4
    13fa:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    13fe:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN1 )) )
    1400:	af 9b       	sbis	0x15, 7	; 21
    1402:	04 c0       	rjmp	.+8      	; 0x140c <http_api+0x4a>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\"" ), dlen );
    1404:	c6 01       	movw	r24, r12
    1406:	60 e8       	ldi	r22, 0x80	; 128
    1408:	74 e0       	ldi	r23, 0x04	; 4
    140a:	03 c0       	rjmp	.+6      	; 0x1412 <http_api+0x50>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\"" ), dlen );
    140c:	c6 01       	movw	r24, r12
    140e:	6d e7       	ldi	r22, 0x7D	; 125
    1410:	74 e0       	ldi	r23, 0x04	; 4
    1412:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1416:	ac 01       	movw	r20, r24
		
	
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"l2\":\"" ), dlen );
    1418:	c6 01       	movw	r24, r12
    141a:	65 e7       	ldi	r22, 0x75	; 117
    141c:	74 e0       	ldi	r23, 0x04	; 4
    141e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1422:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN2 )) )
    1424:	ae 9b       	sbis	0x15, 6	; 21
    1426:	04 c0       	rjmp	.+8      	; 0x1430 <http_api+0x6e>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\"" ), dlen );
    1428:	c6 01       	movw	r24, r12
    142a:	62 e7       	ldi	r22, 0x72	; 114
    142c:	74 e0       	ldi	r23, 0x04	; 4
    142e:	03 c0       	rjmp	.+6      	; 0x1436 <http_api+0x74>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\"" ), dlen );
    1430:	c6 01       	movw	r24, r12
    1432:	6f e6       	ldi	r22, 0x6F	; 111
    1434:	74 e0       	ldi	r23, 0x04	; 4
    1436:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    143a:	ac 01       	movw	r20, r24
	

	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"l3\":\"" ), dlen );
    143c:	c6 01       	movw	r24, r12
    143e:	67 e6       	ldi	r22, 0x67	; 103
    1440:	74 e0       	ldi	r23, 0x04	; 4
    1442:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1446:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN3 )) )
    1448:	ad 9b       	sbis	0x15, 5	; 21
    144a:	04 c0       	rjmp	.+8      	; 0x1454 <http_api+0x92>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\"" ), dlen );
    144c:	c6 01       	movw	r24, r12
    144e:	64 e6       	ldi	r22, 0x64	; 100
    1450:	74 e0       	ldi	r23, 0x04	; 4
    1452:	03 c0       	rjmp	.+6      	; 0x145a <http_api+0x98>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\"" ), dlen );
    1454:	c6 01       	movw	r24, r12
    1456:	61 e6       	ldi	r22, 0x61	; 97
    1458:	74 e0       	ldi	r23, 0x04	; 4
    145a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    145e:	ac 01       	movw	r20, r24
	
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"l4\":\"" ), dlen );
    1460:	c6 01       	movw	r24, r12
    1462:	69 e5       	ldi	r22, 0x59	; 89
    1464:	74 e0       	ldi	r23, 0x04	; 4
    1466:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    146a:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN4 )) )
    146c:	ac 9b       	sbis	0x15, 4	; 21
    146e:	04 c0       	rjmp	.+8      	; 0x1478 <http_api+0xb6>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\"" ), dlen );
    1470:	c6 01       	movw	r24, r12
    1472:	66 e5       	ldi	r22, 0x56	; 86
    1474:	74 e0       	ldi	r23, 0x04	; 4
    1476:	03 c0       	rjmp	.+6      	; 0x147e <http_api+0xbc>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\"" ), dlen );
    1478:	c6 01       	movw	r24, r12
    147a:	63 e5       	ldi	r22, 0x53	; 83
    147c:	74 e0       	ldi	r23, 0x04	; 4
    147e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1482:	ac 01       	movw	r20, r24
	
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"l5\":\"" ), dlen );
    1484:	c6 01       	movw	r24, r12
    1486:	6b e4       	ldi	r22, 0x4B	; 75
    1488:	74 e0       	ldi	r23, 0x04	; 4
    148a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    148e:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN5 )) )
    1490:	ab 9b       	sbis	0x15, 3	; 21
    1492:	04 c0       	rjmp	.+8      	; 0x149c <http_api+0xda>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\"" ), dlen );
    1494:	c6 01       	movw	r24, r12
    1496:	68 e4       	ldi	r22, 0x48	; 72
    1498:	74 e0       	ldi	r23, 0x04	; 4
    149a:	03 c0       	rjmp	.+6      	; 0x14a2 <http_api+0xe0>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\"" ), dlen );
    149c:	c6 01       	movw	r24, r12
    149e:	65 e4       	ldi	r22, 0x45	; 69
    14a0:	74 e0       	ldi	r23, 0x04	; 4
    14a2:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    14a6:	ac 01       	movw	r20, r24


	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"l6\":\"" ), dlen );
    14a8:	c6 01       	movw	r24, r12
    14aa:	6d e3       	ldi	r22, 0x3D	; 61
    14ac:	74 e0       	ldi	r23, 0x04	; 4
    14ae:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    14b2:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN6 )) )
    14b4:	aa 9b       	sbis	0x15, 2	; 21
    14b6:	04 c0       	rjmp	.+8      	; 0x14c0 <http_api+0xfe>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\"" ), dlen );
    14b8:	c6 01       	movw	r24, r12
    14ba:	6a e3       	ldi	r22, 0x3A	; 58
    14bc:	74 e0       	ldi	r23, 0x04	; 4
    14be:	03 c0       	rjmp	.+6      	; 0x14c6 <http_api+0x104>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\"" ), dlen );
    14c0:	c6 01       	movw	r24, r12
    14c2:	67 e3       	ldi	r22, 0x37	; 55
    14c4:	74 e0       	ldi	r23, 0x04	; 4
    14c6:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    14ca:	ac 01       	movw	r20, r24

	
	// read adc0
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"ACD0\":\"" ), dlen );
    14cc:	c6 01       	movw	r24, r12
    14ce:	6d e2       	ldi	r22, 0x2D	; 45
    14d0:	74 e0       	ldi	r23, 0x04	; 4
    14d2:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    14d6:	7c 01       	movw	r14, r24
	adc0_value = adc_read ( 0 );
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	0e 94 77 16 	call	0x2cee	; 0x2cee <adc_read>
    14de:	ac 01       	movw	r20, r24
	print_decimal ( generic_buf, 4, adc0_value );
    14e0:	8e 01       	movw	r16, r28
    14e2:	0f 5f       	subi	r16, 0xFF	; 255
    14e4:	1f 4f       	sbci	r17, 0xFF	; 255
    14e6:	c8 01       	movw	r24, r16
    14e8:	64 e0       	ldi	r22, 0x04	; 4
    14ea:	0e 94 ca 10 	call	0x2194	; 0x2194 <print_decimal>
	generic_buf[ 4 ] = '\0';
    14ee:	1d 82       	std	Y+5, r1	; 0x05
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    14f0:	c6 01       	movw	r24, r12
    14f2:	b8 01       	movw	r22, r16
    14f4:	a7 01       	movw	r20, r14
    14f6:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <tcp_puts_data>
    14fa:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "\"" ), dlen );
    14fc:	c6 01       	movw	r24, r12
    14fe:	6b e2       	ldi	r22, 0x2B	; 43
    1500:	74 e0       	ldi	r23, 0x04	; 4
    1502:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1506:	ac 01       	movw	r20, r24

	// read temp
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"temp\":\"" ), dlen );
    1508:	c6 01       	movw	r24, r12
    150a:	61 e2       	ldi	r22, 0x21	; 33
    150c:	74 e0       	ldi	r23, 0x04	; 4
    150e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1512:	7c 01       	movw	r14, r24
	temp_value = adc_read_temp();
    1514:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <adc_read_temp>
    1518:	48 2f       	mov	r20, r24
	print_decimal ( generic_buf, 2, temp_value );
    151a:	c8 01       	movw	r24, r16
    151c:	62 e0       	ldi	r22, 0x02	; 2
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	0e 94 ca 10 	call	0x2194	; 0x2194 <print_decimal>
	generic_buf[ 2 ] = '\0';
    1524:	1b 82       	std	Y+3, r1	; 0x03
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    1526:	c6 01       	movw	r24, r12
    1528:	b8 01       	movw	r22, r16
    152a:	a7 01       	movw	r20, r14
    152c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <tcp_puts_data>
    1530:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "\"" ), dlen );
    1532:	c6 01       	movw	r24, r12
    1534:	6f e1       	ldi	r22, 0x1F	; 31
    1536:	74 e0       	ldi	r23, 0x04	; 4
    1538:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    153c:	ac 01       	movw	r20, r24
	
	// AVR IP address
	
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"aip\":\"" ), dlen );
    153e:	c6 01       	movw	r24, r12
    1540:	66 e1       	ldi	r22, 0x16	; 22
    1542:	74 e0       	ldi	r23, 0x04	; 4
    1544:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1548:	7c 01       	movw	r14, r24
	print_ip ( generic_buf, (BYTE*)&avr_ip, 0 );
    154a:	c8 01       	movw	r24, r16
    154c:	62 e3       	ldi	r22, 0x32	; 50
    154e:	71 e0       	ldi	r23, 0x01	; 1
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	0e 94 08 11 	call	0x2210	; 0x2210 <print_ip>
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    1556:	c6 01       	movw	r24, r12
    1558:	b8 01       	movw	r22, r16
    155a:	a7 01       	movw	r20, r14
    155c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <tcp_puts_data>
    1560:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "\"" ), dlen );
    1562:	c6 01       	movw	r24, r12
    1564:	64 e1       	ldi	r22, 0x14	; 20
    1566:	74 e0       	ldi	r23, 0x04	; 4
    1568:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    156c:	ac 01       	movw	r20, r24
	
	// Server IP address
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"sip\":\"" ), dlen );
    156e:	c6 01       	movw	r24, r12
    1570:	6b e0       	ldi	r22, 0x0B	; 11
    1572:	74 e0       	ldi	r23, 0x04	; 4
    1574:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
    1578:	7c 01       	movw	r14, r24
	print_ip ( generic_buf, (BYTE*)&server_ip, 0 );
    157a:	c8 01       	movw	r24, r16
    157c:	6e e2       	ldi	r22, 0x2E	; 46
    157e:	71 e0       	ldi	r23, 0x01	; 1
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	0e 94 08 11 	call	0x2210	; 0x2210 <print_ip>
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    1586:	c6 01       	movw	r24, r12
    1588:	b8 01       	movw	r22, r16
    158a:	a7 01       	movw	r20, r14
    158c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <tcp_puts_data>
    1590:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "\"}" ), dlen );
    1592:	c6 01       	movw	r24, r12
    1594:	68 e0       	ldi	r22, 0x08	; 8
    1596:	74 e0       	ldi	r23, 0x04	; 4
    1598:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <tcp_puts_data_p>
	
	

	return(dlen);
}
    159c:	c0 5c       	subi	r28, 0xC0	; 192
    159e:	df 4f       	sbci	r29, 0xFF	; 255
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	ff 90       	pop	r15
    15b4:	ef 90       	pop	r14
    15b6:	df 90       	pop	r13
    15b8:	cf 90       	pop	r12
    15ba:	08 95       	ret

000015bc <http_get_variable>:
//		when you call http_get_variable with val_key="pwd", then function stored "123456"
//		to dest buffer.
//
//********************************************************************************************
BYTE http_get_variable ( BYTE *rxtx_buffer, WORD dlength, PGM_P val_key, BYTE *dest )
{
    15bc:	cf 92       	push	r12
    15be:	df 92       	push	r13
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	ec 01       	movw	r28, r24
    15ce:	8b 01       	movw	r16, r22
    15d0:	6a 01       	movw	r12, r20
    15d2:	79 01       	movw	r14, r18
	BYTE match=0, temp;

	key = val_key;
	
	// get data position
	data_p = tcp_get_hlength( rxtx_buffer ) + sizeof(ETH_HEADER) + sizeof(IP_HEADER);
    15d4:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <tcp_get_hlength>
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	2e 5d       	subi	r18, 0xDE	; 222
    15de:	3f 4f       	sbci	r19, 0xFF	; 255
    15e0:	fe 01       	movw	r30, r28
    15e2:	e2 0f       	add	r30, r18
    15e4:	f3 1f       	adc	r31, r19
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <http_get_variable+0x36>

	// Find '?' in rx buffer, if found '?' in rx buffer then let's find variable key (val_key)
	for ( ; data_p<dlength; data_p++ )
	{
		if ( rxtx_buffer [ data_p ] == '?' )
    15e8:	81 91       	ld	r24, Z+
    15ea:	8f 33       	cpi	r24, 0x3F	; 63
    15ec:	29 f0       	breq	.+10     	; 0x15f8 <http_get_variable+0x3c>
	
	// get data position
	data_p = tcp_get_hlength( rxtx_buffer ) + sizeof(ETH_HEADER) + sizeof(IP_HEADER);

	// Find '?' in rx buffer, if found '?' in rx buffer then let's find variable key (val_key)
	for ( ; data_p<dlength; data_p++ )
    15ee:	2f 5f       	subi	r18, 0xFF	; 255
    15f0:	3f 4f       	sbci	r19, 0xFF	; 255
    15f2:	20 17       	cp	r18, r16
    15f4:	31 07       	cpc	r19, r17
    15f6:	c0 f3       	brcs	.-16     	; 0x15e8 <http_get_variable+0x2c>
	{
		if ( rxtx_buffer [ data_p ] == '?' )
			break;
	}
	// not found '?' in buffer
	if ( data_p == dlength )
    15f8:	20 17       	cp	r18, r16
    15fa:	31 07       	cpc	r19, r17
    15fc:	a9 f1       	breq	.+106    	; 0x1668 <http_get_variable+0xac>
    15fe:	de 01       	movw	r26, r28
    1600:	a2 0f       	add	r26, r18
    1602:	b3 1f       	adc	r27, r19
    1604:	f6 01       	movw	r30, r12
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	15 c0       	rjmp	.+42     	; 0x1634 <http_get_variable+0x78>
		return 0;
	
	// find variable key in buffer 
	for ( ; data_p<dlength; data_p++ )
	{
		temp = pgm_read_byte ( key );
    160a:	44 91       	lpm	r20, Z+

		// end of variable keyword
		if ( rxtx_buffer [ data_p ] == '=' && match != 0 )
    160c:	9c 91       	ld	r25, X
    160e:	9d 33       	cpi	r25, 0x3D	; 61
    1610:	39 f4       	brne	.+14     	; 0x1620 <http_get_variable+0x64>
    1612:	88 23       	and	r24, r24
    1614:	29 f0       	breq	.+10     	; 0x1620 <http_get_variable+0x64>
		{
			if ( temp == '\0' )
    1616:	44 23       	and	r20, r20
    1618:	19 f4       	brne	.+6      	; 0x1620 <http_get_variable+0x64>
			{
				data_p++;
    161a:	2f 5f       	subi	r18, 0xFF	; 255
    161c:	3f 4f       	sbci	r19, 0xFF	; 255
    161e:	0f c0       	rjmp	.+30     	; 0x163e <http_get_variable+0x82>
				break;
			}
		}
		// variable keyword match with rx buffer
		if ( rxtx_buffer [ data_p ] == temp )
    1620:	94 17       	cp	r25, r20
    1622:	19 f0       	breq	.+6      	; 0x162a <http_get_variable+0x6e>
    1624:	f6 01       	movw	r30, r12
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	02 c0       	rjmp	.+4      	; 0x162e <http_get_variable+0x72>
		{
			key++;
    162a:	31 96       	adiw	r30, 0x01	; 1
			match++;
    162c:	8f 5f       	subi	r24, 0xFF	; 255
	// not found '?' in buffer
	if ( data_p == dlength )
		return 0;
	
	// find variable key in buffer 
	for ( ; data_p<dlength; data_p++ )
    162e:	2f 5f       	subi	r18, 0xFF	; 255
    1630:	3f 4f       	sbci	r19, 0xFF	; 255
    1632:	11 96       	adiw	r26, 0x01	; 1
    1634:	20 17       	cp	r18, r16
    1636:	31 07       	cpc	r19, r17
    1638:	40 f3       	brcs	.-48     	; 0x160a <http_get_variable+0x4e>
			match = 0;
		}
	}
	
	// if found variable keyword, then store variable value in destination buffer ( dest )
	if ( match != 0 )
    163a:	88 23       	and	r24, r24
    163c:	b1 f0       	breq	.+44     	; 0x166a <http_get_variable+0xae>
    163e:	de 01       	movw	r26, r28
    1640:	a2 0f       	add	r26, r18
    1642:	b3 1f       	adc	r27, r19
    1644:	80 e0       	ldi	r24, 0x00	; 0
		match = 0;

		for ( ;; )
		{
			// end of variable value break from loop
			if ( rxtx_buffer [ data_p ] == '&' || rxtx_buffer [ data_p ] == ' ' )
    1646:	9c 91       	ld	r25, X
    1648:	96 32       	cpi	r25, 0x26	; 38
    164a:	19 f0       	breq	.+6      	; 0x1652 <http_get_variable+0x96>
    164c:	11 96       	adiw	r26, 0x01	; 1
    164e:	90 32       	cpi	r25, 0x20	; 32
    1650:	29 f4       	brne	.+10     	; 0x165c <http_get_variable+0xa0>
			{
				dest [ match ] = '\0';
    1652:	e8 0e       	add	r14, r24
    1654:	f1 1c       	adc	r15, r1
    1656:	f7 01       	movw	r30, r14
    1658:	10 82       	st	Z, r1
    165a:	07 c0       	rjmp	.+14     	; 0x166a <http_get_variable+0xae>
				break;
			}
			dest [ match ] = rxtx_buffer [ data_p ];
    165c:	f7 01       	movw	r30, r14
    165e:	e8 0f       	add	r30, r24
    1660:	f1 1d       	adc	r31, r1
    1662:	90 83       	st	Z, r25
			match++;
    1664:	8f 5f       	subi	r24, 0xFF	; 255
    1666:	ef cf       	rjmp	.-34     	; 0x1646 <http_get_variable+0x8a>
			data_p++;
		}
    1668:	80 e0       	ldi	r24, 0x00	; 0
	}

	// return with variable value length
	return match;
}
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	1f 91       	pop	r17
    1670:	0f 91       	pop	r16
    1672:	ff 90       	pop	r15
    1674:	ef 90       	pop	r14
    1676:	df 90       	pop	r13
    1678:	cf 90       	pop	r12
    167a:	08 95       	ret

0000167c <http_webserver_process>:
// Function : http_webserver_process
// Description : Initial connection to web server
//
//********************************************************************************************
void http_webserver_process ( BYTE *rxtx_buffer, BYTE *dest_mac, BYTE *dest_ip )
{
    167c:	2f 92       	push	r2
    167e:	3f 92       	push	r3
    1680:	4f 92       	push	r4
    1682:	5f 92       	push	r5
    1684:	6f 92       	push	r6
    1686:	7f 92       	push	r7
    1688:	8f 92       	push	r8
    168a:	9f 92       	push	r9
    168c:	af 92       	push	r10
    168e:	bf 92       	push	r11
    1690:	cf 92       	push	r12
    1692:	df 92       	push	r13
    1694:	ef 92       	push	r14
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	c7 54       	subi	r28, 0x47	; 71
    16a4:	d0 40       	sbci	r29, 0x00	; 0
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	3c 01       	movw	r6, r24
    16b2:	26 96       	adiw	r28, 0x06	; 6
    16b4:	7f af       	std	Y+63, r23	; 0x3f
    16b6:	6e af       	std	Y+62, r22	; 0x3e
    16b8:	26 97       	sbiw	r28, 0x06	; 6
    16ba:	28 96       	adiw	r28, 0x08	; 8
    16bc:	5f af       	std	Y+63, r21	; 0x3f
    16be:	4e af       	std	Y+62, r20	; 0x3e
    16c0:	28 97       	sbiw	r28, 0x08	; 8
	WORD dlength, dest_port;
	BYTE count_time_temp[3];
	BYTE generic_buf[64];
	
	dest_port = (rxtx_buffer[TCP_SRC_PORT_H_P]<<8)|rxtx_buffer[TCP_SRC_PORT_L_P];
    16c2:	fc 01       	movw	r30, r24
    16c4:	22 a1       	ldd	r18, Z+34	; 0x22
    16c6:	63 a1       	ldd	r22, Z+35	; 0x23
	// tcp port 80 start for web server
	if ( rxtx_buffer [ IP_PROTO_P ] == IP_PROTO_TCP_V && rxtx_buffer[ TCP_DST_PORT_H_P ] == 0 && rxtx_buffer[ TCP_DST_PORT_L_P ] == 80 )
    16c8:	87 89       	ldd	r24, Z+23	; 0x17
    16ca:	86 30       	cpi	r24, 0x06	; 6
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <http_webserver_process+0x54>
    16ce:	e6 c1       	rjmp	.+972    	; 0x1a9c <http_webserver_process+0x420>
    16d0:	84 a1       	ldd	r24, Z+36	; 0x24
    16d2:	88 23       	and	r24, r24
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <http_webserver_process+0x5c>
    16d6:	e2 c1       	rjmp	.+964    	; 0x1a9c <http_webserver_process+0x420>
    16d8:	85 a1       	ldd	r24, Z+37	; 0x25
    16da:	80 35       	cpi	r24, 0x50	; 80
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <http_webserver_process+0x64>
    16de:	de c1       	rjmp	.+956    	; 0x1a9c <http_webserver_process+0x420>
{
	WORD dlength, dest_port;
	BYTE count_time_temp[3];
	BYTE generic_buf[64];
	
	dest_port = (rxtx_buffer[TCP_SRC_PORT_H_P]<<8)|rxtx_buffer[TCP_SRC_PORT_L_P];
    16e0:	92 2f       	mov	r25, r18
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	26 2e       	mov	r2, r22
    16e6:	33 24       	eor	r3, r3
    16e8:	28 2a       	or	r2, r24
    16ea:	39 2a       	or	r3, r25
	// tcp port 80 start for web server
	if ( rxtx_buffer [ IP_PROTO_P ] == IP_PROTO_TCP_V && rxtx_buffer[ TCP_DST_PORT_H_P ] == 0 && rxtx_buffer[ TCP_DST_PORT_L_P ] == 80 )
	{
		// received packet with flags "SYN", let's send "SYNACK"
		if ( (rxtx_buffer[ TCP_FLAGS_P ] & TCP_FLAG_SYN_V) )
    16ec:	87 a5       	ldd	r24, Z+47	; 0x2f
    16ee:	81 ff       	sbrs	r24, 1
    16f0:	1b c0       	rjmp	.+54     	; 0x1728 <http_webserver_process+0xac>
		{
//			tcp_send_synack ( rxtx_buffer, dest_mac, dest_ip );
			tcp_send_packet (
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <http_webserver_process+0x78>
    16f4:	ed b7       	in	r30, 0x3d	; 61
    16f6:	fe b7       	in	r31, 0x3e	; 62
    16f8:	52 83       	std	Z+2, r21	; 0x02
    16fa:	41 83       	std	Z+1, r20	; 0x01
    16fc:	c3 01       	movw	r24, r6
    16fe:	b1 01       	movw	r22, r2
    1700:	40 e5       	ldi	r20, 0x50	; 80
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	22 e1       	ldi	r18, 0x12	; 18
    1706:	01 e0       	ldi	r16, 0x01	; 1
    1708:	ee 24       	eor	r14, r14
    170a:	f1 e0       	ldi	r31, 0x01	; 1
    170c:	cf 2e       	mov	r12, r31
    170e:	d1 2c       	mov	r13, r1
    1710:	aa 24       	eor	r10, r10
    1712:	bb 24       	eor	r11, r11
    1714:	26 96       	adiw	r28, 0x06	; 6
    1716:	8e ac       	ldd	r8, Y+62	; 0x3e
    1718:	9f ac       	ldd	r9, Y+63	; 0x3f
    171a:	26 97       	sbiw	r28, 0x06	; 6
    171c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <tcp_send_packet>
				0,						// (bool)clear sequence ack number
				1,						// (bool)calculate new seq and seqack number
				0,						// tcp data length
				dest_mac,		// server mac address
				dest_ip );		// server ip address
			flag1.bits.syn_is_received = 1;
    1720:	80 91 27 01 	lds	r24, 0x0127
    1724:	80 64       	ori	r24, 0x40	; 64
    1726:	b6 c1       	rjmp	.+876    	; 0x1a94 <http_webserver_process+0x418>
			return;
		}

		if ( (rxtx_buffer [ TCP_FLAGS_P ] & TCP_FLAG_ACK_V) )
    1728:	84 ff       	sbrs	r24, 4
    172a:	b8 c1       	rjmp	.+880    	; 0x1a9c <http_webserver_process+0x420>
		{
			// get tcp data length
			dlength = tcp_get_dlength( rxtx_buffer );
    172c:	c3 01       	movw	r24, r6
    172e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <tcp_get_dlength>
    1732:	2c 01       	movw	r4, r24
			if ( dlength == 0 )
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	01 f5       	brne	.+64     	; 0x1778 <http_webserver_process+0xfc>
			{
				// finack, answer with ack
				if ( (rxtx_buffer[TCP_FLAGS_P] & TCP_FLAG_FIN_V) )
    1738:	f3 01       	movw	r30, r6
    173a:	87 a5       	ldd	r24, Z+47	; 0x2f
    173c:	80 ff       	sbrs	r24, 0
    173e:	ae c1       	rjmp	.+860    	; 0x1a9c <http_webserver_process+0x420>
				{
//					tcp_send_ack ( rxtx_buffer, dest_mac, dest_ip );
					tcp_send_packet (
    1740:	00 d0       	rcall	.+0      	; 0x1742 <http_webserver_process+0xc6>
    1742:	28 96       	adiw	r28, 0x08	; 8
    1744:	8e ad       	ldd	r24, Y+62	; 0x3e
    1746:	9f ad       	ldd	r25, Y+63	; 0x3f
    1748:	28 97       	sbiw	r28, 0x08	; 8
    174a:	ed b7       	in	r30, 0x3d	; 61
    174c:	fe b7       	in	r31, 0x3e	; 62
    174e:	92 83       	std	Z+2, r25	; 0x02
    1750:	81 83       	std	Z+1, r24	; 0x01
    1752:	c3 01       	movw	r24, r6
    1754:	b1 01       	movw	r22, r2
    1756:	40 e5       	ldi	r20, 0x50	; 80
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	20 e1       	ldi	r18, 0x10	; 16
    175c:	00 e0       	ldi	r16, 0x00	; 0
    175e:	ee 24       	eor	r14, r14
    1760:	e1 e0       	ldi	r30, 0x01	; 1
    1762:	ce 2e       	mov	r12, r30
    1764:	d1 2c       	mov	r13, r1
    1766:	aa 24       	eor	r10, r10
    1768:	bb 24       	eor	r11, r11
    176a:	26 96       	adiw	r28, 0x06	; 6
    176c:	8e ac       	ldd	r8, Y+62	; 0x3e
    176e:	9f ac       	ldd	r9, Y+63	; 0x3f
    1770:	26 97       	sbiw	r28, 0x06	; 6
    1772:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <tcp_send_packet>
    1776:	90 c1       	rjmp	.+800    	; 0x1a98 <http_webserver_process+0x41c>
						dest_ip );		// server ip address
				}
				return;
			}
			// get avr ip address from request and set to new avr ip address
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "aip" ), generic_buf ) )
    1778:	8e 01       	movw	r16, r28
    177a:	0c 5f       	subi	r16, 0xFC	; 252
    177c:	1f 4f       	sbci	r17, 0xFF	; 255
    177e:	c3 01       	movw	r24, r6
    1780:	b2 01       	movw	r22, r4
    1782:	4b ec       	ldi	r20, 0xCB	; 203
    1784:	55 e0       	ldi	r21, 0x05	; 5
    1786:	98 01       	movw	r18, r16
    1788:	0e 94 de 0a 	call	0x15bc	; 0x15bc <http_get_variable>
    178c:	88 23       	and	r24, r24
    178e:	b9 f0       	breq	.+46     	; 0x17be <http_webserver_process+0x142>
			{
				if ( http_get_ip ( generic_buf, (BYTE*)&avr_ip ) == 4 )
    1790:	c8 01       	movw	r24, r16
    1792:	62 e3       	ldi	r22, 0x32	; 50
    1794:	71 e0       	ldi	r23, 0x01	; 1
    1796:	0e 94 aa 07 	call	0xf54	; 0xf54 <http_get_ip>
    179a:	84 30       	cpi	r24, 0x04	; 4
    179c:	41 f4       	brne	.+16     	; 0x17ae <http_webserver_process+0x132>
					eeprom_write_block ( &avr_ip, ee_avr_ip, 4 );
    179e:	82 e3       	ldi	r24, 0x32	; 50
    17a0:	91 e0       	ldi	r25, 0x01	; 1
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	44 e0       	ldi	r20, 0x04	; 4
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__eewr_block_m32>
				eeprom_read_block ( &avr_ip, ee_avr_ip, 4 );
    17ae:	82 e3       	ldi	r24, 0x32	; 50
    17b0:	91 e0       	ldi	r25, 0x01	; 1
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	44 e0       	ldi	r20, 0x04	; 4
    17b8:	50 e0       	ldi	r21, 0x00	; 0
    17ba:	0e 94 5f 1a 	call	0x34be	; 0x34be <__eerd_block_m32>
			}
			// get server ip address from request and set to new server ip address
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "sip" ), generic_buf ) )
    17be:	8e 01       	movw	r16, r28
    17c0:	0c 5f       	subi	r16, 0xFC	; 252
    17c2:	1f 4f       	sbci	r17, 0xFF	; 255
    17c4:	c3 01       	movw	r24, r6
    17c6:	b2 01       	movw	r22, r4
    17c8:	47 ec       	ldi	r20, 0xC7	; 199
    17ca:	55 e0       	ldi	r21, 0x05	; 5
    17cc:	98 01       	movw	r18, r16
    17ce:	0e 94 de 0a 	call	0x15bc	; 0x15bc <http_get_variable>
    17d2:	88 23       	and	r24, r24
    17d4:	b9 f0       	breq	.+46     	; 0x1804 <http_webserver_process+0x188>
			{
				if ( http_get_ip ( generic_buf, (BYTE*)&server_ip ) == 4 )
    17d6:	c8 01       	movw	r24, r16
    17d8:	6e e2       	ldi	r22, 0x2E	; 46
    17da:	71 e0       	ldi	r23, 0x01	; 1
    17dc:	0e 94 aa 07 	call	0xf54	; 0xf54 <http_get_ip>
    17e0:	84 30       	cpi	r24, 0x04	; 4
    17e2:	41 f4       	brne	.+16     	; 0x17f4 <http_webserver_process+0x178>
					eeprom_write_block ( &server_ip, ee_server_ip, 4 );
    17e4:	8e e2       	ldi	r24, 0x2E	; 46
    17e6:	91 e0       	ldi	r25, 0x01	; 1
    17e8:	64 e0       	ldi	r22, 0x04	; 4
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	44 e0       	ldi	r20, 0x04	; 4
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__eewr_block_m32>
				eeprom_read_block ( &server_ip, ee_server_ip, 4 );
    17f4:	8e e2       	ldi	r24, 0x2E	; 46
    17f6:	91 e0       	ldi	r25, 0x01	; 1
    17f8:	64 e0       	ldi	r22, 0x04	; 4
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	44 e0       	ldi	r20, 0x04	; 4
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	0e 94 5f 1a 	call	0x34be	; 0x34be <__eerd_block_m32>
			}
			// get LED1 on/of command
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "l1" ), generic_buf ) )
    1804:	c3 01       	movw	r24, r6
    1806:	b2 01       	movw	r22, r4
    1808:	44 ec       	ldi	r20, 0xC4	; 196
    180a:	55 e0       	ldi	r21, 0x05	; 5
    180c:	9e 01       	movw	r18, r28
    180e:	2c 5f       	subi	r18, 0xFC	; 252
    1810:	3f 4f       	sbci	r19, 0xFF	; 255
    1812:	0e 94 de 0a 	call	0x15bc	; 0x15bc <http_get_variable>
    1816:	88 23       	and	r24, r24
    1818:	31 f0       	breq	.+12     	; 0x1826 <http_webserver_process+0x1aa>
			{
				if ( generic_buf[0] == '0' )
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	80 33       	cpi	r24, 0x30	; 48
    181e:	11 f4       	brne	.+4      	; 0x1824 <http_webserver_process+0x1a8>
					LED_PORT &= ~_BV ( LED_PIN1 );
    1820:	af 98       	cbi	0x15, 7	; 21
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <http_webserver_process+0x1aa>
				else
					LED_PORT |= _BV ( LED_PIN1 );
    1824:	af 9a       	sbi	0x15, 7	; 21
					
			}
			// get LED2 on/of command
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "l2" ), generic_buf ) )
    1826:	c3 01       	movw	r24, r6
    1828:	b2 01       	movw	r22, r4
    182a:	41 ec       	ldi	r20, 0xC1	; 193
    182c:	55 e0       	ldi	r21, 0x05	; 5
    182e:	9e 01       	movw	r18, r28
    1830:	2c 5f       	subi	r18, 0xFC	; 252
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	0e 94 de 0a 	call	0x15bc	; 0x15bc <http_get_variable>
    1838:	88 23       	and	r24, r24
    183a:	31 f0       	breq	.+12     	; 0x1848 <http_webserver_process+0x1cc>
			{
				if ( generic_buf[0] == '0' )
    183c:	8c 81       	ldd	r24, Y+4	; 0x04
    183e:	80 33       	cpi	r24, 0x30	; 48
    1840:	11 f4       	brne	.+4      	; 0x1846 <http_webserver_process+0x1ca>
					LED_PORT &= ~_BV ( LED_PIN2 );
    1842:	ae 98       	cbi	0x15, 6	; 21
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <http_webserver_process+0x1cc>
				else
					LED_PORT |= _BV ( LED_PIN2 );
    1846:	ae 9a       	sbi	0x15, 6	; 21
			}

			// get LED3 on/of command
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "l3" ), generic_buf ) )
    1848:	c3 01       	movw	r24, r6
    184a:	b2 01       	movw	r22, r4
    184c:	4e eb       	ldi	r20, 0xBE	; 190
    184e:	55 e0       	ldi	r21, 0x05	; 5
    1850:	9e 01       	movw	r18, r28
    1852:	2c 5f       	subi	r18, 0xFC	; 252
    1854:	3f 4f       	sbci	r19, 0xFF	; 255
    1856:	0e 94 de 0a 	call	0x15bc	; 0x15bc <http_get_variable>
    185a:	88 23       	and	r24, r24
    185c:	31 f0       	breq	.+12     	; 0x186a <http_webserver_process+0x1ee>
			{
				if ( generic_buf[0] == '0' )
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	80 33       	cpi	r24, 0x30	; 48
    1862:	11 f4       	brne	.+4      	; 0x1868 <http_webserver_process+0x1ec>
					LED_PORT &= ~_BV ( LED_PIN3 );
    1864:	ad 98       	cbi	0x15, 5	; 21
    1866:	01 c0       	rjmp	.+2      	; 0x186a <http_webserver_process+0x1ee>
				else
					LED_PORT |= _BV ( LED_PIN3 );
    1868:	ad 9a       	sbi	0x15, 5	; 21
					
			}


			// get LED4 on/of command
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "l4" ), generic_buf ) )
    186a:	c3 01       	movw	r24, r6
    186c:	b2 01       	movw	r22, r4
    186e:	4b eb       	ldi	r20, 0xBB	; 187
    1870:	55 e0       	ldi	r21, 0x05	; 5
    1872:	9e 01       	movw	r18, r28
    1874:	2c 5f       	subi	r18, 0xFC	; 252
    1876:	3f 4f       	sbci	r19, 0xFF	; 255
    1878:	0e 94 de 0a 	call	0x15bc	; 0x15bc <http_get_variable>
    187c:	88 23       	and	r24, r24
    187e:	31 f0       	breq	.+12     	; 0x188c <http_webserver_process+0x210>
			{
				if ( generic_buf[0] == '0' )
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	80 33       	cpi	r24, 0x30	; 48
    1884:	11 f4       	brne	.+4      	; 0x188a <http_webserver_process+0x20e>
					LED_PORT &= ~_BV ( LED_PIN4 );
    1886:	ac 98       	cbi	0x15, 4	; 21
    1888:	01 c0       	rjmp	.+2      	; 0x188c <http_webserver_process+0x210>
				else
					LED_PORT |= _BV ( LED_PIN4 );
    188a:	ac 9a       	sbi	0x15, 4	; 21
			}

			// get LED5 on/of command
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "l5" ), generic_buf ) )
    188c:	c3 01       	movw	r24, r6
    188e:	b2 01       	movw	r22, r4
    1890:	48 eb       	ldi	r20, 0xB8	; 184
    1892:	55 e0       	ldi	r21, 0x05	; 5
    1894:	9e 01       	movw	r18, r28
    1896:	2c 5f       	subi	r18, 0xFC	; 252
    1898:	3f 4f       	sbci	r19, 0xFF	; 255
    189a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <http_get_variable>
    189e:	88 23       	and	r24, r24
    18a0:	31 f0       	breq	.+12     	; 0x18ae <http_webserver_process+0x232>
			{
				if ( generic_buf[0] == '0' )
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	80 33       	cpi	r24, 0x30	; 48
    18a6:	11 f4       	brne	.+4      	; 0x18ac <http_webserver_process+0x230>
					LED_PORT &= ~_BV ( LED_PIN5 );
    18a8:	ab 98       	cbi	0x15, 3	; 21
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <http_webserver_process+0x232>
				else
					LED_PORT |= _BV ( LED_PIN5 );
    18ac:	ab 9a       	sbi	0x15, 3	; 21
					
			}

			// get LED6 on/of command
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "l6" ), generic_buf ) )
    18ae:	c3 01       	movw	r24, r6
    18b0:	b2 01       	movw	r22, r4
    18b2:	45 eb       	ldi	r20, 0xB5	; 181
    18b4:	55 e0       	ldi	r21, 0x05	; 5
    18b6:	9e 01       	movw	r18, r28
    18b8:	2c 5f       	subi	r18, 0xFC	; 252
    18ba:	3f 4f       	sbci	r19, 0xFF	; 255
    18bc:	0e 94 de 0a 	call	0x15bc	; 0x15bc <http_get_variable>
    18c0:	88 23       	and	r24, r24
    18c2:	31 f0       	breq	.+12     	; 0x18d0 <http_webserver_process+0x254>
			{
				if ( generic_buf[0] == '0' )
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	80 33       	cpi	r24, 0x30	; 48
    18c8:	11 f4       	brne	.+4      	; 0x18ce <http_webserver_process+0x252>
					LED_PORT &= ~_BV ( LED_PIN6 );
    18ca:	aa 98       	cbi	0x15, 2	; 21
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <http_webserver_process+0x254>
				else
					LED_PORT |= _BV ( LED_PIN6 );
    18ce:	aa 9a       	sbi	0x15, 2	; 21
					
			}
			// get LCD string and show on first line
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "lcd1" ), generic_buf ) )
    18d0:	8e 01       	movw	r16, r28
    18d2:	0c 5f       	subi	r16, 0xFC	; 252
    18d4:	1f 4f       	sbci	r17, 0xFF	; 255
    18d6:	c3 01       	movw	r24, r6
    18d8:	b2 01       	movw	r22, r4
    18da:	40 eb       	ldi	r20, 0xB0	; 176
    18dc:	55 e0       	ldi	r21, 0x05	; 5
    18de:	98 01       	movw	r18, r16
    18e0:	0e 94 de 0a 	call	0x15bc	; 0x15bc <http_get_variable>
    18e4:	88 23       	and	r24, r24
    18e6:	79 f0       	breq	.+30     	; 0x1906 <http_webserver_process+0x28a>
			{
				urldecode ( generic_buf );
    18e8:	c8 01       	movw	r24, r16
    18ea:	0e 94 de 07 	call	0xfbc	; 0xfbc <urldecode>
				lcd_putc ( '\f' );
    18ee:	8c e0       	ldi	r24, 0x0C	; 12
    18f0:	0e 94 40 16 	call	0x2c80	; 0x2c80 <lcd_putc>
				lcd_print ( generic_buf );
    18f4:	c8 01       	movw	r24, r16
    18f6:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <lcd_print>
				flag1.bits.lcd_busy = 1;
    18fa:	80 91 27 01 	lds	r24, 0x0127
    18fe:	84 60       	ori	r24, 0x04	; 4
    1900:	80 93 27 01 	sts	0x0127, r24
				LCD_BL_PORT |= _BV( LCD_BL_PIN );
    1904:	c3 9a       	sbi	0x18, 3	; 24
			}
			// get LCD string and show on second line
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "lcd2" ), generic_buf ) )
    1906:	8e 01       	movw	r16, r28
    1908:	0c 5f       	subi	r16, 0xFC	; 252
    190a:	1f 4f       	sbci	r17, 0xFF	; 255
    190c:	c3 01       	movw	r24, r6
    190e:	b2 01       	movw	r22, r4
    1910:	4b ea       	ldi	r20, 0xAB	; 171
    1912:	55 e0       	ldi	r21, 0x05	; 5
    1914:	98 01       	movw	r18, r16
    1916:	0e 94 de 0a 	call	0x15bc	; 0x15bc <http_get_variable>
    191a:	88 23       	and	r24, r24
    191c:	79 f0       	breq	.+30     	; 0x193c <http_webserver_process+0x2c0>
			{
				urldecode ( generic_buf );
    191e:	c8 01       	movw	r24, r16
    1920:	0e 94 de 07 	call	0xfbc	; 0xfbc <urldecode>
				lcd_putc ( '\n' );
    1924:	8a e0       	ldi	r24, 0x0A	; 10
    1926:	0e 94 40 16 	call	0x2c80	; 0x2c80 <lcd_putc>
				lcd_print ( generic_buf );
    192a:	c8 01       	movw	r24, r16
    192c:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <lcd_print>
				flag1.bits.lcd_busy = 1;
    1930:	80 91 27 01 	lds	r24, 0x0127
    1934:	84 60       	ori	r24, 0x04	; 4
    1936:	80 93 27 01 	sts	0x0127, r24
				LCD_BL_PORT |= _BV( LCD_BL_PIN );
    193a:	c3 9a       	sbi	0x18, 3	; 24
			}
			// get send temparature to server configuration
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "tc" ), generic_buf ) )
    193c:	8e 01       	movw	r16, r28
    193e:	0c 5f       	subi	r16, 0xFC	; 252
    1940:	1f 4f       	sbci	r17, 0xFF	; 255
    1942:	c3 01       	movw	r24, r6
    1944:	b2 01       	movw	r22, r4
    1946:	48 ea       	ldi	r20, 0xA8	; 168
    1948:	55 e0       	ldi	r21, 0x05	; 5
    194a:	98 01       	movw	r18, r16
    194c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <http_get_variable>
    1950:	88 23       	and	r24, r24
    1952:	09 f4       	brne	.+2      	; 0x1956 <http_webserver_process+0x2da>
    1954:	47 c0       	rjmp	.+142    	; 0x19e4 <http_webserver_process+0x368>
			{
				// enable or disable send temparature
				if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "en" ), generic_buf ) )
    1956:	c3 01       	movw	r24, r6
    1958:	b2 01       	movw	r22, r4
    195a:	45 ea       	ldi	r20, 0xA5	; 165
    195c:	55 e0       	ldi	r21, 0x05	; 5
    195e:	98 01       	movw	r18, r16
    1960:	0e 94 de 0a 	call	0x15bc	; 0x15bc <http_get_variable>
    1964:	88 23       	and	r24, r24
    1966:	19 f0       	breq	.+6      	; 0x196e <http_webserver_process+0x2f2>
					count_time_temp[0] = 1;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	01 c0       	rjmp	.+2      	; 0x1970 <http_webserver_process+0x2f4>
				else
					count_time_temp[0] = 0;
    196e:	19 82       	std	Y+1, r1	; 0x01
				// get hour
				if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "h" ), generic_buf ) )
    1970:	c3 01       	movw	r24, r6
    1972:	b2 01       	movw	r22, r4
    1974:	43 ea       	ldi	r20, 0xA3	; 163
    1976:	55 e0       	ldi	r21, 0x05	; 5
    1978:	9e 01       	movw	r18, r28
    197a:	2c 5f       	subi	r18, 0xFC	; 252
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <http_get_variable>
    1982:	88 23       	and	r24, r24
    1984:	49 f0       	breq	.+18     	; 0x1998 <http_webserver_process+0x31c>
				{
					count_time_temp[1] = (generic_buf[0] - '0') * 10;
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	2a e0       	ldi	r18, 0x0A	; 10
    198a:	82 9f       	mul	r24, r18
    198c:	c0 01       	movw	r24, r0
    198e:	11 24       	eor	r1, r1
					count_time_temp[1] = count_time_temp[1] + (generic_buf[1] - '0');
    1990:	2d 81       	ldd	r18, Y+5	; 0x05
    1992:	28 0f       	add	r18, r24
    1994:	20 51       	subi	r18, 0x10	; 16
    1996:	2a 83       	std	Y+2, r18	; 0x02
				}
				// get minute
				if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "m" ), generic_buf ) )
    1998:	c3 01       	movw	r24, r6
    199a:	b2 01       	movw	r22, r4
    199c:	41 ea       	ldi	r20, 0xA1	; 161
    199e:	55 e0       	ldi	r21, 0x05	; 5
    19a0:	9e 01       	movw	r18, r28
    19a2:	2c 5f       	subi	r18, 0xFC	; 252
    19a4:	3f 4f       	sbci	r19, 0xFF	; 255
    19a6:	0e 94 de 0a 	call	0x15bc	; 0x15bc <http_get_variable>
    19aa:	88 23       	and	r24, r24
    19ac:	49 f0       	breq	.+18     	; 0x19c0 <http_webserver_process+0x344>
				{
					count_time_temp[2] = (generic_buf[0] - '0') * 10;
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	2a e0       	ldi	r18, 0x0A	; 10
    19b2:	82 9f       	mul	r24, r18
    19b4:	c0 01       	movw	r24, r0
    19b6:	11 24       	eor	r1, r1
					count_time_temp[2] = count_time_temp[2] + (generic_buf[1] - '0');
    19b8:	2d 81       	ldd	r18, Y+5	; 0x05
    19ba:	28 0f       	add	r18, r24
    19bc:	20 51       	subi	r18, 0x10	; 16
    19be:	2b 83       	std	Y+3, r18	; 0x03
				}
				// write config to eeprom
				eeprom_write_block ( count_time_temp, ee_count_time, 3 );
    19c0:	ce 01       	movw	r24, r28
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	68 e0       	ldi	r22, 0x08	; 8
    19c6:	70 e0       	ldi	r23, 0x00	; 0
    19c8:	43 e0       	ldi	r20, 0x03	; 3
    19ca:	50 e0       	ldi	r21, 0x00	; 0
    19cc:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__eewr_block_m32>
				eeprom_read_block ( count_time, ee_count_time, 3 );
    19d0:	8c e3       	ldi	r24, 0x3C	; 60
    19d2:	91 e0       	ldi	r25, 0x01	; 1
    19d4:	68 e0       	ldi	r22, 0x08	; 8
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	43 e0       	ldi	r20, 0x03	; 3
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	0e 94 5f 1a 	call	0x34be	; 0x34be <__eerd_block_m32>
				count_time[3] = 0;
    19e0:	10 92 3f 01 	sts	0x013F, r1
			}

			// print webpage
			
			if(http_get_variable ( rxtx_buffer, dlength, PSTR( "api" ), generic_buf ) ){
    19e4:	8e 01       	movw	r16, r28
    19e6:	0c 5f       	subi	r16, 0xFC	; 252
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	c3 01       	movw	r24, r6
    19ec:	b2 01       	movw	r22, r4
    19ee:	4d e9       	ldi	r20, 0x9D	; 157
    19f0:	55 e0       	ldi	r21, 0x05	; 5
    19f2:	98 01       	movw	r18, r16
    19f4:	0e 94 de 0a 	call	0x15bc	; 0x15bc <http_get_variable>
    19f8:	88 23       	and	r24, r24
    19fa:	39 f0       	breq	.+14     	; 0x1a0a <http_webserver_process+0x38e>
				if(generic_buf[0] == 'o'){
    19fc:	8c 81       	ldd	r24, Y+4	; 0x04
    19fe:	8f 36       	cpi	r24, 0x6F	; 111
    1a00:	a9 f4       	brne	.+42     	; 0x1a2c <http_webserver_process+0x3b0>
					dlength = http_api( rxtx_buffer );
    1a02:	c3 01       	movw	r24, r6
    1a04:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <http_api>
    1a08:	10 c0       	rjmp	.+32     	; 0x1a2a <http_webserver_process+0x3ae>
				}
			}else if(http_get_variable ( rxtx_buffer, dlength, PSTR( "status" ), generic_buf) ){
    1a0a:	c3 01       	movw	r24, r6
    1a0c:	b2 01       	movw	r22, r4
    1a0e:	46 e9       	ldi	r20, 0x96	; 150
    1a10:	55 e0       	ldi	r21, 0x05	; 5
    1a12:	98 01       	movw	r18, r16
    1a14:	0e 94 de 0a 	call	0x15bc	; 0x15bc <http_get_variable>
    1a18:	88 23       	and	r24, r24
    1a1a:	21 f0       	breq	.+8      	; 0x1a24 <http_webserver_process+0x3a8>
				dlength = http_status(rxtx_buffer);
    1a1c:	c3 01       	movw	r24, r6
    1a1e:	0e 94 11 08 	call	0x1022	; 0x1022 <http_status>
    1a22:	03 c0       	rjmp	.+6      	; 0x1a2a <http_webserver_process+0x3ae>
			}else {
				dlength = http_home( rxtx_buffer );
    1a24:	c3 01       	movw	r24, r6
    1a26:	0e 94 23 08 	call	0x1046	; 0x1046 <http_home>
    1a2a:	2c 01       	movw	r4, r24
				
			}
			// send ack before send data
//			tcp_send_ack ( rxtx_buffer, dest_mac, dest_ip );
			tcp_send_packet (
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <http_webserver_process+0x3b2>
    1a2e:	28 96       	adiw	r28, 0x08	; 8
    1a30:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a32:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a34:	28 97       	sbiw	r28, 0x08	; 8
    1a36:	ed b7       	in	r30, 0x3d	; 61
    1a38:	fe b7       	in	r31, 0x3e	; 62
    1a3a:	92 83       	std	Z+2, r25	; 0x02
    1a3c:	81 83       	std	Z+1, r24	; 0x01
    1a3e:	c3 01       	movw	r24, r6
    1a40:	b1 01       	movw	r22, r2
    1a42:	40 e5       	ldi	r20, 0x50	; 80
    1a44:	50 e0       	ldi	r21, 0x00	; 0
    1a46:	20 e1       	ldi	r18, 0x10	; 16
    1a48:	00 e0       	ldi	r16, 0x00	; 0
    1a4a:	ee 24       	eor	r14, r14
    1a4c:	31 e0       	ldi	r19, 0x01	; 1
    1a4e:	c3 2e       	mov	r12, r19
    1a50:	d1 2c       	mov	r13, r1
    1a52:	aa 24       	eor	r10, r10
    1a54:	bb 24       	eor	r11, r11
    1a56:	26 96       	adiw	r28, 0x06	; 6
    1a58:	8e ac       	ldd	r8, Y+62	; 0x3e
    1a5a:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a5c:	26 97       	sbiw	r28, 0x06	; 6
    1a5e:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <tcp_send_packet>
						0,						// tcp data length
						dest_mac,		// server mac address
						dest_ip );		// server ip address
			// send tcp data
//			tcp_send_data ( rxtx_buffer, dest_mac, dest_ip, dlength );
			tcp_send_packet (
    1a62:	28 96       	adiw	r28, 0x08	; 8
    1a64:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a66:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a68:	28 97       	sbiw	r28, 0x08	; 8
    1a6a:	ed b7       	in	r30, 0x3d	; 61
    1a6c:	fe b7       	in	r31, 0x3e	; 62
    1a6e:	92 83       	std	Z+2, r25	; 0x02
    1a70:	81 83       	std	Z+1, r24	; 0x01
    1a72:	c3 01       	movw	r24, r6
    1a74:	b1 01       	movw	r22, r2
    1a76:	40 e5       	ldi	r20, 0x50	; 80
    1a78:	50 e0       	ldi	r21, 0x00	; 0
    1a7a:	29 e1       	ldi	r18, 0x19	; 25
    1a7c:	cc 24       	eor	r12, r12
    1a7e:	dd 24       	eor	r13, r13
    1a80:	52 01       	movw	r10, r4
    1a82:	26 96       	adiw	r28, 0x06	; 6
    1a84:	8e ac       	ldd	r8, Y+62	; 0x3e
    1a86:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a88:	26 97       	sbiw	r28, 0x06	; 6
    1a8a:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <tcp_send_packet>
						0,						// (bool)clear sequence ack number
						0,						// (bool)calculate new seq and seqack number
						dlength,				// tcp data length
						dest_mac,		// server mac address
						dest_ip );		// server ip address
			flag1.bits.syn_is_received = 0;
    1a8e:	80 91 27 01 	lds	r24, 0x0127
    1a92:	8f 7b       	andi	r24, 0xBF	; 191
    1a94:	80 93 27 01 	sts	0x0127, r24
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
		}		
	}
}
    1a9c:	c9 5b       	subi	r28, 0xB9	; 185
    1a9e:	df 4f       	sbci	r29, 0xFF	; 255
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	1f 91       	pop	r17
    1ab0:	0f 91       	pop	r16
    1ab2:	ef 90       	pop	r14
    1ab4:	df 90       	pop	r13
    1ab6:	cf 90       	pop	r12
    1ab8:	bf 90       	pop	r11
    1aba:	af 90       	pop	r10
    1abc:	9f 90       	pop	r9
    1abe:	8f 90       	pop	r8
    1ac0:	7f 90       	pop	r7
    1ac2:	6f 90       	pop	r6
    1ac4:	5f 90       	pop	r5
    1ac6:	4f 90       	pop	r4
    1ac8:	3f 90       	pop	r3
    1aca:	2f 90       	pop	r2
    1acc:	08 95       	ret

00001ace <arp_generate_packet>:
// Function : arp_generate_packet
// Description : generate arp packet
//
//********************************************************************************************
void arp_generate_packet ( BYTE *rxtx_buffer, BYTE *dest_mac, BYTE *dest_ip )
{
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	dc 01       	movw	r26, r24
	unsigned char i;
	
	// setup hardware type to ethernet 0x0001
	rxtx_buffer[ ARP_HARDWARE_TYPE_H_P ] = ARP_HARDWARE_TYPE_H_V;
    1ad4:	1e 96       	adiw	r26, 0x0e	; 14
    1ad6:	1c 92       	st	X, r1
    1ad8:	1e 97       	sbiw	r26, 0x0e	; 14
	rxtx_buffer[ ARP_HARDWARE_TYPE_L_P ] = ARP_HARDWARE_TYPE_L_V;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	1f 96       	adiw	r26, 0x0f	; 15
    1ade:	8c 93       	st	X, r24
    1ae0:	1f 97       	sbiw	r26, 0x0f	; 15
	
	// setup protocol type to ip 0x0800
	rxtx_buffer[ ARP_PROTOCOL_H_P ] = ARP_PROTOCOL_H_V;
    1ae2:	88 e0       	ldi	r24, 0x08	; 8
    1ae4:	50 96       	adiw	r26, 0x10	; 16
    1ae6:	8c 93       	st	X, r24
    1ae8:	50 97       	sbiw	r26, 0x10	; 16
	rxtx_buffer[ ARP_PROTOCOL_L_P ] = ARP_PROTOCOL_L_V;
    1aea:	51 96       	adiw	r26, 0x11	; 17
    1aec:	1c 92       	st	X, r1
    1aee:	51 97       	sbiw	r26, 0x11	; 17

	// setup hardware length to 0x06
	rxtx_buffer[ ARP_HARDWARE_SIZE_P ] = ARP_HARDWARE_SIZE_V;
    1af0:	86 e0       	ldi	r24, 0x06	; 6
    1af2:	52 96       	adiw	r26, 0x12	; 18
    1af4:	8c 93       	st	X, r24
    1af6:	52 97       	sbiw	r26, 0x12	; 18

	// setup protocol length to 0x04
	rxtx_buffer[ ARP_PROTOCOL_SIZE_P ] = ARP_PROTOCOL_SIZE_V;
    1af8:	84 e0       	ldi	r24, 0x04	; 4
    1afa:	53 96       	adiw	r26, 0x13	; 19
    1afc:	8c 93       	st	X, r24
    1afe:	53 97       	sbiw	r26, 0x13	; 19
    1b00:	ed 01       	movw	r28, r26
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0

	// setup arp destination and source mac address
	for ( i=0; i<sizeof(MAC_ADDR); i++)
	{
		rxtx_buffer[ ARP_DST_MAC_P + i ] = dest_mac[i];
    1b06:	fb 01       	movw	r30, r22
    1b08:	e2 0f       	add	r30, r18
    1b0a:	f3 1f       	adc	r31, r19
    1b0c:	80 81       	ld	r24, Z
    1b0e:	88 a3       	std	Y+32, r24	; 0x20
		rxtx_buffer[ ARP_SRC_MAC_P + i ] = avr_mac.byte[i];
    1b10:	f9 01       	movw	r30, r18
    1b12:	e8 5d       	subi	r30, 0xD8	; 216
    1b14:	fe 4f       	sbci	r31, 0xFE	; 254
    1b16:	80 81       	ld	r24, Z
    1b18:	8e 8b       	std	Y+22, r24	; 0x16
    1b1a:	2f 5f       	subi	r18, 0xFF	; 255
    1b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1e:	21 96       	adiw	r28, 0x01	; 1

	// setup protocol length to 0x04
	rxtx_buffer[ ARP_PROTOCOL_SIZE_P ] = ARP_PROTOCOL_SIZE_V;

	// setup arp destination and source mac address
	for ( i=0; i<sizeof(MAC_ADDR); i++)
    1b20:	26 30       	cpi	r18, 0x06	; 6
    1b22:	31 05       	cpc	r19, r1
    1b24:	81 f7       	brne	.-32     	; 0x1b06 <arp_generate_packet+0x38>
    1b26:	5c 96       	adiw	r26, 0x1c	; 28
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	// setup arp destination and source ip address
	for ( i=0; i<sizeof(IP_ADDR); i++)
	{
		rxtx_buffer[ ARP_DST_IP_P + i ] = dest_ip[i];
    1b2c:	fa 01       	movw	r30, r20
    1b2e:	e2 0f       	add	r30, r18
    1b30:	f3 1f       	adc	r31, r19
    1b32:	80 81       	ld	r24, Z
    1b34:	1a 96       	adiw	r26, 0x0a	; 10
    1b36:	8c 93       	st	X, r24
    1b38:	1a 97       	sbiw	r26, 0x0a	; 10
		rxtx_buffer[ ARP_SRC_IP_P + i ] = avr_ip.byte[i];
    1b3a:	f9 01       	movw	r30, r18
    1b3c:	ee 5c       	subi	r30, 0xCE	; 206
    1b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b40:	80 81       	ld	r24, Z
    1b42:	8d 93       	st	X+, r24
    1b44:	2f 5f       	subi	r18, 0xFF	; 255
    1b46:	3f 4f       	sbci	r19, 0xFF	; 255
		rxtx_buffer[ ARP_DST_MAC_P + i ] = dest_mac[i];
		rxtx_buffer[ ARP_SRC_MAC_P + i ] = avr_mac.byte[i];
	}
	
	// setup arp destination and source ip address
	for ( i=0; i<sizeof(IP_ADDR); i++)
    1b48:	24 30       	cpi	r18, 0x04	; 4
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	79 f7       	brne	.-34     	; 0x1b2c <arp_generate_packet+0x5e>
	{
		rxtx_buffer[ ARP_DST_IP_P + i ] = dest_ip[i];
		rxtx_buffer[ ARP_SRC_IP_P + i ] = avr_ip.byte[i];
	}
}
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	08 95       	ret

00001b54 <arp_packet_is_arp>:
// Function : arp_packet_is_arp
// Description : check received packet, that packet is match with arp and avr ip or not?
//
//*******************************************************************************************
BYTE arp_packet_is_arp ( BYTE *rxtx_buffer, WORD_BYTES opcode )
{
    1b54:	fc 01       	movw	r30, r24
	BYTE i;

	// if packet type is not arp packet exit from function
	if( rxtx_buffer[ ETH_TYPE_H_P ] != ETH_TYPE_ARP_H_V || rxtx_buffer[ ETH_TYPE_L_P ] != ETH_TYPE_ARP_L_V)
    1b56:	84 85       	ldd	r24, Z+12	; 0x0c
    1b58:	88 30       	cpi	r24, 0x08	; 8
    1b5a:	c9 f4       	brne	.+50     	; 0x1b8e <arp_packet_is_arp+0x3a>
    1b5c:	85 85       	ldd	r24, Z+13	; 0x0d
    1b5e:	86 30       	cpi	r24, 0x06	; 6
    1b60:	b1 f4       	brne	.+44     	; 0x1b8e <arp_packet_is_arp+0x3a>
		return 0;
	// check arp request opcode
	if ( rxtx_buffer[ ARP_OPCODE_H_P ] != opcode.byte.high || rxtx_buffer[ ARP_OPCODE_L_P ] != opcode.byte.low )
    1b62:	84 89       	ldd	r24, Z+20	; 0x14
    1b64:	87 17       	cp	r24, r23
    1b66:	99 f4       	brne	.+38     	; 0x1b8e <arp_packet_is_arp+0x3a>
    1b68:	85 89       	ldd	r24, Z+21	; 0x15
    1b6a:	86 17       	cp	r24, r22
    1b6c:	81 f4       	brne	.+32     	; 0x1b8e <arp_packet_is_arp+0x3a>
    1b6e:	df 01       	movw	r26, r30
    1b70:	96 96       	adiw	r26, 0x26	; 38
    1b72:	e2 e3       	ldi	r30, 0x32	; 50
    1b74:	f1 e0       	ldi	r31, 0x01	; 1
		return 0;
	// if destination ip address in arp packet not match with avr ip address
	for ( i=0; i<sizeof(IP_ADDR); i++ )
	{
		if ( rxtx_buffer[ ARP_DST_IP_P + i] != avr_ip.byte[i] )
    1b76:	9c 91       	ld	r25, X
    1b78:	80 81       	ld	r24, Z
    1b7a:	98 17       	cp	r25, r24
    1b7c:	41 f4       	brne	.+16     	; 0x1b8e <arp_packet_is_arp+0x3a>
    1b7e:	11 96       	adiw	r26, 0x01	; 1
    1b80:	31 96       	adiw	r30, 0x01	; 1
		return 0;
	// check arp request opcode
	if ( rxtx_buffer[ ARP_OPCODE_H_P ] != opcode.byte.high || rxtx_buffer[ ARP_OPCODE_L_P ] != opcode.byte.low )
		return 0;
	// if destination ip address in arp packet not match with avr ip address
	for ( i=0; i<sizeof(IP_ADDR); i++ )
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	e6 33       	cpi	r30, 0x36	; 54
    1b86:	f8 07       	cpc	r31, r24
    1b88:	b1 f7       	brne	.-20     	; 0x1b76 <arp_packet_is_arp+0x22>
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	08 95       	ret
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
	{
		if ( rxtx_buffer[ ARP_DST_IP_P + i] != avr_ip.byte[i] )
			return 0;
	}
	return 1;
}
    1b90:	08 95       	ret

00001b92 <arp_send_reply>:
// Function : arp_send_reply
// Description : Send reply if recieved packet is ARP and IP address is match with avr_ip
//
//*******************************************************************************************
void arp_send_reply ( BYTE *rxtx_buffer, BYTE *dest_mac )
{
    1b92:	ef 92       	push	r14
    1b94:	ff 92       	push	r15
    1b96:	0f 93       	push	r16
    1b98:	1f 93       	push	r17
    1b9a:	8c 01       	movw	r16, r24
    1b9c:	7b 01       	movw	r14, r22
	// generate ethernet header
	eth_generate_header ( rxtx_buffer, (WORD_BYTES){ETH_TYPE_ARP_V}, dest_mac );
    1b9e:	66 e0       	ldi	r22, 0x06	; 6
    1ba0:	78 e0       	ldi	r23, 0x08	; 8
    1ba2:	a7 01       	movw	r20, r14
    1ba4:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <eth_generate_header>

	// change packet type to echo reply
	rxtx_buffer[ ARP_OPCODE_H_P ] = ARP_OPCODE_REPLY_H_V;
    1ba8:	f8 01       	movw	r30, r16
    1baa:	14 8a       	std	Z+20, r1	; 0x14
	rxtx_buffer[ ARP_OPCODE_L_P ] = ARP_OPCODE_REPLY_L_V;
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	85 8b       	std	Z+21, r24	; 0x15
	arp_generate_packet ( rxtx_buffer, dest_mac, &rxtx_buffer[ ARP_SRC_IP_P ] );
    1bb0:	a8 01       	movw	r20, r16
    1bb2:	44 5e       	subi	r20, 0xE4	; 228
    1bb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb6:	c8 01       	movw	r24, r16
    1bb8:	b7 01       	movw	r22, r14
    1bba:	0e 94 67 0d 	call	0x1ace	; 0x1ace <arp_generate_packet>
	
	// send arp packet
	enc28j60_packet_send ( rxtx_buffer, sizeof(ETH_HEADER) + sizeof(ARP_PACKET) );
    1bbe:	c8 01       	movw	r24, r16
    1bc0:	6a e2       	ldi	r22, 0x2A	; 42
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	0e 94 08 05 	call	0xa10	; 0xa10 <enc28j60_packet_send>
}
    1bc8:	1f 91       	pop	r17
    1bca:	0f 91       	pop	r16
    1bcc:	ff 90       	pop	r15
    1bce:	ef 90       	pop	r14
    1bd0:	08 95       	ret

00001bd2 <arp_send_request>:
// Function : arp_send_request
// Description : send arp request packet (who is?) to network.
//
//********************************************************************************************
void arp_send_request ( BYTE *rxtx_buffer, BYTE *dest_ip )
{
    1bd2:	cf 92       	push	r12
    1bd4:	df 92       	push	r13
    1bd6:	ef 92       	push	r14
    1bd8:	ff 92       	push	r15
    1bda:	0f 93       	push	r16
    1bdc:	1f 93       	push	r17
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <arp_send_request+0x12>
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <arp_send_request+0x14>
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <arp_send_request+0x16>
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	8c 01       	movw	r16, r24
    1bee:	6b 01       	movw	r12, r22
	unsigned char i;
	MAC_ADDR dest_mac;

	// generate ethernet header
	for ( i=0; i<sizeof(MAC_ADDR); i++)
		dest_mac.byte[i] = 0xff;
    1bf0:	8f ef       	ldi	r24, 0xFF	; 255
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	8a 83       	std	Y+2, r24	; 0x02
    1bf6:	8b 83       	std	Y+3, r24	; 0x03
    1bf8:	8c 83       	std	Y+4, r24	; 0x04
    1bfa:	8d 83       	std	Y+5, r24	; 0x05
    1bfc:	8e 83       	std	Y+6, r24	; 0x06
	eth_generate_header ( rxtx_buffer, (WORD_BYTES){ETH_TYPE_ARP_V}, (BYTE*)&dest_mac );
    1bfe:	c8 01       	movw	r24, r16
    1c00:	66 e0       	ldi	r22, 0x06	; 6
    1c02:	78 e0       	ldi	r23, 0x08	; 8
    1c04:	7e 01       	movw	r14, r28
    1c06:	08 94       	sec
    1c08:	e1 1c       	adc	r14, r1
    1c0a:	f1 1c       	adc	r15, r1
    1c0c:	a7 01       	movw	r20, r14
    1c0e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <eth_generate_header>

	// generate arp packet
	for ( i=0; i<sizeof(MAC_ADDR); i++)
		dest_mac.byte[i] = 0x00;
    1c12:	19 82       	std	Y+1, r1	; 0x01
    1c14:	1a 82       	std	Y+2, r1	; 0x02
    1c16:	1b 82       	std	Y+3, r1	; 0x03
    1c18:	1c 82       	std	Y+4, r1	; 0x04
    1c1a:	1d 82       	std	Y+5, r1	; 0x05
    1c1c:	1e 82       	std	Y+6, r1	; 0x06
	
	// set arp opcode is request
	rxtx_buffer[ ARP_OPCODE_H_P ] = ARP_OPCODE_REQUEST_H_V;
    1c1e:	f8 01       	movw	r30, r16
    1c20:	14 8a       	std	Z+20, r1	; 0x14
	rxtx_buffer[ ARP_OPCODE_L_P ] = ARP_OPCODE_REQUEST_L_V;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	85 8b       	std	Z+21, r24	; 0x15
	arp_generate_packet ( rxtx_buffer, (BYTE*)&dest_mac, dest_ip );
    1c26:	c8 01       	movw	r24, r16
    1c28:	b7 01       	movw	r22, r14
    1c2a:	a6 01       	movw	r20, r12
    1c2c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <arp_generate_packet>
	
	// send arp packet to network
	enc28j60_packet_send ( rxtx_buffer, sizeof(ETH_HEADER) + sizeof(ARP_PACKET) );
    1c30:	c8 01       	movw	r24, r16
    1c32:	6a e2       	ldi	r22, 0x2A	; 42
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	0e 94 08 05 	call	0xa10	; 0xa10 <enc28j60_packet_send>
}
    1c3a:	26 96       	adiw	r28, 0x06	; 6
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	ff 90       	pop	r15
    1c50:	ef 90       	pop	r14
    1c52:	df 90       	pop	r13
    1c54:	cf 90       	pop	r12
    1c56:	08 95       	ret

00001c58 <arp_who_is>:
// Description : send arp request to destination ip, and save destination mac to dest_mac.
// call this function to find the destination mac address before send other packet.
//
//*******************************************************************************************
BYTE arp_who_is ( BYTE *rxtx_buffer, BYTE *dest_mac, BYTE *dest_ip )
{
    1c58:	df 92       	push	r13
    1c5a:	ef 92       	push	r14
    1c5c:	ff 92       	push	r15
    1c5e:	0f 93       	push	r16
    1c60:	1f 93       	push	r17
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	ec 01       	movw	r28, r24
    1c68:	06 2f       	mov	r16, r22
    1c6a:	d7 2e       	mov	r13, r23
	BYTE i;
	WORD dlength;

	// send arp request packet to network
	arp_send_request ( rxtx_buffer, dest_ip );
    1c6c:	ba 01       	movw	r22, r20
    1c6e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <arp_send_request>
    1c72:	10 e0       	ldi	r17, 0x00	; 0
    1c74:	80 e4       	ldi	r24, 0x40	; 64
    1c76:	e8 2e       	mov	r14, r24
    1c78:	8c e9       	ldi	r24, 0x9C	; 156
    1c7a:	f8 2e       	mov	r15, r24
    1c7c:	c7 01       	movw	r24, r14
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <arp_who_is+0x26>

	for ( i=0; i<10; i++ )
	{
		// Time out 10x10ms = 100ms
		_delay_ms ( 10 );
		dlength = enc28j60_packet_receive( rxtx_buffer, MAX_RXTX_BUFFER );
    1c82:	ce 01       	movw	r24, r28
    1c84:	6e ee       	ldi	r22, 0xEE	; 238
    1c86:	75 e0       	ldi	r23, 0x05	; 5
    1c88:	0e 94 4d 05 	call	0xa9a	; 0xa9a <enc28j60_packet_receive>

		// destination ip address was found on network
		if ( dlength )
    1c8c:	89 2b       	or	r24, r25
    1c8e:	a1 f0       	breq	.+40     	; 0x1cb8 <arp_who_is+0x60>
		{
			if ( arp_packet_is_arp ( rxtx_buffer, (WORD_BYTES){ARP_OPCODE_REPLY_V} ) )
    1c90:	ce 01       	movw	r24, r28
    1c92:	62 e0       	ldi	r22, 0x02	; 2
    1c94:	70 e0       	ldi	r23, 0x00	; 0
    1c96:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <arp_packet_is_arp>
    1c9a:	88 23       	and	r24, r24
    1c9c:	69 f0       	breq	.+26     	; 0x1cb8 <arp_who_is+0x60>
			{
				// copy destination mac address from arp reply packet to destination mac address
				memcpy ( dest_mac, &rxtx_buffer[ ETH_SRC_MAC_P ], sizeof(MAC_ADDR) );
    1c9e:	80 2f       	mov	r24, r16
    1ca0:	9d 2d       	mov	r25, r13
    1ca2:	9c 01       	movw	r18, r24
    1ca4:	d9 01       	movw	r26, r18
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	36 96       	adiw	r30, 0x06	; 6
    1caa:	86 e0       	ldi	r24, 0x06	; 6
    1cac:	01 90       	ld	r0, Z+
    1cae:	0d 92       	st	X+, r0
    1cb0:	81 50       	subi	r24, 0x01	; 1
    1cb2:	e1 f7       	brne	.-8      	; 0x1cac <arp_who_is+0x54>
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	04 c0       	rjmp	.+8      	; 0x1cc0 <arp_who_is+0x68>
	WORD dlength;

	// send arp request packet to network
	arp_send_request ( rxtx_buffer, dest_ip );

	for ( i=0; i<10; i++ )
    1cb8:	1f 5f       	subi	r17, 0xFF	; 255
    1cba:	1a 30       	cpi	r17, 0x0A	; 10
    1cbc:	f9 f6       	brne	.-66     	; 0x1c7c <arp_who_is+0x24>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	// destination ip was not found on network
	return 0;
}
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	1f 91       	pop	r17
    1cc6:	0f 91       	pop	r16
    1cc8:	ff 90       	pop	r15
    1cca:	ef 90       	pop	r14
    1ccc:	df 90       	pop	r13
    1cce:	08 95       	ret

00001cd0 <tcp_get_dlength>:
// Function : tcp_get_dlength
// Description : claculate tcp received data length
//
//*****************************************************************************************
WORD tcp_get_dlength ( BYTE *rxtx_buffer )
{
    1cd0:	fc 01       	movw	r30, r24
	int dlength, hlength;

	dlength = ( rxtx_buffer[ IP_TOTLEN_H_P ] <<8 ) | ( rxtx_buffer[ IP_TOTLEN_L_P ] );
	dlength -= sizeof(IP_HEADER);
    1cd2:	90 89       	ldd	r25, Z+16	; 0x10
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	21 89       	ldd	r18, Z+17	; 0x11
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	28 2b       	or	r18, r24
    1cdc:	39 2b       	or	r19, r25
    1cde:	24 51       	subi	r18, 0x14	; 20
    1ce0:	30 40       	sbci	r19, 0x00	; 0
	hlength = (rxtx_buffer[ TCP_HEADER_LEN_P ]>>4) * 4; // generate len in bytes;
	dlength -= hlength;
    1ce2:	86 a5       	ldd	r24, Z+46	; 0x2e
    1ce4:	82 95       	swap	r24
    1ce6:	8f 70       	andi	r24, 0x0F	; 15
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	28 1b       	sub	r18, r24
    1cf4:	39 0b       	sbc	r19, r25
    1cf6:	37 ff       	sbrs	r19, 7
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <tcp_get_dlength+0x2e>
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
	if ( dlength <= 0 )
		dlength=0;
	
	return ((WORD)dlength);
}
    1cfe:	c9 01       	movw	r24, r18
    1d00:	08 95       	ret

00001d02 <tcp_get_hlength>:
// Function : tcp_get_hlength
// Description : claculate tcp received header length
//
//*****************************************************************************************
BYTE tcp_get_hlength ( BYTE *rxtx_buffer )
{
    1d02:	fc 01       	movw	r30, r24
    1d04:	86 a5       	ldd	r24, Z+46	; 0x2e
    1d06:	82 95       	swap	r24
    1d08:	8f 70       	andi	r24, 0x0F	; 15
	return ((rxtx_buffer[ TCP_HEADER_LEN_P ]>>4) * 4); // generate len in bytes;
}
    1d0a:	88 0f       	add	r24, r24
    1d0c:	88 0f       	add	r24, r24
    1d0e:	08 95       	ret

00001d10 <tcp_puts_data_p>:
// Function : tcp_puts_data_p
// Description : puts data from program memory to tx buffer
//
//********************************************************************************************
WORD tcp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
    1d10:	4a 5c       	subi	r20, 0xCA	; 202
    1d12:	5f 4f       	sbci	r21, 0xFF	; 255
    1d14:	dc 01       	movw	r26, r24
    1d16:	a4 0f       	add	r26, r20
    1d18:	b5 1f       	adc	r27, r21
    1d1a:	46 53       	subi	r20, 0x36	; 54
    1d1c:	50 40       	sbci	r21, 0x00	; 0
    1d1e:	03 c0       	rjmp	.+6      	; 0x1d26 <tcp_puts_data_p+0x16>
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ TCP_DATA_P + offset ] = ch;
    1d20:	8d 93       	st	X+, r24
		offset++;
    1d22:	4f 5f       	subi	r20, 0xFF	; 255
    1d24:	5f 4f       	sbci	r21, 0xFF	; 255
    1d26:	fb 01       	movw	r30, r22
//********************************************************************************************
WORD tcp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    1d28:	6f 5f       	subi	r22, 0xFF	; 255
    1d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2c:	84 91       	lpm	r24, Z+
    1d2e:	88 23       	and	r24, r24
    1d30:	b9 f7       	brne	.-18     	; 0x1d20 <tcp_puts_data_p+0x10>
		rxtx_buffer[ TCP_DATA_P + offset ] = ch;
		offset++;
	}

	return offset;
}
    1d32:	ca 01       	movw	r24, r20
    1d34:	08 95       	ret

00001d36 <tcp_puts_data>:
// Function : tcp_puts_data
// Description : puts data from RAM to tx buffer
//
//********************************************************************************************
WORD tcp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
    1d36:	fb 01       	movw	r30, r22
    1d38:	4a 5c       	subi	r20, 0xCA	; 202
    1d3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	a4 0f       	add	r26, r20
    1d40:	b5 1f       	adc	r27, r21
    1d42:	46 53       	subi	r20, 0x36	; 54
    1d44:	50 40       	sbci	r21, 0x00	; 0
    1d46:	04 c0       	rjmp	.+8      	; 0x1d50 <tcp_puts_data+0x1a>
	while( *data )
	{
		rxtx_buffer[ TCP_DATA_P + offset ] = *data++;
    1d48:	8d 93       	st	X+, r24
    1d4a:	31 96       	adiw	r30, 0x01	; 1
		offset++;
    1d4c:	4f 5f       	subi	r20, 0xFF	; 255
    1d4e:	5f 4f       	sbci	r21, 0xFF	; 255
// Description : puts data from RAM to tx buffer
//
//********************************************************************************************
WORD tcp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
	while( *data )
    1d50:	80 81       	ld	r24, Z
    1d52:	88 23       	and	r24, r24
    1d54:	c9 f7       	brne	.-14     	; 0x1d48 <tcp_puts_data+0x12>
		rxtx_buffer[ TCP_DATA_P + offset ] = *data++;
		offset++;
	}

	return offset;
}
    1d56:	ca 01       	movw	r24, r20
    1d58:	08 95       	ret

00001d5a <tcp_send_packet>:
	BYTE clear_seqack,
	WORD next_ack_num,
	WORD dlength,
	BYTE *dest_mac,
	BYTE *dest_ip )
{
    1d5a:	2f 92       	push	r2
    1d5c:	3f 92       	push	r3
    1d5e:	4f 92       	push	r4
    1d60:	5f 92       	push	r5
    1d62:	6f 92       	push	r6
    1d64:	7f 92       	push	r7
    1d66:	8f 92       	push	r8
    1d68:	9f 92       	push	r9
    1d6a:	af 92       	push	r10
    1d6c:	bf 92       	push	r11
    1d6e:	cf 92       	push	r12
    1d70:	df 92       	push	r13
    1d72:	ef 92       	push	r14
    1d74:	ff 92       	push	r15
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	0f 92       	push	r0
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	3c 01       	movw	r6, r24
    1d86:	26 2e       	mov	r2, r22
    1d88:	47 2e       	mov	r4, r23
    1d8a:	49 83       	std	Y+1, r20	; 0x01
    1d8c:	35 2e       	mov	r3, r21
    1d8e:	52 2e       	mov	r5, r18
    1d90:	f0 2e       	mov	r15, r16
    1d92:	85 01       	movw	r16, r10
    1d94:	a4 01       	movw	r20, r8
	BYTE i, tseq;
	WORD_BYTES ck;
	
	// generate ethernet header
	eth_generate_header ( rxtx_buffer, (WORD_BYTES){ETH_TYPE_IP_V}, dest_mac );		
    1d96:	60 e0       	ldi	r22, 0x00	; 0
    1d98:	78 e0       	ldi	r23, 0x08	; 8
    1d9a:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <eth_generate_header>

	// sequence numbers:
	// add the rel ack num to SEQACK
	if ( next_ack_num )
    1d9e:	c1 14       	cp	r12, r1
    1da0:	d1 04       	cpc	r13, r1
    1da2:	89 f0       	breq	.+34     	; 0x1dc6 <tcp_send_packet+0x6c>
    1da4:	f3 01       	movw	r30, r6
    1da6:	b9 96       	adiw	r30, 0x29	; 41
    1da8:	34 e0       	ldi	r19, 0x04	; 4
	{
		for( i=4; i>0; i-- )
		{
			next_ack_num = rxtx_buffer [ TCP_SEQ_P + i - 1] + next_ack_num;
    1daa:	80 81       	ld	r24, Z
    1dac:	a6 01       	movw	r20, r12
    1dae:	48 0f       	add	r20, r24
    1db0:	51 1d       	adc	r21, r1
    1db2:	ca 01       	movw	r24, r20
			tseq = rxtx_buffer [ TCP_SEQACK_P + i - 1];
    1db4:	24 81       	ldd	r18, Z+4	; 0x04
			rxtx_buffer [ TCP_SEQACK_P + i - 1] = 0xff & next_ack_num;
    1db6:	44 83       	std	Z+4, r20	; 0x04

			// copy the acknum sent to us into the sequence number
			rxtx_buffer[ TCP_SEQ_P + i - 1 ] = tseq;
    1db8:	20 83       	st	Z, r18

			next_ack_num >>= 8;
    1dba:	c9 2e       	mov	r12, r25
    1dbc:	dd 24       	eor	r13, r13

	// sequence numbers:
	// add the rel ack num to SEQACK
	if ( next_ack_num )
	{
		for( i=4; i>0; i-- )
    1dbe:	31 50       	subi	r19, 0x01	; 1
    1dc0:	31 97       	sbiw	r30, 0x01	; 1
    1dc2:	33 23       	and	r19, r19
    1dc4:	91 f7       	brne	.-28     	; 0x1daa <tcp_send_packet+0x50>
	}
	
	// initial tcp sequence number
	// setup maximum segment size
	// require to setup first packet is receive or transmit only
	if ( max_segment_size )
    1dc6:	ff 20       	and	r15, r15
    1dc8:	b9 f0       	breq	.+46     	; 0x1df8 <tcp_send_packet+0x9e>
	{
		// initial sequence number
		rxtx_buffer[ TCP_SEQ_P + 0 ] = 0;
    1dca:	f3 01       	movw	r30, r6
    1dcc:	16 a2       	std	Z+38, r1	; 0x26
		rxtx_buffer[ TCP_SEQ_P + 1 ] = 0;
    1dce:	17 a2       	std	Z+39, r1	; 0x27
		rxtx_buffer[ TCP_SEQ_P + 2 ] = seqnum;
    1dd0:	80 91 60 00 	lds	r24, 0x0060
    1dd4:	80 a7       	std	Z+40, r24	; 0x28
		rxtx_buffer[ TCP_SEQ_P + 3 ] = 0;
    1dd6:	11 a6       	std	Z+41, r1	; 0x29
		seqnum += 2;
    1dd8:	8e 5f       	subi	r24, 0xFE	; 254
    1dda:	80 93 60 00 	sts	0x0060, r24

		// setup maximum segment size
		rxtx_buffer[ TCP_OPTIONS_P + 0 ] = 2;
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	86 ab       	std	Z+54, r24	; 0x36
		rxtx_buffer[ TCP_OPTIONS_P + 1 ] = 4;
    1de2:	84 e0       	ldi	r24, 0x04	; 4
    1de4:	87 ab       	std	Z+55, r24	; 0x37
		rxtx_buffer[ TCP_OPTIONS_P + 2 ] = HIGH(1408);
    1de6:	85 e0       	ldi	r24, 0x05	; 5
    1de8:	80 af       	std	Z+56, r24	; 0x38
		rxtx_buffer[ TCP_OPTIONS_P + 3 ] = LOW(1408);
    1dea:	80 e8       	ldi	r24, 0x80	; 128
    1dec:	81 af       	std	Z+57, r24	; 0x39
		// setup tcp header length 24 bytes: 6*32/8 = 24
		rxtx_buffer[ TCP_HEADER_LEN_P ] = 0x60;
    1dee:	80 e6       	ldi	r24, 0x60	; 96
    1df0:	86 a7       	std	Z+46, r24	; 0x2e
		dlength += 4;
    1df2:	0c 5f       	subi	r16, 0xFC	; 252
    1df4:	1f 4f       	sbci	r17, 0xFF	; 255
    1df6:	03 c0       	rjmp	.+6      	; 0x1dfe <tcp_send_packet+0xa4>
	}
	else
	{
		// no options: 20 bytes: 5*32/8 = 20
		rxtx_buffer[ TCP_HEADER_LEN_P ] = 0x50;
    1df8:	80 e5       	ldi	r24, 0x50	; 80
    1dfa:	f3 01       	movw	r30, r6
    1dfc:	86 a7       	std	Z+46, r24	; 0x2e
	}

	// generate ip header and checksum
	ip_generate_header ( rxtx_buffer, (WORD_BYTES){(sizeof(IP_HEADER) + sizeof(TCP_HEADER) + dlength)}, IP_PROTO_TCP_V, dest_ip );
    1dfe:	b8 01       	movw	r22, r16
    1e00:	68 5d       	subi	r22, 0xD8	; 216
    1e02:	7f 4f       	sbci	r23, 0xFF	; 255
    1e04:	c3 01       	movw	r24, r6
    1e06:	46 e0       	ldi	r20, 0x06	; 6
    1e08:	2e 89       	ldd	r18, Y+22	; 0x16
    1e0a:	3f 89       	ldd	r19, Y+23	; 0x17
    1e0c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <ip_generate_header>
	
	// clear sequence ack number before send tcp SYN packet
	if ( clear_seqack )
    1e10:	ee 20       	and	r14, r14
    1e12:	29 f0       	breq	.+10     	; 0x1e1e <tcp_send_packet+0xc4>
	{
		rxtx_buffer[ TCP_SEQACK_P + 0 ] = 0;
    1e14:	f3 01       	movw	r30, r6
    1e16:	12 a6       	std	Z+42, r1	; 0x2a
		rxtx_buffer[ TCP_SEQACK_P + 1 ] = 0;
    1e18:	13 a6       	std	Z+43, r1	; 0x2b
		rxtx_buffer[ TCP_SEQACK_P + 2 ] = 0;
    1e1a:	14 a6       	std	Z+44, r1	; 0x2c
		rxtx_buffer[ TCP_SEQACK_P + 3 ] = 0;
    1e1c:	15 a6       	std	Z+45, r1	; 0x2d
	}
		
	// setup tcp flags
	rxtx_buffer [ TCP_FLAGS_P ] = flags;
    1e1e:	f3 01       	movw	r30, r6
    1e20:	57 a6       	std	Z+47, r5	; 0x2f
	
	// setup destination port
	rxtx_buffer [ TCP_DST_PORT_H_P ] = dest_port.byte.high;
    1e22:	44 a2       	std	Z+36, r4	; 0x24
	rxtx_buffer [ TCP_DST_PORT_L_P ] = dest_port.byte.low;
    1e24:	25 a2       	std	Z+37, r2	; 0x25

	// setup source port
	rxtx_buffer [ TCP_SRC_PORT_H_P ] = src_port.byte.high;
    1e26:	32 a2       	std	Z+34, r3	; 0x22
	rxtx_buffer [ TCP_SRC_PORT_L_P ] = src_port.byte.low;
    1e28:	49 81       	ldd	r20, Y+1	; 0x01
    1e2a:	43 a3       	std	Z+35, r20	; 0x23

	// setup maximum windows size
	rxtx_buffer [ TCP_WINDOWSIZE_H_P ] = HIGH((MAX_RX_BUFFER-sizeof(IP_HEADER)-sizeof(ETH_HEADER)));
    1e2c:	85 e0       	ldi	r24, 0x05	; 5
    1e2e:	80 ab       	std	Z+48, r24	; 0x30
	rxtx_buffer [ TCP_WINDOWSIZE_L_P ] = LOW((MAX_RX_BUFFER-sizeof(IP_HEADER)-sizeof(ETH_HEADER)));
    1e30:	8a eb       	ldi	r24, 0xBA	; 186
    1e32:	81 ab       	std	Z+49, r24	; 0x31
	
	// setup urgend pointer (not used -> 0)
	rxtx_buffer[ TCP_URGENT_PTR_H_P ] = 0;
    1e34:	14 aa       	std	Z+52, r1	; 0x34
	rxtx_buffer[ TCP_URGENT_PTR_L_P ] = 0;
    1e36:	15 aa       	std	Z+53, r1	; 0x35

	// clear old checksum and calculate new checksum
	rxtx_buffer[ TCP_CHECKSUM_H_P ] = 0;
    1e38:	12 aa       	std	Z+50, r1	; 0x32
	rxtx_buffer[ TCP_CHECKSUM_L_P ] = 0;
    1e3a:	13 aa       	std	Z+51, r1	; 0x33
	// +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	// +                                     Destination IP address                                    +
	// +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	// +           0           +      IP Protocol      +                    Total length               +
	// +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	ck.word = software_checksum( &rxtx_buffer[IP_SRC_IP_P], sizeof(TCP_HEADER)+dlength+8, IP_PROTO_TCP_V + sizeof(TCP_HEADER) + dlength );
    1e3c:	06 5e       	subi	r16, 0xE6	; 230
    1e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e40:	98 01       	movw	r18, r16
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	50 e0       	ldi	r21, 0x00	; 0
    1e46:	c3 01       	movw	r24, r6
    1e48:	4a 96       	adiw	r24, 0x1a	; 26
    1e4a:	0e 5f       	subi	r16, 0xFE	; 254
    1e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4e:	b8 01       	movw	r22, r16
    1e50:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <software_checksum>
	rxtx_buffer[ TCP_CHECKSUM_H_P ] = ck.byte.high;
    1e54:	f3 01       	movw	r30, r6
    1e56:	92 ab       	std	Z+50, r25	; 0x32
	rxtx_buffer[ TCP_CHECKSUM_L_P ] = ck.byte.low;
    1e58:	83 ab       	std	Z+51, r24	; 0x33

	// send packet to ethernet media
	enc28j60_packet_send ( rxtx_buffer, sizeof(ETH_HEADER)+sizeof(IP_HEADER)+sizeof(TCP_HEADER)+dlength );
    1e5a:	06 5e       	subi	r16, 0xE6	; 230
    1e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5e:	c3 01       	movw	r24, r6
    1e60:	b8 01       	movw	r22, r16
    1e62:	0e 94 08 05 	call	0xa10	; 0xa10 <enc28j60_packet_send>
}
    1e66:	0f 90       	pop	r0
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	ff 90       	pop	r15
    1e72:	ef 90       	pop	r14
    1e74:	df 90       	pop	r13
    1e76:	cf 90       	pop	r12
    1e78:	bf 90       	pop	r11
    1e7a:	af 90       	pop	r10
    1e7c:	9f 90       	pop	r9
    1e7e:	8f 90       	pop	r8
    1e80:	7f 90       	pop	r7
    1e82:	6f 90       	pop	r6
    1e84:	5f 90       	pop	r5
    1e86:	4f 90       	pop	r4
    1e88:	3f 90       	pop	r3
    1e8a:	2f 90       	pop	r2
    1e8c:	08 95       	ret

00001e8e <ip_packet_is_ip>:
// Function : ip_check_ip
// Description : Check incoming packet
//
//********************************************************************************************
BYTE ip_packet_is_ip ( BYTE *rxtx_buffer )
{
    1e8e:	fc 01       	movw	r30, r24
	unsigned char i;
	
	// if ethernet type is not ip
	if ( rxtx_buffer[ ETH_TYPE_H_P ] != ETH_TYPE_IP_H_V || rxtx_buffer[ ETH_TYPE_L_P ] != ETH_TYPE_IP_L_V)
    1e90:	84 85       	ldd	r24, Z+12	; 0x0c
    1e92:	88 30       	cpi	r24, 0x08	; 8
    1e94:	a1 f4       	brne	.+40     	; 0x1ebe <ip_packet_is_ip+0x30>
    1e96:	85 85       	ldd	r24, Z+13	; 0x0d
    1e98:	88 23       	and	r24, r24
    1e9a:	89 f4       	brne	.+34     	; 0x1ebe <ip_packet_is_ip+0x30>
    1e9c:	df 01       	movw	r26, r30
    1e9e:	e2 e3       	ldi	r30, 0x32	; 50
    1ea0:	f1 e0       	ldi	r31, 0x01	; 1
		return 0;
	
	// if ip packet not send to avr
	for ( i=0; i<sizeof(IP_ADDR); i++ )
	{
		if ( rxtx_buffer[ IP_DST_IP_P + i ] != avr_ip.byte[i] )
    1ea2:	5e 96       	adiw	r26, 0x1e	; 30
    1ea4:	9c 91       	ld	r25, X
    1ea6:	5e 97       	sbiw	r26, 0x1e	; 30
    1ea8:	80 81       	ld	r24, Z
    1eaa:	98 17       	cp	r25, r24
    1eac:	41 f4       	brne	.+16     	; 0x1ebe <ip_packet_is_ip+0x30>
    1eae:	11 96       	adiw	r26, 0x01	; 1
    1eb0:	31 96       	adiw	r30, 0x01	; 1
	// if ethernet type is not ip
	if ( rxtx_buffer[ ETH_TYPE_H_P ] != ETH_TYPE_IP_H_V || rxtx_buffer[ ETH_TYPE_L_P ] != ETH_TYPE_IP_L_V)
		return 0;
	
	// if ip packet not send to avr
	for ( i=0; i<sizeof(IP_ADDR); i++ )
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	e6 33       	cpi	r30, 0x36	; 54
    1eb6:	f8 07       	cpc	r31, r24
    1eb8:	a1 f7       	brne	.-24     	; 0x1ea2 <ip_packet_is_ip+0x14>
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	08 95       	ret
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
			return 0;
	}
	
	// destination ip address match with avr ip address
	return 1;
}
    1ec0:	08 95       	ret

00001ec2 <ip_generate_header>:
// Function : ip_generate_packet
// Description : generate all ip header
//
//********************************************************************************************
void ip_generate_header ( BYTE *rxtx_buffer, WORD_BYTES total_length, BYTE protocol, BYTE *dest_ip )
{
    1ec2:	0f 93       	push	r16
    1ec4:	1f 93       	push	r17
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	ec 01       	movw	r28, r24
	BYTE i;
	WORD_BYTES ck;
	
	// set ipv4 and header length
	rxtx_buffer[ IP_P ] = IP_V4_V | IP_HEADER_LENGTH_V;
    1ecc:	8c 01       	movw	r16, r24
    1ece:	02 5f       	subi	r16, 0xF2	; 242
    1ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed2:	85 e4       	ldi	r24, 0x45	; 69
    1ed4:	8e 87       	std	Y+14, r24	; 0x0e

	// set TOS to default 0x00
	rxtx_buffer[ IP_TOS_P ] = 0x00;
    1ed6:	1f 86       	std	Y+15, r1	; 0x0f

	// set total length
	rxtx_buffer [ IP_TOTLEN_H_P ] = total_length.byte.high;
    1ed8:	78 8b       	std	Y+16, r23	; 0x10
	rxtx_buffer [ IP_TOTLEN_L_P ] = total_length.byte.low;
    1eda:	69 8b       	std	Y+17, r22	; 0x11
	
	// set packet identification
	rxtx_buffer [ IP_ID_H_P ] = ip_identfier.byte.high;
    1edc:	80 91 62 00 	lds	r24, 0x0062
    1ee0:	8a 8b       	std	Y+18, r24	; 0x12
	rxtx_buffer [ IP_ID_L_P ] = ip_identfier.byte.low;
    1ee2:	80 91 61 00 	lds	r24, 0x0061
    1ee6:	8b 8b       	std	Y+19, r24	; 0x13
	ip_identfier.word++;
    1ee8:	80 91 61 00 	lds	r24, 0x0061
    1eec:	90 91 62 00 	lds	r25, 0x0062
    1ef0:	01 96       	adiw	r24, 0x01	; 1
    1ef2:	90 93 62 00 	sts	0x0062, r25
    1ef6:	80 93 61 00 	sts	0x0061, r24
	
	// set fragment flags	
	rxtx_buffer [ IP_FLAGS_H_P ] = 0x00;
    1efa:	1c 8a       	std	Y+20, r1	; 0x14
	rxtx_buffer [ IP_FLAGS_L_P ] = 0x00;
    1efc:	1d 8a       	std	Y+21, r1	; 0x15
	
	// set Time To Live
	rxtx_buffer [ IP_TTL_P ] = 128;
    1efe:	80 e8       	ldi	r24, 0x80	; 128
    1f00:	8e 8b       	std	Y+22, r24	; 0x16
	
	// set ip packettype to tcp/udp/icmp...
	rxtx_buffer [ IP_PROTO_P ] = protocol;
    1f02:	4f 8b       	std	Y+23, r20	; 0x17
    1f04:	de 01       	movw	r26, r28
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	50 e0       	ldi	r21, 0x00	; 0
	
	// set source and destination ip address
	for ( i=0; i<4; i++ )
	{
		rxtx_buffer[ IP_DST_IP_P + i ] = dest_ip[i];
    1f0a:	f9 01       	movw	r30, r18
    1f0c:	e4 0f       	add	r30, r20
    1f0e:	f5 1f       	adc	r31, r21
    1f10:	80 81       	ld	r24, Z
    1f12:	5e 96       	adiw	r26, 0x1e	; 30
    1f14:	8c 93       	st	X, r24
    1f16:	5e 97       	sbiw	r26, 0x1e	; 30
		rxtx_buffer[ IP_SRC_IP_P + i ] = avr_ip.byte[ i ];
    1f18:	fa 01       	movw	r30, r20
    1f1a:	ee 5c       	subi	r30, 0xCE	; 206
    1f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f1e:	80 81       	ld	r24, Z
    1f20:	5a 96       	adiw	r26, 0x1a	; 26
    1f22:	8c 93       	st	X, r24
    1f24:	5a 97       	sbiw	r26, 0x1a	; 26
    1f26:	4f 5f       	subi	r20, 0xFF	; 255
    1f28:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2a:	11 96       	adiw	r26, 0x01	; 1
	
	// set ip packettype to tcp/udp/icmp...
	rxtx_buffer [ IP_PROTO_P ] = protocol;
	
	// set source and destination ip address
	for ( i=0; i<4; i++ )
    1f2c:	44 30       	cpi	r20, 0x04	; 4
    1f2e:	51 05       	cpc	r21, r1
    1f30:	61 f7       	brne	.-40     	; 0x1f0a <ip_generate_header+0x48>
		rxtx_buffer[ IP_DST_IP_P + i ] = dest_ip[i];
		rxtx_buffer[ IP_SRC_IP_P + i ] = avr_ip.byte[ i ];
	}
	
	// clear the 2 byte checksum
	rxtx_buffer[ IP_CHECKSUM_H_P ] = 0;
    1f32:	18 8e       	std	Y+24, r1	; 0x18
	rxtx_buffer[ IP_CHECKSUM_L_P ] = 0;
    1f34:	19 8e       	std	Y+25, r1	; 0x19

	// fill checksum value
	// calculate the checksum:
	ck.word = software_checksum ( &rxtx_buffer[ IP_P ], sizeof(IP_HEADER), 0 );
    1f36:	c8 01       	movw	r24, r16
    1f38:	64 e1       	ldi	r22, 0x14	; 20
    1f3a:	70 e0       	ldi	r23, 0x00	; 0
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	50 e0       	ldi	r21, 0x00	; 0
    1f44:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <software_checksum>
	rxtx_buffer[ IP_CHECKSUM_H_P ] = ck.byte.high;
    1f48:	98 8f       	std	Y+24, r25	; 0x18
	rxtx_buffer[ IP_CHECKSUM_L_P ] = ck.byte.low;
    1f4a:	89 8f       	std	Y+25, r24	; 0x19
}
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	1f 91       	pop	r17
    1f52:	0f 91       	pop	r16
    1f54:	08 95       	ret

00001f56 <eth_generate_header>:
// Description : generarete ethernet header, contain destination and source MAC address,
// ethernet type.
//
//********************************************************************************************
void eth_generate_header ( BYTE *rxtx_buffer, WORD_BYTES type, BYTE *dest_mac )
{
    1f56:	cf 93       	push	r28
    1f58:	df 93       	push	r29
    1f5a:	ec 01       	movw	r28, r24
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
	BYTE i;
	//copy the destination mac from the source and fill my mac into src
	for ( i=0; i<sizeof(MAC_ADDR); i++)
	{
		rxtx_buffer[ ETH_DST_MAC_P + i ] = dest_mac[i];
    1f62:	fa 01       	movw	r30, r20
    1f64:	e2 0f       	add	r30, r18
    1f66:	f3 1f       	adc	r31, r19
    1f68:	80 81       	ld	r24, Z
    1f6a:	8c 93       	st	X, r24
		rxtx_buffer[ ETH_SRC_MAC_P + i ] = avr_mac.byte[i];
    1f6c:	f9 01       	movw	r30, r18
    1f6e:	e8 5d       	subi	r30, 0xD8	; 216
    1f70:	fe 4f       	sbci	r31, 0xFE	; 254
    1f72:	80 81       	ld	r24, Z
    1f74:	16 96       	adiw	r26, 0x06	; 6
    1f76:	8c 93       	st	X, r24
    1f78:	16 97       	sbiw	r26, 0x06	; 6
    1f7a:	2f 5f       	subi	r18, 0xFF	; 255
    1f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7e:	11 96       	adiw	r26, 0x01	; 1
//********************************************************************************************
void eth_generate_header ( BYTE *rxtx_buffer, WORD_BYTES type, BYTE *dest_mac )
{
	BYTE i;
	//copy the destination mac from the source and fill my mac into src
	for ( i=0; i<sizeof(MAC_ADDR); i++)
    1f80:	26 30       	cpi	r18, 0x06	; 6
    1f82:	31 05       	cpc	r19, r1
    1f84:	71 f7       	brne	.-36     	; 0x1f62 <eth_generate_header+0xc>
	{
		rxtx_buffer[ ETH_DST_MAC_P + i ] = dest_mac[i];
		rxtx_buffer[ ETH_SRC_MAC_P + i ] = avr_mac.byte[i];
	}
	rxtx_buffer[ ETH_TYPE_H_P ] = type.byte.high;//HIGH(type);
    1f86:	7c 87       	std	Y+12, r23	; 0x0c
	rxtx_buffer[ ETH_TYPE_L_P ] = type.byte.low;//LOW(type);
    1f88:	6d 87       	std	Y+13, r22	; 0x0d
}
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	08 95       	ret

00001f90 <software_checksum>:
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
//
//********************************************************************************************
WORD software_checksum(BYTE *rxtx_buffer, WORD len, DWORD sum)
{
    1f90:	ef 92       	push	r14
    1f92:	ff 92       	push	r15
    1f94:	0f 93       	push	r16
    1f96:	1f 93       	push	r17
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	7c 01       	movw	r14, r24
    1f9e:	8b 01       	movw	r16, r22
    1fa0:	ec 01       	movw	r28, r24
    1fa2:	0f c0       	rjmp	.+30     	; 0x1fc2 <software_checksum+0x32>
	// build the sum of 16bit words
	while(len>1)
	{
		sum += 0xFFFF & (*rxtx_buffer<<8|*(rxtx_buffer+1));
    1fa4:	f8 81       	ld	r31, Y
    1fa6:	e0 e0       	ldi	r30, 0x00	; 0
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	8e 2b       	or	r24, r30
    1fae:	9f 2b       	or	r25, r31
    1fb0:	a0 e0       	ldi	r26, 0x00	; 0
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	28 0f       	add	r18, r24
    1fb6:	39 1f       	adc	r19, r25
    1fb8:	4a 1f       	adc	r20, r26
    1fba:	5b 1f       	adc	r21, r27
		rxtx_buffer+=2;
    1fbc:	22 96       	adiw	r28, 0x02	; 2
		len-=2;
    1fbe:	62 50       	subi	r22, 0x02	; 2
    1fc0:	70 40       	sbci	r23, 0x00	; 0
//
//********************************************************************************************
WORD software_checksum(BYTE *rxtx_buffer, WORD len, DWORD sum)
{
	// build the sum of 16bit words
	while(len>1)
    1fc2:	62 30       	cpi	r22, 0x02	; 2
    1fc4:	71 05       	cpc	r23, r1
    1fc6:	70 f7       	brcc	.-36     	; 0x1fa4 <software_checksum+0x14>
    1fc8:	f8 01       	movw	r30, r16
    1fca:	ee 7f       	andi	r30, 0xFE	; 254
    1fcc:	ee 0d       	add	r30, r14
    1fce:	ff 1d       	adc	r31, r15
		sum += 0xFFFF & (*rxtx_buffer<<8|*(rxtx_buffer+1));
		rxtx_buffer+=2;
		len-=2;
	}
	// if there is a byte left then add it (padded with zero)
	if (len)
    1fd0:	00 ff       	sbrs	r16, 0
    1fd2:	0b c0       	rjmp	.+22     	; 0x1fea <software_checksum+0x5a>
	{
		sum += 0xFFFF & (*rxtx_buffer<<8);
    1fd4:	90 81       	ld	r25, Z
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	a0 e0       	ldi	r26, 0x00	; 0
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <software_checksum+0x52>
	}
	// now calculate the sum over the bytes in the sum
	// until the result is only 16bit long
	while (sum>>16)
	{
		sum = (sum & 0xFFFF)+(sum >> 16);
    1fde:	40 70       	andi	r20, 0x00	; 0
    1fe0:	50 70       	andi	r21, 0x00	; 0
    1fe2:	28 0f       	add	r18, r24
    1fe4:	39 1f       	adc	r19, r25
    1fe6:	4a 1f       	adc	r20, r26
    1fe8:	5b 1f       	adc	r21, r27
	{
		sum += 0xFFFF & (*rxtx_buffer<<8);
	}
	// now calculate the sum over the bytes in the sum
	// until the result is only 16bit long
	while (sum>>16)
    1fea:	ca 01       	movw	r24, r20
    1fec:	aa 27       	eor	r26, r26
    1fee:	bb 27       	eor	r27, r27
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	a1 05       	cpc	r26, r1
    1ff4:	b1 05       	cpc	r27, r1
    1ff6:	99 f7       	brne	.-26     	; 0x1fde <software_checksum+0x4e>
    1ff8:	20 95       	com	r18
    1ffa:	30 95       	com	r19
	{
		sum = (sum & 0xFFFF)+(sum >> 16);
	}
	// build 1's complement:
	return( (WORD) sum ^ 0xFFFF);
}
    1ffc:	c9 01       	movw	r24, r18
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	1f 91       	pop	r17
    2004:	0f 91       	pop	r16
    2006:	ff 90       	pop	r15
    2008:	ef 90       	pop	r14
    200a:	08 95       	ret

0000200c <icmp_generate_packet>:
// Function : icmp_send_reply
// Description : Send ARP reply packet from ARP request packet
//
//*******************************************************************************************
void icmp_generate_packet ( BYTE *rxtx_buffer )
{
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	ec 01       	movw	r28, r24
	BYTE i;
	WORD_BYTES ck;
	
	// In send ICMP request case, generate new ICMP data.
	if ( rxtx_buffer[ ICMP_TYPE_P ] == ICMP_TYPE_ECHOREQUEST_V )
    2012:	9c 01       	movw	r18, r24
    2014:	2e 5d       	subi	r18, 0xDE	; 222
    2016:	3f 4f       	sbci	r19, 0xFF	; 255
    2018:	8a a1       	ldd	r24, Y+34	; 0x22
    201a:	88 30       	cpi	r24, 0x08	; 8
    201c:	39 f4       	brne	.+14     	; 0x202c <icmp_generate_packet+0x20>
    201e:	fe 01       	movw	r30, r28
    2020:	ba 96       	adiw	r30, 0x2a	; 42
    2022:	81 e4       	ldi	r24, 0x41	; 65
	{
		for ( i=0; i<ICMP_MAX_DATA; i++ )
		{
			rxtx_buffer[ ICMP_DATA_P + i ] = 'A' + i;
    2024:	81 93       	st	Z+, r24
    2026:	8f 5f       	subi	r24, 0xFF	; 255
	WORD_BYTES ck;
	
	// In send ICMP request case, generate new ICMP data.
	if ( rxtx_buffer[ ICMP_TYPE_P ] == ICMP_TYPE_ECHOREQUEST_V )
	{
		for ( i=0; i<ICMP_MAX_DATA; i++ )
    2028:	81 36       	cpi	r24, 0x61	; 97
    202a:	e1 f7       	brne	.-8      	; 0x2024 <icmp_generate_packet+0x18>
		{
			rxtx_buffer[ ICMP_DATA_P + i ] = 'A' + i;
		}
	}
	// clear icmp checksum
	rxtx_buffer[ ICMP_CHECKSUM_H_P ] = 0;
    202c:	1c a2       	std	Y+36, r1	; 0x24
	rxtx_buffer[ ICMP_CHECKSUM_L_P ] = 0;
    202e:	1d a2       	std	Y+37, r1	; 0x25

	// calculate new checksum.
	// ICMP checksum calculation begin at ICMP type to ICMP data.
	// Before calculate new checksum the checksum field must be zero.
	ck.word = software_checksum ( &rxtx_buffer[ ICMP_TYPE_P ], sizeof(ICMP_PACKET), 0 );
    2030:	c9 01       	movw	r24, r18
    2032:	68 e2       	ldi	r22, 0x28	; 40
    2034:	70 e0       	ldi	r23, 0x00	; 0
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <software_checksum>
	rxtx_buffer[ ICMP_CHECKSUM_H_P ] = ck.byte.high;
    2042:	9c a3       	std	Y+36, r25	; 0x24
	rxtx_buffer[ ICMP_CHECKSUM_L_P ] = ck.byte.low;
    2044:	8d a3       	std	Y+37, r24	; 0x25
}
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	08 95       	ret

0000204c <icmp_send_reply>:
// Function : icmp_send_reply
// Description : Send ARP reply packet to destination.
//
//*******************************************************************************************
BYTE icmp_send_reply ( BYTE *rxtx_buffer, BYTE *dest_mac, BYTE *dest_ip )
{
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	ec 01       	movw	r28, r24
    2056:	9b 01       	movw	r18, r22
    2058:	8a 01       	movw	r16, r20
	
	// check protocol is icmp or not?
	if ( rxtx_buffer [ IP_PROTO_P ] != IP_PROTO_ICMP_V )
    205a:	8f 89       	ldd	r24, Y+23	; 0x17
    205c:	81 30       	cpi	r24, 0x01	; 1
    205e:	f9 f4       	brne	.+62     	; 0x209e <icmp_send_reply+0x52>
		return 0;
	
	// check icmp packet type is echo request or not?
	if ( rxtx_buffer [ ICMP_TYPE_P ] != ICMP_TYPE_ECHOREQUEST_V )
    2060:	8a a1       	ldd	r24, Y+34	; 0x22
    2062:	88 30       	cpi	r24, 0x08	; 8
    2064:	e1 f4       	brne	.+56     	; 0x209e <icmp_send_reply+0x52>
		return 0;

	// set ethernet header
	eth_generate_header ( rxtx_buffer, (WORD_BYTES){ETH_TYPE_IP_V}, dest_mac );
    2066:	ce 01       	movw	r24, r28
    2068:	60 e0       	ldi	r22, 0x00	; 0
    206a:	78 e0       	ldi	r23, 0x08	; 8
    206c:	a9 01       	movw	r20, r18
    206e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <eth_generate_header>
	
	// generate ip header and checksum
	ip_generate_header ( rxtx_buffer, (WORD_BYTES){(rxtx_buffer[IP_TOTLEN_H_P]<<8)|rxtx_buffer[IP_TOTLEN_L_P]}, IP_PROTO_ICMP_V, dest_ip );
    2072:	78 89       	ldd	r23, Y+16	; 0x10
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	89 89       	ldd	r24, Y+17	; 0x11
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	68 2b       	or	r22, r24
    207c:	79 2b       	or	r23, r25
    207e:	ce 01       	movw	r24, r28
    2080:	41 e0       	ldi	r20, 0x01	; 1
    2082:	98 01       	movw	r18, r16
    2084:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <ip_generate_header>

	// generate icmp packet
	rxtx_buffer[ ICMP_TYPE_P ] = ICMP_TYPE_ECHOREPLY_V;
    2088:	1a a2       	std	Y+34, r1	; 0x22
	icmp_generate_packet ( rxtx_buffer );
    208a:	ce 01       	movw	r24, r28
    208c:	0e 94 06 10 	call	0x200c	; 0x200c <icmp_generate_packet>

	// send packet to ethernet media
	enc28j60_packet_send ( rxtx_buffer, sizeof(ETH_HEADER) + sizeof(IP_HEADER) + sizeof(ICMP_PACKET) );
    2090:	ce 01       	movw	r24, r28
    2092:	6a e4       	ldi	r22, 0x4A	; 74
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	0e 94 08 05 	call	0xa10	; 0xa10 <enc28j60_packet_send>
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <icmp_send_reply+0x54>
	return 1;
    209e:	80 e0       	ldi	r24, 0x00	; 0
}
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	08 95       	ret

000020aa <icmp_send_request>:
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
void icmp_send_request ( BYTE *rxtx_buffer, BYTE *dest_mac, BYTE *dest_ip )
{	
    20aa:	ef 92       	push	r14
    20ac:	ff 92       	push	r15
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	8c 01       	movw	r16, r24
    20b4:	9b 01       	movw	r18, r22
    20b6:	7a 01       	movw	r14, r20
	// set ethernet header
	eth_generate_header ( rxtx_buffer, (WORD_BYTES){ETH_TYPE_IP_V}, dest_mac );
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	78 e0       	ldi	r23, 0x08	; 8
    20bc:	a9 01       	movw	r20, r18
    20be:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <eth_generate_header>
	
	// generate ip header and checksum
	ip_generate_header (	rxtx_buffer, (WORD_BYTES){sizeof(IP_HEADER) + sizeof(ICMP_PACKET)}, IP_PROTO_ICMP_V, dest_ip );
    20c2:	c8 01       	movw	r24, r16
    20c4:	6c e3       	ldi	r22, 0x3C	; 60
    20c6:	70 e0       	ldi	r23, 0x00	; 0
    20c8:	41 e0       	ldi	r20, 0x01	; 1
    20ca:	97 01       	movw	r18, r14
    20cc:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <ip_generate_header>

	// generate icmp packet and checksum
	rxtx_buffer[ ICMP_TYPE_P ] = ICMP_TYPE_ECHOREQUEST_V;
    20d0:	88 e0       	ldi	r24, 0x08	; 8
    20d2:	f8 01       	movw	r30, r16
    20d4:	82 a3       	std	Z+34, r24	; 0x22
	rxtx_buffer[ ICMP_CODE_P ] = 0;
    20d6:	13 a2       	std	Z+35, r1	; 0x23
	rxtx_buffer[ ICMP_IDENTIFIER_H_P ] = icmp_id;
    20d8:	80 91 63 00 	lds	r24, 0x0063
    20dc:	86 a3       	std	Z+38, r24	; 0x26
	rxtx_buffer[ ICMP_IDENTIFIER_L_P ] = 0;
    20de:	17 a2       	std	Z+39, r1	; 0x27
	rxtx_buffer[ ICMP_SEQUENCE_H_P ] = icmp_seq;
    20e0:	80 91 64 00 	lds	r24, 0x0064
    20e4:	80 a7       	std	Z+40, r24	; 0x28
	rxtx_buffer[ ICMP_SEQUENCE_L_P ] = 0;
    20e6:	11 a6       	std	Z+41, r1	; 0x29
	icmp_id++;
    20e8:	80 91 63 00 	lds	r24, 0x0063
    20ec:	8f 5f       	subi	r24, 0xFF	; 255
    20ee:	80 93 63 00 	sts	0x0063, r24
	icmp_seq++;
    20f2:	80 91 64 00 	lds	r24, 0x0064
    20f6:	8f 5f       	subi	r24, 0xFF	; 255
    20f8:	80 93 64 00 	sts	0x0064, r24
	icmp_generate_packet ( rxtx_buffer );	
    20fc:	c8 01       	movw	r24, r16
    20fe:	0e 94 06 10 	call	0x200c	; 0x200c <icmp_generate_packet>

	// send packet to ethernet media
	enc28j60_packet_send ( rxtx_buffer, sizeof(ETH_HEADER) + sizeof(IP_HEADER) + sizeof(ICMP_PACKET) );
    2102:	c8 01       	movw	r24, r16
    2104:	6a e4       	ldi	r22, 0x4A	; 74
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	0e 94 08 05 	call	0xa10	; 0xa10 <enc28j60_packet_send>
}
    210c:	1f 91       	pop	r17
    210e:	0f 91       	pop	r16
    2110:	ff 90       	pop	r15
    2112:	ef 90       	pop	r14
    2114:	08 95       	ret

00002116 <icmp_ping>:
// Function : icmp_ping_server
// Description : Send ARP reply packet to destination.
//
//*******************************************************************************************
BYTE icmp_ping ( BYTE *rxtx_buffer, BYTE *dest_mac, BYTE *dest_ip )
{
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	ec 01       	movw	r28, r24
    2124:	8a 01       	movw	r16, r20
	BYTE i;
	WORD dlength;
	
	// destination ip was not found on network.
	if ( arp_who_is ( rxtx_buffer, dest_mac, dest_ip ) == 0 )
    2126:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <arp_who_is>
    212a:	88 23       	and	r24, r24
    212c:	01 f1       	breq	.+64     	; 0x216e <icmp_ping+0x58>
		return 0;

	// send icmp request packet (ping) to server
	icmp_send_request ( rxtx_buffer, (BYTE*)&server_mac, dest_ip );
    212e:	ce 01       	movw	r24, r28
    2130:	66 e3       	ldi	r22, 0x36	; 54
    2132:	71 e0       	ldi	r23, 0x01	; 1
    2134:	a8 01       	movw	r20, r16
    2136:	0e 94 55 10 	call	0x20aa	; 0x20aa <icmp_send_request>
    213a:	10 e0       	ldi	r17, 0x00	; 0
    213c:	80 e4       	ldi	r24, 0x40	; 64
    213e:	e8 2e       	mov	r14, r24
    2140:	8c e9       	ldi	r24, 0x9C	; 156
    2142:	f8 2e       	mov	r15, r24
    2144:	c7 01       	movw	r24, r14
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <icmp_ping+0x30>

	for ( i=0; i<10; i++ )
	{
		_delay_ms( 10 );
		dlength = enc28j60_packet_receive( rxtx_buffer, MAX_RXTX_BUFFER );
    214a:	ce 01       	movw	r24, r28
    214c:	6e ee       	ldi	r22, 0xEE	; 238
    214e:	75 e0       	ldi	r23, 0x05	; 5
    2150:	0e 94 4d 05 	call	0xa9a	; 0xa9a <enc28j60_packet_receive>

		if ( dlength )
    2154:	89 2b       	or	r24, r25
    2156:	41 f0       	breq	.+16     	; 0x2168 <icmp_ping+0x52>
		{
			// check protocol is icmp or not?
			if ( rxtx_buffer [ IP_PROTO_P ] != IP_PROTO_ICMP_V )
    2158:	8f 89       	ldd	r24, Y+23	; 0x17
    215a:	81 30       	cpi	r24, 0x01	; 1
    215c:	29 f4       	brne	.+10     	; 0x2168 <icmp_ping+0x52>
				continue;
	
			// check icmp packet type is echo reply or not?
			if ( rxtx_buffer [ ICMP_TYPE_P ] != ICMP_TYPE_ECHOREPLY_V )
    215e:	8a a1       	ldd	r24, Y+34	; 0x22
    2160:	88 23       	and	r24, r24
    2162:	11 f4       	brne	.+4      	; 0x2168 <icmp_ping+0x52>
				continue;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	04 c0       	rjmp	.+8      	; 0x2170 <icmp_ping+0x5a>
		return 0;

	// send icmp request packet (ping) to server
	icmp_send_request ( rxtx_buffer, (BYTE*)&server_mac, dest_ip );

	for ( i=0; i<10; i++ )
    2168:	1f 5f       	subi	r17, 0xFF	; 255
    216a:	1a 30       	cpi	r17, 0x0A	; 10
    216c:	59 f7       	brne	.-42     	; 0x2144 <icmp_ping+0x2e>
    216e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// time out
	return 0;
}
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	ff 90       	pop	r15
    217a:	ef 90       	pop	r14
    217c:	08 95       	ret

0000217e <my_strcpy>:
// Description : copy string (end '\0') from program memory to ram and return pointer
// to end of string
//
//*****************************************************************************************
BYTE *my_strcpy ( BYTE *dest, PGM_P src )
{
    217e:	dc 01       	movw	r26, r24
    2180:	01 c0       	rjmp	.+2      	; 0x2184 <my_strcpy+0x6>
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
	{
		*dest++ = ch;
    2182:	8d 93       	st	X+, r24
    2184:	fb 01       	movw	r30, r22
//*****************************************************************************************
BYTE *my_strcpy ( BYTE *dest, PGM_P src )
{
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
    2186:	6f 5f       	subi	r22, 0xFF	; 255
    2188:	7f 4f       	sbci	r23, 0xFF	; 255
    218a:	84 91       	lpm	r24, Z+
    218c:	88 23       	and	r24, r24
    218e:	c9 f7       	brne	.-14     	; 0x2182 <my_strcpy+0x4>
	{
		*dest++ = ch;
	}
	return dest;
}
    2190:	cd 01       	movw	r24, r26
    2192:	08 95       	ret

00002194 <print_decimal>:
// Function : print_decimal
// Description : Print decimal to buffer, up to 5 digits
//
//*****************************************************************************************
BYTE * print_decimal ( BYTE *ptr, BYTE digit, WORD dec )
{
    2194:	1f 93       	push	r17
    2196:	fc 01       	movw	r30, r24
    2198:	16 2f       	mov	r17, r22
    219a:	9a 01       	movw	r18, r20
	if ( digit >= 5 )
    219c:	65 30       	cpi	r22, 0x05	; 5
    219e:	38 f0       	brcs	.+14     	; 0x21ae <print_decimal+0x1a>
		*ptr++ = ( (dec/10000) + '0' );
    21a0:	ca 01       	movw	r24, r20
    21a2:	60 e1       	ldi	r22, 0x10	; 16
    21a4:	77 e2       	ldi	r23, 0x27	; 39
    21a6:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__udivmodhi4>
    21aa:	60 5d       	subi	r22, 0xD0	; 208
    21ac:	61 93       	st	Z+, r22
	if ( digit >= 4 )
    21ae:	14 30       	cpi	r17, 0x04	; 4
    21b0:	58 f0       	brcs	.+22     	; 0x21c8 <print_decimal+0x34>
		*ptr++ = ( ((dec%10000)/1000) + '0' );
    21b2:	c9 01       	movw	r24, r18
    21b4:	60 e1       	ldi	r22, 0x10	; 16
    21b6:	77 e2       	ldi	r23, 0x27	; 39
    21b8:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__udivmodhi4>
    21bc:	68 ee       	ldi	r22, 0xE8	; 232
    21be:	73 e0       	ldi	r23, 0x03	; 3
    21c0:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__udivmodhi4>
    21c4:	60 5d       	subi	r22, 0xD0	; 208
    21c6:	61 93       	st	Z+, r22
	if ( digit >= 3 )
    21c8:	13 30       	cpi	r17, 0x03	; 3
    21ca:	58 f0       	brcs	.+22     	; 0x21e2 <print_decimal+0x4e>
		*ptr++ = ( ((dec%1000)/100) + '0' );
    21cc:	c9 01       	movw	r24, r18
    21ce:	68 ee       	ldi	r22, 0xE8	; 232
    21d0:	73 e0       	ldi	r23, 0x03	; 3
    21d2:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__udivmodhi4>
    21d6:	64 e6       	ldi	r22, 0x64	; 100
    21d8:	70 e0       	ldi	r23, 0x00	; 0
    21da:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__udivmodhi4>
    21de:	60 5d       	subi	r22, 0xD0	; 208
    21e0:	61 93       	st	Z+, r22
	if ( digit >= 2 )
    21e2:	12 30       	cpi	r17, 0x02	; 2
    21e4:	58 f0       	brcs	.+22     	; 0x21fc <print_decimal+0x68>
		*ptr++ = ( ((dec%100)/10) + '0' );
    21e6:	c9 01       	movw	r24, r18
    21e8:	64 e6       	ldi	r22, 0x64	; 100
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    21ec:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__udivmodhi4>
    21f0:	6a e0       	ldi	r22, 0x0A	; 10
    21f2:	70 e0       	ldi	r23, 0x00	; 0
    21f4:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__udivmodhi4>
    21f8:	60 5d       	subi	r22, 0xD0	; 208
    21fa:	61 93       	st	Z+, r22
	*ptr++ = ( ((dec%10)) + '0' );
    21fc:	c9 01       	movw	r24, r18
    21fe:	6a e0       	ldi	r22, 0x0A	; 10
    2200:	70 e0       	ldi	r23, 0x00	; 0
    2202:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__udivmodhi4>
    2206:	80 5d       	subi	r24, 0xD0	; 208
    2208:	81 93       	st	Z+, r24

	return ptr;
}
    220a:	cf 01       	movw	r24, r30
    220c:	1f 91       	pop	r17
    220e:	08 95       	ret

00002210 <print_ip>:
// Function : print_ip
// Description : Print ip address format to buffer e.g. 10.1.1.1
//
//*****************************************************************************************
void print_ip ( BYTE *ptr, BYTE *ip, BYTE cursor )
{
    2210:	cf 92       	push	r12
    2212:	df 92       	push	r13
    2214:	ef 92       	push	r14
    2216:	ff 92       	push	r15
    2218:	0f 93       	push	r16
    221a:	1f 93       	push	r17
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
    2220:	dc 01       	movw	r26, r24
    2222:	7b 01       	movw	r14, r22
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	90 e0       	ldi	r25, 0x00	; 0
		else if ( temp > 9 )
			digit = 2;
		else
			digit = 1;
		
		if ( (i+1) == cursor )
    2228:	04 2f       	mov	r16, r20
    222a:	10 e0       	ldi	r17, 0x00	; 0
			*ptr = ASCII_CURSOR;
			ptr++;
		}
		else if ( i > 0 )
		{
			*ptr = '.';
    222c:	3e e2       	ldi	r19, 0x2E	; 46
    222e:	c3 2e       	mov	r12, r19
		else
			digit = 1;
		
		if ( (i+1) == cursor )
		{
			*ptr = ASCII_CURSOR;
    2230:	2e e7       	ldi	r18, 0x7E	; 126
    2232:	d2 2e       	mov	r13, r18
{
	BYTE i, digit, temp;

	for ( i=0; i<4; i++ )
	{
		temp = ip [ i ];
    2234:	f7 01       	movw	r30, r14
    2236:	e8 0f       	add	r30, r24
    2238:	f9 1f       	adc	r31, r25
    223a:	40 81       	ld	r20, Z
		if ( temp > 99 )
    223c:	44 36       	cpi	r20, 0x64	; 100
    223e:	10 f0       	brcs	.+4      	; 0x2244 <print_ip+0x34>
    2240:	63 e0       	ldi	r22, 0x03	; 3
    2242:	05 c0       	rjmp	.+10     	; 0x224e <print_ip+0x3e>
			digit = 3;
		else if ( temp > 9 )
    2244:	4a 30       	cpi	r20, 0x0A	; 10
    2246:	10 f4       	brcc	.+4      	; 0x224c <print_ip+0x3c>
    2248:	61 e0       	ldi	r22, 0x01	; 1
    224a:	01 c0       	rjmp	.+2      	; 0x224e <print_ip+0x3e>
    224c:	62 e0       	ldi	r22, 0x02	; 2
// Function : print_ip
// Description : Print ip address format to buffer e.g. 10.1.1.1
//
//*****************************************************************************************
void print_ip ( BYTE *ptr, BYTE *ip, BYTE cursor )
{
    224e:	ec 01       	movw	r28, r24
    2250:	21 96       	adiw	r28, 0x01	; 1
		else if ( temp > 9 )
			digit = 2;
		else
			digit = 1;
		
		if ( (i+1) == cursor )
    2252:	c0 17       	cp	r28, r16
    2254:	d1 07       	cpc	r29, r17
    2256:	11 f4       	brne	.+4      	; 0x225c <print_ip+0x4c>
		{
			*ptr = ASCII_CURSOR;
    2258:	dd 92       	st	X+, r13
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <print_ip+0x50>
			ptr++;
		}
		else if ( i > 0 )
    225c:	81 11       	cpse	r24, r1
		{
			*ptr = '.';
    225e:	cd 92       	st	X+, r12
			ptr++;
		}
		ptr = print_decimal ( ptr, digit, temp );
    2260:	cd 01       	movw	r24, r26
    2262:	50 e0       	ldi	r21, 0x00	; 0
    2264:	0e 94 ca 10 	call	0x2194	; 0x2194 <print_decimal>
    2268:	dc 01       	movw	r26, r24
//*****************************************************************************************
void print_ip ( BYTE *ptr, BYTE *ip, BYTE cursor )
{
	BYTE i, digit, temp;

	for ( i=0; i<4; i++ )
    226a:	c4 30       	cpi	r28, 0x04	; 4
    226c:	d1 05       	cpc	r29, r1
    226e:	11 f0       	breq	.+4      	; 0x2274 <print_ip+0x64>
    2270:	ce 01       	movw	r24, r28
    2272:	e0 cf       	rjmp	.-64     	; 0x2234 <print_ip+0x24>
			ptr++;
		}
		ptr = print_decimal ( ptr, digit, temp );

	}
	*ptr = '\0';
    2274:	1c 92       	st	X, r1
}//*****************************************************************************************
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	1f 91       	pop	r17
    227c:	0f 91       	pop	r16
    227e:	ff 90       	pop	r15
    2280:	ef 90       	pop	r14
    2282:	df 90       	pop	r13
    2284:	cf 90       	pop	r12
    2286:	08 95       	ret

00002288 <turn_devices>:
// Description : Print devices format to buffer e.g. 10.1.1.1
//
//*****************************************************************************************
void turn_devices (  BYTE cursor)
{	
	if(cursor==0){
    2288:	88 23       	and	r24, r24
    228a:	31 f4       	brne	.+12     	; 0x2298 <turn_devices+0x10>
		if( (LED_PORT & _BV ( LED_PIN1 ))){
    228c:	af 9b       	sbis	0x15, 7	; 21
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <turn_devices+0xc>
			LED_PORT &= ~_BV ( LED_PIN1 );
    2290:	af 98       	cbi	0x15, 7	; 21
    2292:	08 95       	ret
		}else{
			LED_PORT |= _BV ( LED_PIN1 );
    2294:	af 9a       	sbi	0x15, 7	; 21
    2296:	08 95       	ret
		}	

	}else if(cursor==1){
    2298:	81 30       	cpi	r24, 0x01	; 1
    229a:	31 f4       	brne	.+12     	; 0x22a8 <turn_devices+0x20>
		if( (LED_PORT & _BV ( LED_PIN2 ))){
    229c:	ae 9b       	sbis	0x15, 6	; 21
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <turn_devices+0x1c>
			LED_PORT &= ~_BV ( LED_PIN2 );
    22a0:	ae 98       	cbi	0x15, 6	; 21
    22a2:	08 95       	ret
		}else{
			LED_PORT |= _BV ( LED_PIN2 );
    22a4:	ae 9a       	sbi	0x15, 6	; 21
    22a6:	08 95       	ret
		}
	}else if(cursor==2){
    22a8:	82 30       	cpi	r24, 0x02	; 2
    22aa:	31 f4       	brne	.+12     	; 0x22b8 <turn_devices+0x30>
		if( (LED_PORT & _BV ( LED_PIN3 ))){
    22ac:	ad 9b       	sbis	0x15, 5	; 21
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <turn_devices+0x2c>
			LED_PORT &= ~_BV ( LED_PIN3 );
    22b0:	ad 98       	cbi	0x15, 5	; 21
    22b2:	08 95       	ret
		}else{
			LED_PORT |= _BV ( LED_PIN3 );
    22b4:	ad 9a       	sbi	0x15, 5	; 21
    22b6:	08 95       	ret
		}
	}else if(cursor==3){
    22b8:	83 30       	cpi	r24, 0x03	; 3
    22ba:	31 f4       	brne	.+12     	; 0x22c8 <turn_devices+0x40>
		if( (LED_PORT & _BV ( LED_PIN4 ))){
    22bc:	ac 9b       	sbis	0x15, 4	; 21
    22be:	02 c0       	rjmp	.+4      	; 0x22c4 <turn_devices+0x3c>
			LED_PORT &= ~_BV ( LED_PIN4 );
    22c0:	ac 98       	cbi	0x15, 4	; 21
    22c2:	08 95       	ret
		}else{
			LED_PORT |= _BV ( LED_PIN4 );
    22c4:	ac 9a       	sbi	0x15, 4	; 21
    22c6:	08 95       	ret
		}
	}else if(cursor==4){
    22c8:	84 30       	cpi	r24, 0x04	; 4
    22ca:	31 f4       	brne	.+12     	; 0x22d8 <turn_devices+0x50>
		if( (LED_PORT & _BV ( LED_PIN5 ))){
    22cc:	ab 9b       	sbis	0x15, 3	; 21
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <turn_devices+0x4c>
			LED_PORT &= ~_BV ( LED_PIN5 );
    22d0:	ab 98       	cbi	0x15, 3	; 21
    22d2:	08 95       	ret
		}else{
			LED_PORT |= _BV ( LED_PIN5 );
    22d4:	ab 9a       	sbi	0x15, 3	; 21
    22d6:	08 95       	ret
		}
	}else if(cursor==5){
    22d8:	85 30       	cpi	r24, 0x05	; 5
    22da:	29 f4       	brne	.+10     	; 0x22e6 <turn_devices+0x5e>
		if( (LED_PORT & _BV ( LED_PIN6 ))){
    22dc:	aa 9b       	sbis	0x15, 2	; 21
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <turn_devices+0x5c>
			LED_PORT &= ~_BV ( LED_PIN6 );
    22e0:	aa 98       	cbi	0x15, 2	; 21
    22e2:	08 95       	ret
		}else{
			LED_PORT |= _BV ( LED_PIN6 );
    22e4:	aa 9a       	sbi	0x15, 2	; 21
    22e6:	08 95       	ret

000022e8 <print_devices>:
// Function : print_devices
//
//
//*****************************************************************************************
void print_devices ( BYTE *ptr, BYTE cursor)
{	BYTE i;
    22e8:	dc 01       	movw	r26, r24
    22ea:	20 e0       	ldi	r18, 0x00	; 0
				*ptr++ ='F';
		}else if(i==5){
			if ( (LED_PORT & _BV ( LED_PIN6 )) )
				*ptr++ ='0';
			else
				*ptr++ ='F';
    22ec:	46 e4       	ldi	r20, 0x46	; 70
				*ptr++ ='0';
			else
				*ptr++ ='F';
		}else if(i==5){
			if ( (LED_PORT & _BV ( LED_PIN6 )) )
				*ptr++ ='0';
    22ee:	30 e3       	ldi	r19, 0x30	; 48
		}else if ( (i == cursor)&&(i!=0) ){
			*ptr++ = ' ';
			*ptr++ = ASCII_CURSOR;
		}else if(i!=0){
		
			*ptr++ = ' ';
    22f0:	50 e2       	ldi	r21, 0x20	; 32
			*ptr++ = ASCII_CURSOR;
		}else if ( ( cursor==0)&&(i==1) ){
			*ptr++ = ' ';
		}else if ( (i == cursor)&&(i!=0) ){
			*ptr++ = ' ';
			*ptr++ = ASCII_CURSOR;
    22f2:	7e e7       	ldi	r23, 0x7E	; 126
//*****************************************************************************************
void print_devices ( BYTE *ptr, BYTE cursor)
{	BYTE i;
	for ( i=0; i<6; i++ )
	{
		if ( (i == cursor)&&(i==0) ){
    22f4:	26 17       	cp	r18, r22
    22f6:	39 f4       	brne	.+14     	; 0x2306 <print_devices+0x1e>
    22f8:	cd 01       	movw	r24, r26
    22fa:	01 96       	adiw	r24, 0x01	; 1
    22fc:	22 23       	and	r18, r18
    22fe:	51 f4       	brne	.+20     	; 0x2314 <print_devices+0x2c>
			*ptr++ = ASCII_CURSOR;
    2300:	7c 93       	st	X, r23
    2302:	dc 01       	movw	r26, r24
    2304:	16 c0       	rjmp	.+44     	; 0x2332 <print_devices+0x4a>
		}else if ( ( cursor==0)&&(i==1) ){
    2306:	66 23       	and	r22, r22
    2308:	51 f4       	brne	.+20     	; 0x231e <print_devices+0x36>
    230a:	21 30       	cpi	r18, 0x01	; 1
    230c:	41 f4       	brne	.+16     	; 0x231e <print_devices+0x36>
			*ptr++ = ' ';
    230e:	fd 01       	movw	r30, r26
    2310:	51 93       	st	Z+, r21
    2312:	17 c0       	rjmp	.+46     	; 0x2342 <print_devices+0x5a>
		}else if ( (i == cursor)&&(i!=0) ){
			*ptr++ = ' ';
    2314:	5c 93       	st	X, r21
			*ptr++ = ASCII_CURSOR;
    2316:	11 96       	adiw	r26, 0x01	; 1
    2318:	7c 93       	st	X, r23
    231a:	fc 01       	movw	r30, r24
    231c:	06 c0       	rjmp	.+12     	; 0x232a <print_devices+0x42>
		}else if(i!=0){
    231e:	22 23       	and	r18, r18
    2320:	41 f0       	breq	.+16     	; 0x2332 <print_devices+0x4a>
		
			*ptr++ = ' ';
    2322:	fd 01       	movw	r30, r26
    2324:	51 93       	st	Z+, r21
			*ptr++ = ' ';
    2326:	11 96       	adiw	r26, 0x01	; 1
    2328:	5c 93       	st	X, r21
    232a:	31 96       	adiw	r30, 0x01	; 1
		if(i==0){
			if ( (LED_PORT & _BV ( LED_PIN1 )) )
				*ptr++ ='0';
			else
				*ptr++ ='F';
		}else if(i==1){
    232c:	21 30       	cpi	r18, 0x01	; 1
    232e:	71 f4       	brne	.+28     	; 0x234c <print_devices+0x64>
    2330:	08 c0       	rjmp	.+16     	; 0x2342 <print_devices+0x5a>
    2332:	cd 01       	movw	r24, r26
    2334:	01 96       	adiw	r24, 0x01	; 1
		
			*ptr++ = ' ';
			*ptr++ = ' ';
		}
		if(i==0){
			if ( (LED_PORT & _BV ( LED_PIN1 )) )
    2336:	af 9b       	sbis	0x15, 7	; 21
    2338:	02 c0       	rjmp	.+4      	; 0x233e <print_devices+0x56>
				*ptr++ ='0';
    233a:	3c 93       	st	X, r19
    233c:	23 c0       	rjmp	.+70     	; 0x2384 <print_devices+0x9c>
			else
				*ptr++ ='F';
    233e:	4c 93       	st	X, r20
    2340:	21 c0       	rjmp	.+66     	; 0x2384 <print_devices+0x9c>
    2342:	cf 01       	movw	r24, r30
    2344:	01 96       	adiw	r24, 0x01	; 1
		}else if(i==1){
			if ( (LED_PORT & _BV ( LED_PIN2 )) )
    2346:	ae 9b       	sbis	0x15, 6	; 21
    2348:	1c c0       	rjmp	.+56     	; 0x2382 <print_devices+0x9a>
    234a:	19 c0       	rjmp	.+50     	; 0x237e <print_devices+0x96>
				*ptr++ ='0';
			else
				*ptr++ ='F';
		}else if(i==2){
    234c:	22 30       	cpi	r18, 0x02	; 2
    234e:	29 f4       	brne	.+10     	; 0x235a <print_devices+0x72>
    2350:	cf 01       	movw	r24, r30
    2352:	01 96       	adiw	r24, 0x01	; 1
			if ( (LED_PORT & _BV ( LED_PIN3 )) )
    2354:	ad 9b       	sbis	0x15, 5	; 21
    2356:	15 c0       	rjmp	.+42     	; 0x2382 <print_devices+0x9a>
    2358:	12 c0       	rjmp	.+36     	; 0x237e <print_devices+0x96>
				*ptr++ ='0';
			else
				*ptr++ ='F';
		}else if(i==3){
    235a:	23 30       	cpi	r18, 0x03	; 3
    235c:	29 f4       	brne	.+10     	; 0x2368 <print_devices+0x80>
    235e:	cf 01       	movw	r24, r30
    2360:	01 96       	adiw	r24, 0x01	; 1
			if ( (LED_PORT & _BV ( LED_PIN4 )) )
    2362:	ac 9b       	sbis	0x15, 4	; 21
    2364:	0e c0       	rjmp	.+28     	; 0x2382 <print_devices+0x9a>
    2366:	0b c0       	rjmp	.+22     	; 0x237e <print_devices+0x96>
				*ptr++ ='0';
			else
				*ptr++ ='F';
		}else if(i==4){
    2368:	24 30       	cpi	r18, 0x04	; 4
    236a:	29 f4       	brne	.+10     	; 0x2376 <print_devices+0x8e>
    236c:	cf 01       	movw	r24, r30
    236e:	01 96       	adiw	r24, 0x01	; 1
			if ( (LED_PORT & _BV ( LED_PIN5 )) )
    2370:	ab 9b       	sbis	0x15, 3	; 21
    2372:	07 c0       	rjmp	.+14     	; 0x2382 <print_devices+0x9a>
    2374:	04 c0       	rjmp	.+8      	; 0x237e <print_devices+0x96>
    2376:	cf 01       	movw	r24, r30
    2378:	01 96       	adiw	r24, 0x01	; 1
				*ptr++ ='0';
			else
				*ptr++ ='F';
		}else if(i==5){
			if ( (LED_PORT & _BV ( LED_PIN6 )) )
    237a:	aa 9b       	sbis	0x15, 2	; 21
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <print_devices+0x9a>
				*ptr++ ='0';
    237e:	30 83       	st	Z, r19
    2380:	01 c0       	rjmp	.+2      	; 0x2384 <print_devices+0x9c>
			else
				*ptr++ ='F';
    2382:	40 83       	st	Z, r20
    2384:	dc 01       	movw	r26, r24
//
//
//*****************************************************************************************
void print_devices ( BYTE *ptr, BYTE cursor)
{	BYTE i;
	for ( i=0; i<6; i++ )
    2386:	2f 5f       	subi	r18, 0xFF	; 255
    2388:	26 30       	cpi	r18, 0x06	; 6
    238a:	09 f0       	breq	.+2      	; 0x238e <print_devices+0xa6>
    238c:	b3 cf       	rjmp	.-154    	; 0x22f4 <print_devices+0xc>
				*ptr++ ='F';
		}
		//*ptr++ = ' ';
		//ptr = print_decimal ( ptr, 1, i++ );
	}
	*ptr = '\0';
    238e:	1c 92       	st	X, r1
}
    2390:	08 95       	ret

00002392 <print_timeout>:
// Function : print_timeout
// Description : Print timeout display light
//
//*****************************************************************************************
void print_timeout (BYTE *ptr,  BYTE cursor )
{
    2392:	dc 01       	movw	r26, r24
	BYTE digit;
	if ( screen_timeout > 99 )
    2394:	80 91 65 00 	lds	r24, 0x0065
    2398:	84 36       	cpi	r24, 0x64	; 100
    239a:	10 f0       	brcs	.+4      	; 0x23a0 <print_timeout+0xe>
    239c:	63 e0       	ldi	r22, 0x03	; 3
    239e:	05 c0       	rjmp	.+10     	; 0x23aa <print_timeout+0x18>
		digit = 3;
	else if ( screen_timeout > 9 )
    23a0:	8a 30       	cpi	r24, 0x0A	; 10
    23a2:	10 f4       	brcc	.+4      	; 0x23a8 <print_timeout+0x16>
    23a4:	61 e0       	ldi	r22, 0x01	; 1
    23a6:	01 c0       	rjmp	.+2      	; 0x23aa <print_timeout+0x18>
    23a8:	62 e0       	ldi	r22, 0x02	; 2
		digit = 2;
	else
		digit = 1;
	
	*ptr = ASCII_CURSOR;
    23aa:	fd 01       	movw	r30, r26
    23ac:	8e e7       	ldi	r24, 0x7E	; 126
    23ae:	81 93       	st	Z+, r24
	ptr++;
	if(screen_timeout==0){
    23b0:	40 91 65 00 	lds	r20, 0x0065
    23b4:	44 23       	and	r20, r20
    23b6:	a9 f4       	brne	.+42     	; 0x23e2 <print_timeout+0x50>
		*ptr++ = 'N';
    23b8:	8e e4       	ldi	r24, 0x4E	; 78
    23ba:	11 96       	adiw	r26, 0x01	; 1
    23bc:	8c 93       	st	X, r24
    23be:	df 01       	movw	r26, r30
    23c0:	11 96       	adiw	r26, 0x01	; 1
		*ptr++ = 'e';
    23c2:	95 e6       	ldi	r25, 0x65	; 101
    23c4:	91 83       	std	Z+1, r25	; 0x01
    23c6:	fd 01       	movw	r30, r26
    23c8:	31 96       	adiw	r30, 0x01	; 1
		*ptr++ = 'v';
    23ca:	86 e7       	ldi	r24, 0x76	; 118
    23cc:	11 96       	adiw	r26, 0x01	; 1
    23ce:	8c 93       	st	X, r24
    23d0:	df 01       	movw	r26, r30
    23d2:	11 96       	adiw	r26, 0x01	; 1
		*ptr++ = 'e';
    23d4:	91 83       	std	Z+1, r25	; 0x01
		*ptr++ = 'r';
    23d6:	82 e7       	ldi	r24, 0x72	; 114
    23d8:	11 96       	adiw	r26, 0x01	; 1
    23da:	8c 93       	st	X, r24
    23dc:	11 97       	sbiw	r26, 0x01	; 1
    23de:	fd 01       	movw	r30, r26
    23e0:	1f c0       	rjmp	.+62     	; 0x2420 <print_timeout+0x8e>
	
	}else{
		ptr = print_decimal ( ptr, digit, screen_timeout );
    23e2:	cf 01       	movw	r24, r30
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	0e 94 ca 10 	call	0x2194	; 0x2194 <print_decimal>
    23ea:	dc 01       	movw	r26, r24
		*ptr++ = ' ';
    23ec:	fc 01       	movw	r30, r24
    23ee:	80 e2       	ldi	r24, 0x20	; 32
    23f0:	81 93       	st	Z+, r24
		*ptr++ = 's';
    23f2:	83 e7       	ldi	r24, 0x73	; 115
    23f4:	11 96       	adiw	r26, 0x01	; 1
    23f6:	8c 93       	st	X, r24
    23f8:	df 01       	movw	r26, r30
    23fa:	11 96       	adiw	r26, 0x01	; 1
		*ptr++ = 'e';
    23fc:	85 e6       	ldi	r24, 0x65	; 101
    23fe:	81 83       	std	Z+1, r24	; 0x01
    2400:	fd 01       	movw	r30, r26
    2402:	31 96       	adiw	r30, 0x01	; 1
		*ptr++ = 'c';
    2404:	83 e6       	ldi	r24, 0x63	; 99
    2406:	11 96       	adiw	r26, 0x01	; 1
    2408:	8c 93       	st	X, r24
    240a:	df 01       	movw	r26, r30
    240c:	11 96       	adiw	r26, 0x01	; 1
		*ptr++ = 'o';
    240e:	8f e6       	ldi	r24, 0x6F	; 111
    2410:	81 83       	std	Z+1, r24	; 0x01
    2412:	fd 01       	movw	r30, r26
    2414:	31 96       	adiw	r30, 0x01	; 1
		*ptr++ = 'n';
    2416:	8e e6       	ldi	r24, 0x6E	; 110
    2418:	11 96       	adiw	r26, 0x01	; 1
    241a:	8c 93       	st	X, r24
		*ptr++ = 'd';
    241c:	84 e6       	ldi	r24, 0x64	; 100
    241e:	81 83       	std	Z+1, r24	; 0x01
    2420:	32 96       	adiw	r30, 0x02	; 2
	}
	*ptr = '\0';
    2422:	10 82       	st	Z, r1
}
    2424:	08 95       	ret

00002426 <print_time>:
// Function : print_time
// Description : Print time format to buffer e.g. 01:23:45
//
//*****************************************************************************************
void print_time ( BYTE *ptr, BYTE *time, BYTE cursor )
{
    2426:	cf 92       	push	r12
    2428:	df 92       	push	r13
    242a:	ef 92       	push	r14
    242c:	ff 92       	push	r15
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	dc 01       	movw	r26, r24
    2438:	fb 01       	movw	r30, r22
	BYTE i;
	
	// show setting cursor when enter to setting mode
	if ( cursor == 0 )
    243a:	44 23       	and	r20, r20
    243c:	f1 f4       	brne	.+60     	; 0x247a <print_time+0x54>
	{
		if ( time [ 0 ] )
    243e:	80 81       	ld	r24, Z
    2440:	88 23       	and	r24, r24
    2442:	89 f0       	breq	.+34     	; 0x2466 <print_time+0x40>
		{
			time++;
    2444:	eb 01       	movw	r28, r22
    2446:	21 96       	adiw	r28, 0x01	; 1
    2448:	10 e0       	ldi	r17, 0x00	; 0
				{
					*ptr++ = ASCII_CURSOR;
				}
				else if ( i > 0 )
				{
					*ptr++ = ':';
    244a:	0a e3       	ldi	r16, 0x3A	; 58
    244c:	01 c0       	rjmp	.+2      	; 0x2450 <print_time+0x2a>
    244e:	0d 93       	st	X+, r16
				}
				ptr = print_decimal ( ptr, 2, *time++ );
    2450:	49 91       	ld	r20, Y+
    2452:	cd 01       	movw	r24, r26
    2454:	62 e0       	ldi	r22, 0x02	; 2
    2456:	50 e0       	ldi	r21, 0x00	; 0
    2458:	0e 94 ca 10 	call	0x2194	; 0x2194 <print_decimal>
    245c:	dc 01       	movw	r26, r24
	if ( cursor == 0 )
	{
		if ( time [ 0 ] )
		{
			time++;
			for ( i=0; i<3; i++ )
    245e:	1f 5f       	subi	r17, 0xFF	; 255
    2460:	13 30       	cpi	r17, 0x03	; 3
    2462:	a9 f7       	brne	.-22     	; 0x244e <print_time+0x28>
    2464:	44 c0       	rjmp	.+136    	; 0x24ee <print_time+0xc8>
				ptr = print_decimal ( ptr, 2, *time++ );
			}
		}
		else
		{
			ptr = my_strcpy ( ptr, (PGM_P)str_disable );
    2466:	8d ed       	ldi	r24, 0xDD	; 221
    2468:	95 e0       	ldi	r25, 0x05	; 5
    246a:	01 c0       	rjmp	.+2      	; 0x246e <print_time+0x48>
{
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
	{
		*dest++ = ch;
    246c:	2d 93       	st	X+, r18
    246e:	fc 01       	movw	r30, r24
//*****************************************************************************************
BYTE *my_strcpy ( BYTE *dest, PGM_P src )
{
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
    2470:	01 96       	adiw	r24, 0x01	; 1
    2472:	24 91       	lpm	r18, Z+
    2474:	22 23       	and	r18, r18
    2476:	d1 f7       	brne	.-12     	; 0x246c <print_time+0x46>
    2478:	3a c0       	rjmp	.+116    	; 0x24ee <print_time+0xc8>
			ptr = my_strcpy ( ptr, (PGM_P)str_disable );
		}
	}
	else
	{
		if ( cursor == 1 )
    247a:	41 30       	cpi	r20, 0x01	; 1
    247c:	c9 f4       	brne	.+50     	; 0x24b0 <print_time+0x8a>
		{
			*ptr++ = ASCII_CURSOR;
    247e:	8e e7       	ldi	r24, 0x7E	; 126
    2480:	8d 93       	st	X+, r24
			// show Enable/Disable send temparature to server
			if ( time [ 0 ] )
    2482:	80 81       	ld	r24, Z
    2484:	88 23       	and	r24, r24
    2486:	51 f0       	breq	.+20     	; 0x249c <print_time+0x76>
				ptr = my_strcpy ( ptr, (PGM_P)str_enable );
    2488:	86 ed       	ldi	r24, 0xD6	; 214
    248a:	95 e0       	ldi	r25, 0x05	; 5
    248c:	01 c0       	rjmp	.+2      	; 0x2490 <print_time+0x6a>
{
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
	{
		*dest++ = ch;
    248e:	2d 93       	st	X+, r18
    2490:	fc 01       	movw	r30, r24
//*****************************************************************************************
BYTE *my_strcpy ( BYTE *dest, PGM_P src )
{
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
    2492:	01 96       	adiw	r24, 0x01	; 1
    2494:	24 91       	lpm	r18, Z+
    2496:	22 23       	and	r18, r18
    2498:	d1 f7       	brne	.-12     	; 0x248e <print_time+0x68>
    249a:	29 c0       	rjmp	.+82     	; 0x24ee <print_time+0xc8>
			*ptr++ = ASCII_CURSOR;
			// show Enable/Disable send temparature to server
			if ( time [ 0 ] )
				ptr = my_strcpy ( ptr, (PGM_P)str_enable );
			else
				ptr = my_strcpy ( ptr, (PGM_P)str_disable );
    249c:	8d ed       	ldi	r24, 0xDD	; 221
    249e:	95 e0       	ldi	r25, 0x05	; 5
    24a0:	01 c0       	rjmp	.+2      	; 0x24a4 <print_time+0x7e>
{
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
	{
		*dest++ = ch;
    24a2:	2d 93       	st	X+, r18
    24a4:	fc 01       	movw	r30, r24
//*****************************************************************************************
BYTE *my_strcpy ( BYTE *dest, PGM_P src )
{
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
    24a6:	01 96       	adiw	r24, 0x01	; 1
    24a8:	24 91       	lpm	r18, Z+
    24aa:	22 23       	and	r18, r18
    24ac:	d1 f7       	brne	.-12     	; 0x24a2 <print_time+0x7c>
    24ae:	1f c0       	rjmp	.+62     	; 0x24ee <print_time+0xc8>
    24b0:	8b 01       	movw	r16, r22
    24b2:	c2 e0       	ldi	r28, 0x02	; 2
    24b4:	d0 e0       	ldi	r29, 0x00	; 0
		else
		{
			time++;
			for ( i=0; i<3; i++ )
			{
				if ( (i+2) == cursor )
    24b6:	e4 2e       	mov	r14, r20
    24b8:	ff 24       	eor	r15, r15
				{
					*ptr++ = ASCII_CURSOR;
				}
				else if ( i > 0 )
				{
					*ptr++ = ':';
    24ba:	5a e3       	ldi	r21, 0x3A	; 58
    24bc:	c5 2e       	mov	r12, r21
			time++;
			for ( i=0; i<3; i++ )
			{
				if ( (i+2) == cursor )
				{
					*ptr++ = ASCII_CURSOR;
    24be:	4e e7       	ldi	r20, 0x7E	; 126
    24c0:	d4 2e       	mov	r13, r20
		else
		{
			time++;
			for ( i=0; i<3; i++ )
			{
				if ( (i+2) == cursor )
    24c2:	ce 15       	cp	r28, r14
    24c4:	df 05       	cpc	r29, r15
    24c6:	11 f4       	brne	.+4      	; 0x24cc <print_time+0xa6>
				{
					*ptr++ = ASCII_CURSOR;
    24c8:	dd 92       	st	X+, r13
    24ca:	03 c0       	rjmp	.+6      	; 0x24d2 <print_time+0xac>
				}
				else if ( i > 0 )
    24cc:	c2 30       	cpi	r28, 0x02	; 2
    24ce:	09 f0       	breq	.+2      	; 0x24d2 <print_time+0xac>
				{
					*ptr++ = ':';
    24d0:	cd 92       	st	X+, r12
				}
				ptr = print_decimal ( ptr, 2, *time++ );
    24d2:	f8 01       	movw	r30, r16
    24d4:	41 81       	ldd	r20, Z+1	; 0x01
    24d6:	cd 01       	movw	r24, r26
    24d8:	62 e0       	ldi	r22, 0x02	; 2
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	0e 94 ca 10 	call	0x2194	; 0x2194 <print_decimal>
    24e0:	dc 01       	movw	r26, r24
    24e2:	21 96       	adiw	r28, 0x01	; 1
    24e4:	0f 5f       	subi	r16, 0xFF	; 255
    24e6:	1f 4f       	sbci	r17, 0xFF	; 255
				ptr = my_strcpy ( ptr, (PGM_P)str_disable );
		}
		else
		{
			time++;
			for ( i=0; i<3; i++ )
    24e8:	c5 30       	cpi	r28, 0x05	; 5
    24ea:	d1 05       	cpc	r29, r1
    24ec:	51 f7       	brne	.-44     	; 0x24c2 <print_time+0x9c>
				ptr = print_decimal ( ptr, 2, *time++ );
			}
		}
	}
	
	*ptr = '\0';
    24ee:	1c 92       	st	X, r1
}
    24f0:	df 91       	pop	r29
    24f2:	cf 91       	pop	r28
    24f4:	1f 91       	pop	r17
    24f6:	0f 91       	pop	r16
    24f8:	ff 90       	pop	r15
    24fa:	ef 90       	pop	r14
    24fc:	df 90       	pop	r13
    24fe:	cf 90       	pop	r12
    2500:	08 95       	ret

00002502 <menu_init>:
//
//*******************************************************************************************
void menu_init ( void )
{	
	// setup countdown initial value
	sec_count = 0;
    2502:	10 92 43 01 	sts	0x0143, r1
	eeprom_read_block ( count_time, ee_count_time, 3 );
    2506:	8c e3       	ldi	r24, 0x3C	; 60
    2508:	91 e0       	ldi	r25, 0x01	; 1
    250a:	68 e0       	ldi	r22, 0x08	; 8
    250c:	70 e0       	ldi	r23, 0x00	; 0
    250e:	43 e0       	ldi	r20, 0x03	; 3
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	0e 94 5f 1a 	call	0x34be	; 0x34be <__eerd_block_m32>
	count_time[3] = 0;
    2516:	10 92 3f 01 	sts	0x013F, r1

	// setup menu and standby display
	flag1.byte = 0;
    251a:	10 92 27 01 	sts	0x0127, r1
	flag2.byte = 0;
    251e:	10 92 26 01 	sts	0x0126, r1
	menu_index = 0;
    2522:	10 92 41 01 	sts	0x0141, r1
	submenu_index = 0;
    2526:	10 92 42 01 	sts	0x0142, r1
	menu_stack = 0;
    252a:	10 92 46 01 	sts	0x0146, r1
	submenu_stack = 0;
    252e:	10 92 44 01 	sts	0x0144, r1
	setting_cursor = 0;
    2532:	10 92 45 01 	sts	0x0145, r1
	standby_cursor = 1;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	80 93 40 01 	sts	0x0140, r24
}
    253c:	08 95       	ret

0000253e <display_menu>:
// Function : display_menu
// Description : display LCD user interface menu on LCD
//
//*******************************************************************************************
void display_menu(void)
{
    253e:	0f 93       	push	r16
    2540:	1f 93       	push	r17
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	c0 54       	subi	r28, 0x40	; 64
    254c:	d0 40       	sbci	r29, 0x00	; 0
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
	BYTE generic_buf[64];

	if( menu_index == 0)
    2558:	80 91 41 01 	lds	r24, 0x0141
    255c:	88 23       	and	r24, r24
    255e:	09 f4       	brne	.+2      	; 0x2562 <display_menu+0x24>
    2560:	5d c0       	rjmp	.+186    	; 0x261c <display_menu+0xde>
		return;

	// display menu title on lcd first line
	lcd_putc( '\f' );
    2562:	8c e0       	ldi	r24, 0x0C	; 12
    2564:	0e 94 40 16 	call	0x2c80	; 0x2c80 <lcd_putc>
	lcd_print ( (BYTE *)menu_list[ menu_index - 1 ] );
    2568:	e0 91 41 01 	lds	r30, 0x0141
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	ee 0f       	add	r30, r30
    2570:	ff 1f       	adc	r31, r31
    2572:	e6 54       	subi	r30, 0x46	; 70
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	80 81       	ld	r24, Z
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <lcd_print>
	
	// display menu detail on lcd second line
	lcd_putc( '\n' );
    257e:	8a e0       	ldi	r24, 0x0A	; 10
    2580:	0e 94 40 16 	call	0x2c80	; 0x2c80 <lcd_putc>
	if( menu_index == 1 )//MENU_MAIN)
    2584:	80 91 41 01 	lds	r24, 0x0141
    2588:	81 30       	cpi	r24, 0x01	; 1
    258a:	51 f4       	brne	.+20     	; 0x25a0 <display_menu+0x62>
	{
		lcd_print( (BYTE *)menu_list[ submenu_index ] );
    258c:	e0 91 42 01 	lds	r30, 0x0142
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	ee 0f       	add	r30, r30
    2594:	ff 1f       	adc	r31, r31
    2596:	e4 54       	subi	r30, 0x44	; 68
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	80 81       	ld	r24, Z
    259c:	91 81       	ldd	r25, Z+1	; 0x01
    259e:	3c c0       	rjmp	.+120    	; 0x2618 <display_menu+0xda>
	}
	// setup avr ip address
	else if( menu_index == 2 )
    25a0:	82 30       	cpi	r24, 0x02	; 2
    25a2:	51 f4       	brne	.+20     	; 0x25b8 <display_menu+0x7a>
	{
		print_ip ( generic_buf, (BYTE*)&avr_ip, setting_cursor+1 );
    25a4:	40 91 45 01 	lds	r20, 0x0145
    25a8:	4f 5f       	subi	r20, 0xFF	; 255
    25aa:	8e 01       	movw	r16, r28
    25ac:	0f 5f       	subi	r16, 0xFF	; 255
    25ae:	1f 4f       	sbci	r17, 0xFF	; 255
    25b0:	c8 01       	movw	r24, r16
    25b2:	62 e3       	ldi	r22, 0x32	; 50
    25b4:	71 e0       	ldi	r23, 0x01	; 1
    25b6:	23 c0       	rjmp	.+70     	; 0x25fe <display_menu+0xc0>
		lcd_print ( generic_buf );
	}
	// setup server ip address
	else if(menu_index == 3 )
    25b8:	83 30       	cpi	r24, 0x03	; 3
    25ba:	51 f4       	brne	.+20     	; 0x25d0 <display_menu+0x92>
	{
		print_ip ( generic_buf, (BYTE*)&server_ip, setting_cursor+1 );
    25bc:	40 91 45 01 	lds	r20, 0x0145
    25c0:	4f 5f       	subi	r20, 0xFF	; 255
    25c2:	8e 01       	movw	r16, r28
    25c4:	0f 5f       	subi	r16, 0xFF	; 255
    25c6:	1f 4f       	sbci	r17, 0xFF	; 255
    25c8:	c8 01       	movw	r24, r16
    25ca:	6e e2       	ldi	r22, 0x2E	; 46
    25cc:	71 e0       	ldi	r23, 0x01	; 1
    25ce:	17 c0       	rjmp	.+46     	; 0x25fe <display_menu+0xc0>
		lcd_print ( generic_buf );
	}
	// setup countdown timer for send temparature
	else if ( menu_index == 4 )
    25d0:	84 30       	cpi	r24, 0x04	; 4
    25d2:	61 f4       	brne	.+24     	; 0x25ec <display_menu+0xae>
	{
		print_time ( generic_buf, count_time, setting_cursor+1 );
    25d4:	40 91 45 01 	lds	r20, 0x0145
    25d8:	4f 5f       	subi	r20, 0xFF	; 255
    25da:	8e 01       	movw	r16, r28
    25dc:	0f 5f       	subi	r16, 0xFF	; 255
    25de:	1f 4f       	sbci	r17, 0xFF	; 255
    25e0:	c8 01       	movw	r24, r16
    25e2:	6c e3       	ldi	r22, 0x3C	; 60
    25e4:	71 e0       	ldi	r23, 0x01	; 1
    25e6:	0e 94 13 12 	call	0x2426	; 0x2426 <print_time>
    25ea:	15 c0       	rjmp	.+42     	; 0x2616 <display_menu+0xd8>
		lcd_print ( generic_buf );
	}
	// ping server
	else if ( menu_index == 5 )
    25ec:	85 30       	cpi	r24, 0x05	; 5
    25ee:	51 f4       	brne	.+20     	; 0x2604 <display_menu+0xc6>
	{
		print_ip ( generic_buf, (BYTE*)&server_ip, 1 );
    25f0:	8e 01       	movw	r16, r28
    25f2:	0f 5f       	subi	r16, 0xFF	; 255
    25f4:	1f 4f       	sbci	r17, 0xFF	; 255
    25f6:	c8 01       	movw	r24, r16
    25f8:	6e e2       	ldi	r22, 0x2E	; 46
    25fa:	71 e0       	ldi	r23, 0x01	; 1
    25fc:	41 e0       	ldi	r20, 0x01	; 1
    25fe:	0e 94 08 11 	call	0x2210	; 0x2210 <print_ip>
    2602:	09 c0       	rjmp	.+18     	; 0x2616 <display_menu+0xd8>
		lcd_print ( generic_buf );
	}
	// send temparature now
	else if ( menu_index == 6 )
    2604:	86 30       	cpi	r24, 0x06	; 6
    2606:	51 f4       	brne	.+20     	; 0x261c <display_menu+0xde>
	{
		print_timeout(generic_buf,  1 );
    2608:	8e 01       	movw	r16, r28
    260a:	0f 5f       	subi	r16, 0xFF	; 255
    260c:	1f 4f       	sbci	r17, 0xFF	; 255
    260e:	c8 01       	movw	r24, r16
    2610:	61 e0       	ldi	r22, 0x01	; 1
    2612:	0e 94 c9 11 	call	0x2392	; 0x2392 <print_timeout>
		lcd_print (generic_buf);
    2616:	c8 01       	movw	r24, r16
    2618:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <lcd_print>
	}
}
    261c:	c0 5c       	subi	r28, 0xC0	; 192
    261e:	df 4f       	sbci	r29, 0xFF	; 255
    2620:	0f b6       	in	r0, 0x3f	; 63
    2622:	f8 94       	cli
    2624:	de bf       	out	0x3e, r29	; 62
    2626:	0f be       	out	0x3f, r0	; 63
    2628:	cd bf       	out	0x3d, r28	; 61
    262a:	cf 91       	pop	r28
    262c:	df 91       	pop	r29
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	08 95       	ret

00002634 <key_dw_process>:
void key_dw_process ( void )
{
	BYTE temp;
	
	// standby display, display board status
	if(menu_index == 0)
    2634:	80 91 41 01 	lds	r24, 0x0141
    2638:	88 23       	and	r24, r24
    263a:	91 f4       	brne	.+36     	; 0x2660 <key_dw_process+0x2c>
	{
		if(standby_cursor==1){
    263c:	80 91 40 01 	lds	r24, 0x0140
    2640:	81 30       	cpi	r24, 0x01	; 1
    2642:	29 f4       	brne	.+10     	; 0x264e <key_dw_process+0x1a>
			turn_devices(ind_device_cur);
    2644:	80 91 11 01 	lds	r24, 0x0111
    2648:	0e 94 44 11 	call	0x2288	; 0x2288 <turn_devices>
    264c:	08 95       	ret
			return;
		}
		if ( -- standby_cursor == 0 )
    264e:	81 50       	subi	r24, 0x01	; 1
    2650:	80 93 40 01 	sts	0x0140, r24
			standby_cursor = sizeof(standby_list)/2;
		flag1.bits.update_display = 1;
    2654:	80 91 27 01 	lds	r24, 0x0127
    2658:	82 60       	ori	r24, 0x02	; 2
    265a:	80 93 27 01 	sts	0x0127, r24
    265e:	08 95       	ret
	}
	// main menu
	else if(menu_index == 1)
    2660:	81 30       	cpi	r24, 0x01	; 1
    2662:	61 f4       	brne	.+24     	; 0x267c <key_dw_process+0x48>
	{
		if( --submenu_index == 0 )
    2664:	80 91 42 01 	lds	r24, 0x0142
    2668:	81 50       	subi	r24, 0x01	; 1
    266a:	80 93 42 01 	sts	0x0142, r24
    266e:	88 23       	and	r24, r24
    2670:	09 f0       	breq	.+2      	; 0x2674 <key_dw_process+0x40>
    2672:	4c c0       	rjmp	.+152    	; 0x270c <key_dw_process+0xd8>
		{
			submenu_index = (sizeof(menu_list)/2)-1;
    2674:	85 e0       	ldi	r24, 0x05	; 5
    2676:	80 93 42 01 	sts	0x0142, r24
    267a:	08 95       	ret
		}
	}
	// setup avr ip
	else if( menu_index == 2 )
    267c:	82 30       	cpi	r24, 0x02	; 2
    267e:	69 f4       	brne	.+26     	; 0x269a <key_dw_process+0x66>
	{
		avr_ip.byte [ setting_cursor ]--;
    2680:	e0 91 45 01 	lds	r30, 0x0145
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	ee 5c       	subi	r30, 0xCE	; 206
    2688:	fe 4f       	sbci	r31, 0xFE	; 254
    268a:	80 81       	ld	r24, Z
    268c:	81 50       	subi	r24, 0x01	; 1
    268e:	80 83       	st	Z, r24
		eeprom_write_block ( &avr_ip, ee_avr_ip, 4 );
    2690:	82 e3       	ldi	r24, 0x32	; 50
    2692:	91 e0       	ldi	r25, 0x01	; 1
    2694:	60 e0       	ldi	r22, 0x00	; 0
    2696:	70 e0       	ldi	r23, 0x00	; 0
    2698:	25 c0       	rjmp	.+74     	; 0x26e4 <key_dw_process+0xb0>
	}
	// setup server ip
	else if( menu_index == 3 )
    269a:	83 30       	cpi	r24, 0x03	; 3
    269c:	69 f4       	brne	.+26     	; 0x26b8 <key_dw_process+0x84>
	{
		server_ip.byte [ setting_cursor ]--;
    269e:	e0 91 45 01 	lds	r30, 0x0145
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	e2 5d       	subi	r30, 0xD2	; 210
    26a6:	fe 4f       	sbci	r31, 0xFE	; 254
    26a8:	80 81       	ld	r24, Z
    26aa:	81 50       	subi	r24, 0x01	; 1
    26ac:	80 83       	st	Z, r24
		eeprom_write_block ( &server_ip, ee_server_ip, 4 );
    26ae:	8e e2       	ldi	r24, 0x2E	; 46
    26b0:	91 e0       	ldi	r25, 0x01	; 1
    26b2:	64 e0       	ldi	r22, 0x04	; 4
    26b4:	70 e0       	ldi	r23, 0x00	; 0
    26b6:	16 c0       	rjmp	.+44     	; 0x26e4 <key_dw_process+0xb0>
	}
	// setup countdown timer
	else if( menu_index == 4 )
    26b8:	84 30       	cpi	r24, 0x04	; 4
    26ba:	c9 f4       	brne	.+50     	; 0x26ee <key_dw_process+0xba>
	{
		temp = pgm_read_byte ( (PGM_P)(count_time_max + setting_cursor) );
    26bc:	80 91 45 01 	lds	r24, 0x0145
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	fc 01       	movw	r30, r24
    26c4:	ee 52       	subi	r30, 0x2E	; 46
    26c6:	fa 4f       	sbci	r31, 0xFA	; 250
    26c8:	24 91       	lpm	r18, Z+
		if ( --count_time [ setting_cursor ] == 0xff )
    26ca:	fc 01       	movw	r30, r24
    26cc:	e4 5c       	subi	r30, 0xC4	; 196
    26ce:	fe 4f       	sbci	r31, 0xFE	; 254
    26d0:	80 81       	ld	r24, Z
    26d2:	81 50       	subi	r24, 0x01	; 1
    26d4:	80 83       	st	Z, r24
    26d6:	8f 3f       	cpi	r24, 0xFF	; 255
    26d8:	09 f4       	brne	.+2      	; 0x26dc <key_dw_process+0xa8>
			count_time [ setting_cursor ] = temp;
    26da:	20 83       	st	Z, r18
		eeprom_write_block ( count_time, ee_count_time, 4 );
    26dc:	8c e3       	ldi	r24, 0x3C	; 60
    26de:	91 e0       	ldi	r25, 0x01	; 1
    26e0:	68 e0       	ldi	r22, 0x08	; 8
    26e2:	70 e0       	ldi	r23, 0x00	; 0
    26e4:	44 e0       	ldi	r20, 0x04	; 4
    26e6:	50 e0       	ldi	r21, 0x00	; 0
    26e8:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__eewr_block_m32>
    26ec:	08 95       	ret
	}else if(menu_index == 6){
    26ee:	86 30       	cpi	r24, 0x06	; 6
    26f0:	69 f4       	brne	.+26     	; 0x270c <key_dw_process+0xd8>
		if(screen_timeout == 0){
    26f2:	80 91 65 00 	lds	r24, 0x0065
    26f6:	88 23       	and	r24, r24
    26f8:	11 f4       	brne	.+4      	; 0x26fe <key_dw_process+0xca>
			screen_timeout=240;
    26fa:	80 ef       	ldi	r24, 0xF0	; 240
    26fc:	01 c0       	rjmp	.+2      	; 0x2700 <key_dw_process+0xcc>
		}else{
			screen_timeout--;
    26fe:	81 50       	subi	r24, 0x01	; 1
    2700:	80 93 65 00 	sts	0x0065, r24
		}
		timeout_cur_screen=screen_timeout;
    2704:	80 91 65 00 	lds	r24, 0x0065
    2708:	80 93 66 00 	sts	0x0066, r24
    270c:	08 95       	ret

0000270e <key_up_process>:
void key_up_process ( void )
{
	BYTE temp;
	
	// standby display, display board status
	if(menu_index == 0)
    270e:	90 91 41 01 	lds	r25, 0x0141
    2712:	99 23       	and	r25, r25
    2714:	e9 f4       	brne	.+58     	; 0x2750 <key_up_process+0x42>
	{
		if(standby_cursor==1){
    2716:	90 91 40 01 	lds	r25, 0x0140
    271a:	91 30       	cpi	r25, 0x01	; 1
    271c:	51 f4       	brne	.+20     	; 0x2732 <key_up_process+0x24>
			if(++ind_device_cur !=6){
    271e:	80 91 11 01 	lds	r24, 0x0111
    2722:	8f 5f       	subi	r24, 0xFF	; 255
    2724:	80 93 11 01 	sts	0x0111, r24
    2728:	86 30       	cpi	r24, 0x06	; 6
    272a:	09 f0       	breq	.+2      	; 0x272e <key_up_process+0x20>
    272c:	66 c0       	rjmp	.+204    	; 0x27fa <key_up_process+0xec>
				return;
			}else{
				ind_device_cur=0;
    272e:	10 92 11 01 	sts	0x0111, r1
			}
		}
		if ( ++ standby_cursor == ((sizeof(standby_list)/2)+1) )
    2732:	89 2f       	mov	r24, r25
    2734:	8f 5f       	subi	r24, 0xFF	; 255
    2736:	80 93 40 01 	sts	0x0140, r24
    273a:	86 30       	cpi	r24, 0x06	; 6
    273c:	19 f4       	brne	.+6      	; 0x2744 <key_up_process+0x36>
			standby_cursor = 1;
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	80 93 40 01 	sts	0x0140, r24
		flag1.bits.update_display = 1;
    2744:	80 91 27 01 	lds	r24, 0x0127
    2748:	82 60       	ori	r24, 0x02	; 2
    274a:	80 93 27 01 	sts	0x0127, r24
    274e:	08 95       	ret
	}
	// main menu
	else if(menu_index == 1)
    2750:	91 30       	cpi	r25, 0x01	; 1
    2752:	59 f4       	brne	.+22     	; 0x276a <key_up_process+0x5c>
	{
		if( ++submenu_index == (sizeof(menu_list)/2) )
    2754:	80 91 42 01 	lds	r24, 0x0142
    2758:	8f 5f       	subi	r24, 0xFF	; 255
    275a:	80 93 42 01 	sts	0x0142, r24
    275e:	86 30       	cpi	r24, 0x06	; 6
    2760:	09 f0       	breq	.+2      	; 0x2764 <key_up_process+0x56>
    2762:	4b c0       	rjmp	.+150    	; 0x27fa <key_up_process+0xec>
		{
			submenu_index = 1;
    2764:	90 93 42 01 	sts	0x0142, r25
    2768:	08 95       	ret
		}
	}
	// setup avr ip
	else if( menu_index == 2 )
    276a:	92 30       	cpi	r25, 0x02	; 2
    276c:	69 f4       	brne	.+26     	; 0x2788 <key_up_process+0x7a>
	{
		avr_ip.byte [ setting_cursor ]++;
    276e:	e0 91 45 01 	lds	r30, 0x0145
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	ee 5c       	subi	r30, 0xCE	; 206
    2776:	fe 4f       	sbci	r31, 0xFE	; 254
    2778:	80 81       	ld	r24, Z
    277a:	8f 5f       	subi	r24, 0xFF	; 255
    277c:	80 83       	st	Z, r24
		eeprom_write_block ( &avr_ip, ee_avr_ip, 4 );
    277e:	82 e3       	ldi	r24, 0x32	; 50
    2780:	91 e0       	ldi	r25, 0x01	; 1
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	25 c0       	rjmp	.+74     	; 0x27d2 <key_up_process+0xc4>
	}
	// setup server ip
	else if( menu_index == 3 )
    2788:	93 30       	cpi	r25, 0x03	; 3
    278a:	69 f4       	brne	.+26     	; 0x27a6 <key_up_process+0x98>
	{
		server_ip.byte [ setting_cursor ]++;
    278c:	e0 91 45 01 	lds	r30, 0x0145
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	e2 5d       	subi	r30, 0xD2	; 210
    2794:	fe 4f       	sbci	r31, 0xFE	; 254
    2796:	80 81       	ld	r24, Z
    2798:	8f 5f       	subi	r24, 0xFF	; 255
    279a:	80 83       	st	Z, r24
		eeprom_write_block ( &server_ip, ee_server_ip, 4 );
    279c:	8e e2       	ldi	r24, 0x2E	; 46
    279e:	91 e0       	ldi	r25, 0x01	; 1
    27a0:	64 e0       	ldi	r22, 0x04	; 4
    27a2:	70 e0       	ldi	r23, 0x00	; 0
    27a4:	16 c0       	rjmp	.+44     	; 0x27d2 <key_up_process+0xc4>
	}
	// setup countdown timer
	else if( menu_index == 4 )
    27a6:	94 30       	cpi	r25, 0x04	; 4
    27a8:	c9 f4       	brne	.+50     	; 0x27dc <key_up_process+0xce>
	{
		temp = pgm_read_byte ( (PGM_P)(count_time_max + setting_cursor) );
    27aa:	80 91 45 01 	lds	r24, 0x0145
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	fc 01       	movw	r30, r24
    27b2:	ee 52       	subi	r30, 0x2E	; 46
    27b4:	fa 4f       	sbci	r31, 0xFA	; 250
    27b6:	e4 91       	lpm	r30, Z+
		if ( ++count_time [ setting_cursor ] == temp )
    27b8:	dc 01       	movw	r26, r24
    27ba:	a4 5c       	subi	r26, 0xC4	; 196
    27bc:	be 4f       	sbci	r27, 0xFE	; 254
    27be:	8c 91       	ld	r24, X
    27c0:	8f 5f       	subi	r24, 0xFF	; 255
    27c2:	8c 93       	st	X, r24
    27c4:	8e 17       	cp	r24, r30
    27c6:	09 f4       	brne	.+2      	; 0x27ca <key_up_process+0xbc>
			count_time [ setting_cursor ] = 0;
    27c8:	1c 92       	st	X, r1
		eeprom_write_block ( count_time, ee_count_time, 4 );
    27ca:	8c e3       	ldi	r24, 0x3C	; 60
    27cc:	91 e0       	ldi	r25, 0x01	; 1
    27ce:	68 e0       	ldi	r22, 0x08	; 8
    27d0:	70 e0       	ldi	r23, 0x00	; 0
    27d2:	44 e0       	ldi	r20, 0x04	; 4
    27d4:	50 e0       	ldi	r21, 0x00	; 0
    27d6:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__eewr_block_m32>
    27da:	08 95       	ret
	}else if(menu_index == 6){
    27dc:	96 30       	cpi	r25, 0x06	; 6
    27de:	69 f4       	brne	.+26     	; 0x27fa <key_up_process+0xec>
		screen_timeout++;
    27e0:	80 91 65 00 	lds	r24, 0x0065
    27e4:	8f 5f       	subi	r24, 0xFF	; 255
    27e6:	80 93 65 00 	sts	0x0065, r24
		if(screen_timeout > 240){
    27ea:	81 3f       	cpi	r24, 0xF1	; 241
    27ec:	10 f0       	brcs	.+4      	; 0x27f2 <key_up_process+0xe4>
			screen_timeout=0;
    27ee:	10 92 65 00 	sts	0x0065, r1
		}
		timeout_cur_screen=screen_timeout;
    27f2:	80 91 65 00 	lds	r24, 0x0065
    27f6:	80 93 66 00 	sts	0x0066, r24
    27fa:	08 95       	ret

000027fc <menu_process>:
// Function : key_process
// Description : Process all key code from get_key_code function
//
//*******************************************************************************************
void menu_process ( void )
{
    27fc:	1f 93       	push	r17
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
    2806:	ce 5e       	subi	r28, 0xEE	; 238
    2808:	d5 40       	sbci	r29, 0x05	; 5
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
	static BYTE key_hold_count=0, key_hold_step_delay=0;
	BYTE rxtx_buffer[MAX_RXTX_BUFFER];
	BYTE key_code, temp;
	static BYTE backlight_seccount=250;
	// get switch value from port
	key_code = SW_PIN & ( _BV( SW_DW ) | _BV( SW_UP ) | _BV( SW_EXIT ) | _BV( SW_MENU ) );
    2814:	19 b3       	in	r17, 0x19	; 25
    2816:	10 7f       	andi	r17, 0xF0	; 240
    2818:	90 91 65 00 	lds	r25, 0x0065
	
	// Check key press?
	if ( key_code  == ( _BV( SW_DW ) | _BV( SW_UP ) | _BV( SW_EXIT ) | _BV( SW_MENU ) ) )
    281c:	10 3f       	cpi	r17, 0xF0	; 240
    281e:	69 f5       	brne	.+90     	; 0x287a <menu_process+0x7e>
	{
		flag1.bits.key_is_executed = 0;
    2820:	80 91 27 01 	lds	r24, 0x0127
    2824:	8e 7f       	andi	r24, 0xFE	; 254
    2826:	80 93 27 01 	sts	0x0127, r24
		flag2.bits.key_hold = 0;
    282a:	80 91 26 01 	lds	r24, 0x0126
    282e:	8e 7f       	andi	r24, 0xFE	; 254
    2830:	80 93 26 01 	sts	0x0126, r24
		key_hold_count = 0;
    2834:	10 92 13 01 	sts	0x0113, r1
		key_hold_step_delay = 0;
    2838:	10 92 12 01 	sts	0x0112, r1
		if(screen_timeout==0){
    283c:	99 23       	and	r25, r25
    283e:	11 f4       	brne	.+4      	; 0x2844 <menu_process+0x48>
			LCD_BL_PORT |= _BV( LCD_BL_PIN );
    2840:	c3 9a       	sbi	0x18, 3	; 24
    2842:	bf c0       	rjmp	.+382    	; 0x29c2 <menu_process+0x1c6>
			return;
		}
		// lcd backlight control
		// lcd backlight off after key is unpress ( 30 seconds)
		if ( timeout_cur_screen )
    2844:	90 91 66 00 	lds	r25, 0x0066
    2848:	99 23       	and	r25, r25
    284a:	09 f4       	brne	.+2      	; 0x284e <menu_process+0x52>
    284c:	ba c0       	rjmp	.+372    	; 0x29c2 <menu_process+0x1c6>
		{
			if ( -- backlight_seccount> 250 )
    284e:	80 91 0d 01 	lds	r24, 0x010D
    2852:	81 50       	subi	r24, 0x01	; 1
    2854:	80 93 0d 01 	sts	0x010D, r24
    2858:	8b 3f       	cpi	r24, 0xFB	; 251
    285a:	08 f4       	brcc	.+2      	; 0x285e <menu_process+0x62>
    285c:	b2 c0       	rjmp	.+356    	; 0x29c2 <menu_process+0x1c6>
			{
				
				backlight_seccount = 250;
    285e:	8a ef       	ldi	r24, 0xFA	; 250
    2860:	80 93 0d 01 	sts	0x010D, r24
				if ( --timeout_cur_screen == 0 )
    2864:	89 2f       	mov	r24, r25
    2866:	81 50       	subi	r24, 0x01	; 1
    2868:	80 93 66 00 	sts	0x0066, r24
    286c:	88 23       	and	r24, r24
    286e:	09 f0       	breq	.+2      	; 0x2872 <menu_process+0x76>
    2870:	a8 c0       	rjmp	.+336    	; 0x29c2 <menu_process+0x1c6>
				{
					timeout_cur_screen = 0;
    2872:	10 92 66 00 	sts	0x0066, r1
					// lcd backlight off
					LCD_BL_PORT &= ~_BV( LCD_BL_PIN );
    2876:	c3 98       	cbi	0x18, 3	; 24
    2878:	a4 c0       	rjmp	.+328    	; 0x29c2 <menu_process+0x1c6>
		return;
	}
	
	// lcd backlight on
	// and hold-on as screen_timeout seconds
	timeout_cur_screen = screen_timeout;
    287a:	90 93 66 00 	sts	0x0066, r25
	
	LCD_BL_PORT |= _BV( LCD_BL_PIN );
    287e:	c3 9a       	sbi	0x18, 3	; 24
	// check hold key
	if ( ++key_hold_count == 200 )
    2880:	80 91 13 01 	lds	r24, 0x0113
    2884:	8f 5f       	subi	r24, 0xFF	; 255
    2886:	80 93 13 01 	sts	0x0113, r24
    288a:	88 3c       	cpi	r24, 0xC8	; 200
    288c:	39 f4       	brne	.+14     	; 0x289c <menu_process+0xa0>
	{
		key_hold_count = 0;
    288e:	10 92 13 01 	sts	0x0113, r1
		flag2.bits.key_hold = 1;		
    2892:	80 91 26 01 	lds	r24, 0x0126
    2896:	81 60       	ori	r24, 0x01	; 1
    2898:	80 93 26 01 	sts	0x0126, r24
	}
	
	if ( flag2.bits.key_hold )
    289c:	80 91 26 01 	lds	r24, 0x0126
    28a0:	80 ff       	sbrs	r24, 0
    28a2:	14 c0       	rjmp	.+40     	; 0x28cc <menu_process+0xd0>
	{
		if ( ++key_hold_step_delay == 30 )
    28a4:	80 91 12 01 	lds	r24, 0x0112
    28a8:	8f 5f       	subi	r24, 0xFF	; 255
    28aa:	80 93 12 01 	sts	0x0112, r24
    28ae:	8e 31       	cpi	r24, 0x1E	; 30
    28b0:	69 f4       	brne	.+26     	; 0x28cc <menu_process+0xd0>
		{
			key_hold_step_delay = 0;
    28b2:	10 92 12 01 	sts	0x0112, r1
			if ( key_code == ((~_BV ( SW_UP ) ) & 0xf0) )
    28b6:	10 3b       	cpi	r17, 0xB0	; 176
    28b8:	19 f4       	brne	.+6      	; 0x28c0 <menu_process+0xc4>
			{
				key_up_process ();
    28ba:	0e 94 87 13 	call	0x270e	; 0x270e <key_up_process>
    28be:	04 c0       	rjmp	.+8      	; 0x28c8 <menu_process+0xcc>
			}
			// if down key is pressed
			else if ( key_code == ((~_BV ( SW_DW ) ) & 0xf0) )
    28c0:	10 37       	cpi	r17, 0x70	; 112
    28c2:	11 f4       	brne	.+4      	; 0x28c8 <menu_process+0xcc>
			{
				key_dw_process ();
    28c4:	0e 94 1a 13 	call	0x2634	; 0x2634 <key_dw_process>
			}
			display_menu();
    28c8:	0e 94 9f 12 	call	0x253e	; 0x253e <display_menu>
		}
	}
	// key code already executed
	if ( flag1.bits.key_is_executed )
    28cc:	80 91 27 01 	lds	r24, 0x0127
    28d0:	80 fd       	sbrc	r24, 0
    28d2:	77 c0       	rjmp	.+238    	; 0x29c2 <menu_process+0x1c6>
		return;
	// check key code, what is key pressed?
	// if menu key is pressed
	if ( key_code == ((~_BV ( SW_MENU ) ) & 0xf0) )
    28d4:	10 3e       	cpi	r17, 0xE0	; 224
    28d6:	09 f0       	breq	.+2      	; 0x28da <menu_process+0xde>
    28d8:	4d c0       	rjmp	.+154    	; 0x2974 <menu_process+0x178>
	{
		// enter to main menu
		if( menu_index == 0 )
    28da:	e0 91 41 01 	lds	r30, 0x0141
    28de:	ee 23       	and	r30, r30
    28e0:	31 f4       	brne	.+12     	; 0x28ee <menu_process+0xf2>
		{
			setting_cursor = 0;
    28e2:	10 92 45 01 	sts	0x0145, r1
			menu_index = 1;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	80 93 41 01 	sts	0x0141, r24
    28ec:	51 c0       	rjmp	.+162    	; 0x2990 <menu_process+0x194>
			submenu_index = 1;
		}
		// enter to submenu
		else if( menu_index == 1 )
    28ee:	e1 30       	cpi	r30, 0x01	; 1
    28f0:	61 f4       	brne	.+24     	; 0x290a <menu_process+0x10e>
		{
			menu_stack = menu_index;
    28f2:	e0 93 46 01 	sts	0x0146, r30
			submenu_stack = submenu_index;
    28f6:	80 91 42 01 	lds	r24, 0x0142
    28fa:	80 93 44 01 	sts	0x0144, r24
			menu_index = submenu_index + menu_index;
    28fe:	8f 5f       	subi	r24, 0xFF	; 255
    2900:	80 93 41 01 	sts	0x0141, r24
			submenu_index = 1;
    2904:	e0 93 42 01 	sts	0x0142, r30
    2908:	54 c0       	rjmp	.+168    	; 0x29b2 <menu_process+0x1b6>
		}
		// ping server
		else if ( menu_index == 5 )
    290a:	e5 30       	cpi	r30, 0x05	; 5
    290c:	29 f5       	brne	.+74     	; 0x2958 <menu_process+0x15c>
		{
			// Show on lcd first line
			lcd_putc( '\f' );
    290e:	8c e0       	ldi	r24, 0x0C	; 12
    2910:	0e 94 40 16 	call	0x2c80	; 0x2c80 <lcd_putc>
			lcd_print ( (BYTE *)menu_list[ 4 ] );
    2914:	80 91 c4 00 	lds	r24, 0x00C4
    2918:	90 91 c5 00 	lds	r25, 0x00C5
    291c:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <lcd_print>
			lcd_putc( '\n' );
    2920:	8a e0       	ldi	r24, 0x0A	; 10
    2922:	0e 94 40 16 	call	0x2c80	; 0x2c80 <lcd_putc>
			if ( icmp_ping ( (BYTE*)rxtx_buffer, (BYTE*)&server_mac, (BYTE*)&server_ip ) )
    2926:	ce 01       	movw	r24, r28
    2928:	01 96       	adiw	r24, 0x01	; 1
    292a:	66 e3       	ldi	r22, 0x36	; 54
    292c:	71 e0       	ldi	r23, 0x01	; 1
    292e:	4e e2       	ldi	r20, 0x2E	; 46
    2930:	51 e0       	ldi	r21, 0x01	; 1
    2932:	0e 94 8b 10 	call	0x2116	; 0x2116 <icmp_ping>
    2936:	88 23       	and	r24, r24
    2938:	19 f0       	breq	.+6      	; 0x2940 <menu_process+0x144>
			{
				lcd_print_p ( PSTR ( "Ping OK." ) );
    293a:	80 ef       	ldi	r24, 0xF0	; 240
    293c:	95 e0       	ldi	r25, 0x05	; 5
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <menu_process+0x148>
			}
			else
			{
				lcd_print_p ( PSTR ( "Not found." ) );
    2940:	85 ee       	ldi	r24, 0xE5	; 229
    2942:	95 e0       	ldi	r25, 0x05	; 5
    2944:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <lcd_print_p>
			}
			flag1.bits.lcd_busy = 1;
    2948:	80 91 27 01 	lds	r24, 0x0127
			menu_index = 0;
    294c:	10 92 41 01 	sts	0x0141, r1
			submenu_index = 0;
    2950:	10 92 42 01 	sts	0x0142, r1
			flag1.bits.key_is_executed = 1;
    2954:	85 60       	ori	r24, 0x05	; 5
    2956:	33 c0       	rjmp	.+102    	; 0x29be <menu_process+0x1c2>
			return;
		}
		// change cursor setting on each menu
		else
		{
			temp = pgm_read_byte ( (PGM_P)(setting_cursor_max + menu_index - 2) );
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	e3 53       	subi	r30, 0x33	; 51
    295c:	fa 4f       	sbci	r31, 0xFA	; 250
    295e:	e4 91       	lpm	r30, Z+

			if ( ++setting_cursor == temp )
    2960:	80 91 45 01 	lds	r24, 0x0145
    2964:	8f 5f       	subi	r24, 0xFF	; 255
    2966:	80 93 45 01 	sts	0x0145, r24
    296a:	8e 17       	cp	r24, r30
    296c:	11 f5       	brne	.+68     	; 0x29b2 <menu_process+0x1b6>
				setting_cursor = 0;
    296e:	10 92 45 01 	sts	0x0145, r1
    2972:	1f c0       	rjmp	.+62     	; 0x29b2 <menu_process+0x1b6>
		}
	}
	// if exit key is pressed
	else if ( key_code == ((~_BV ( SW_EXIT ) ) & 0xf0) )
    2974:	10 3d       	cpi	r17, 0xD0	; 208
    2976:	a1 f4       	brne	.+40     	; 0x29a0 <menu_process+0x1a4>
	{
		setting_cursor = 0;
    2978:	10 92 45 01 	sts	0x0145, r1
		if(menu_index > 1)
    297c:	80 91 41 01 	lds	r24, 0x0141
    2980:	82 30       	cpi	r24, 0x02	; 2
    2982:	48 f0       	brcs	.+18     	; 0x2996 <menu_process+0x19a>
		{
			menu_index = menu_stack;
    2984:	80 91 46 01 	lds	r24, 0x0146
    2988:	80 93 41 01 	sts	0x0141, r24
			submenu_index = submenu_stack;
    298c:	80 91 44 01 	lds	r24, 0x0144
    2990:	80 93 42 01 	sts	0x0142, r24
    2994:	0e c0       	rjmp	.+28     	; 0x29b2 <menu_process+0x1b6>
		}
		else
		{
			menu_index = 0;
    2996:	10 92 41 01 	sts	0x0141, r1
			submenu_index = 0;
    299a:	10 92 42 01 	sts	0x0142, r1
    299e:	09 c0       	rjmp	.+18     	; 0x29b2 <menu_process+0x1b6>
			
		}
	}
	// if up key is pressed
	else if ( key_code == ((~_BV ( SW_UP ) ) & 0xf0) )
    29a0:	10 3b       	cpi	r17, 0xB0	; 176
    29a2:	19 f4       	brne	.+6      	; 0x29aa <menu_process+0x1ae>
	{
		key_up_process ();
    29a4:	0e 94 87 13 	call	0x270e	; 0x270e <key_up_process>
    29a8:	04 c0       	rjmp	.+8      	; 0x29b2 <menu_process+0x1b6>
	}
	// if down key is pressed
	else if ( key_code == ((~_BV ( SW_DW ) ) & 0xf0) )
    29aa:	10 37       	cpi	r17, 0x70	; 112
    29ac:	11 f4       	brne	.+4      	; 0x29b2 <menu_process+0x1b6>
	{
		key_dw_process ();
    29ae:	0e 94 1a 13 	call	0x2634	; 0x2634 <key_dw_process>
	}
	// display menu information on LCD
	display_menu();
    29b2:	0e 94 9f 12 	call	0x253e	; 0x253e <display_menu>
	flag1.bits.key_is_executed = 1;
    29b6:	80 91 27 01 	lds	r24, 0x0127
    29ba:	81 60       	ori	r24, 0x01	; 1
	flag1.bits.lcd_busy = 0;
    29bc:	8b 7f       	andi	r24, 0xFB	; 251
    29be:	80 93 27 01 	sts	0x0127, r24
}
    29c2:	c2 51       	subi	r28, 0x12	; 18
    29c4:	da 4f       	sbci	r29, 0xFA	; 250
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	1f 91       	pop	r17
    29d6:	08 95       	ret

000029d8 <time_base>:
//*****************************************************************************************
void time_base ( void )
{
	static BYTE send_temp_timeout=0;

	if ( ++sec_count == 250 )
    29d8:	80 91 43 01 	lds	r24, 0x0143
    29dc:	8f 5f       	subi	r24, 0xFF	; 255
    29de:	80 93 43 01 	sts	0x0143, r24
    29e2:	8a 3f       	cpi	r24, 0xFA	; 250
    29e4:	09 f0       	breq	.+2      	; 0x29e8 <time_base+0x10>
    29e6:	4c c0       	rjmp	.+152    	; 0x2a80 <time_base+0xa8>
	{
		sec_count = 0;
    29e8:	10 92 43 01 	sts	0x0143, r1

		// update lcd display
		flag1.bits.update_display = 1;
    29ec:	90 91 27 01 	lds	r25, 0x0127
    29f0:	89 2f       	mov	r24, r25
    29f2:	82 60       	ori	r24, 0x02	; 2
    29f4:	80 93 27 01 	sts	0x0127, r24
		
		// timeout for send temparature to webserver
		if ( flag1.bits.syn_is_sent )
    29f8:	85 ff       	sbrs	r24, 5
    29fa:	0c c0       	rjmp	.+24     	; 0x2a14 <time_base+0x3c>
		{
			// 5 seconds
			if ( ++send_temp_timeout == 5 )
    29fc:	80 91 14 01 	lds	r24, 0x0114
    2a00:	8f 5f       	subi	r24, 0xFF	; 255
    2a02:	80 93 14 01 	sts	0x0114, r24
    2a06:	85 30       	cpi	r24, 0x05	; 5
    2a08:	29 f4       	brne	.+10     	; 0x2a14 <time_base+0x3c>
			{
				send_temp_timeout = 0;
    2a0a:	10 92 14 01 	sts	0x0114, r1
				flag1.bits.send_temp_timeout = 1;
    2a0e:	92 68       	ori	r25, 0x82	; 130
    2a10:	90 93 27 01 	sts	0x0127, r25
			}
		}
		// send temparature to server countdown
		if ( count_time[ 0 ] && menu_index!=4 )
    2a14:	80 91 3c 01 	lds	r24, 0x013C
    2a18:	88 23       	and	r24, r24
    2a1a:	91 f1       	breq	.+100    	; 0x2a80 <time_base+0xa8>
    2a1c:	80 91 41 01 	lds	r24, 0x0141
    2a20:	84 30       	cpi	r24, 0x04	; 4
    2a22:	71 f1       	breq	.+92     	; 0x2a80 <time_base+0xa8>
		{
			if ( --count_time[ 3 ] > 59 )
    2a24:	80 91 3f 01 	lds	r24, 0x013F
    2a28:	81 50       	subi	r24, 0x01	; 1
    2a2a:	80 93 3f 01 	sts	0x013F, r24
    2a2e:	8c 33       	cpi	r24, 0x3C	; 60
    2a30:	38 f1       	brcs	.+78     	; 0x2a80 <time_base+0xa8>
			{
				//count_time[ 3 ] = 59;
				count_time[ 3 ] = 20;	// debug
    2a32:	84 e1       	ldi	r24, 0x14	; 20
    2a34:	80 93 3f 01 	sts	0x013F, r24
				if ( --count_time[ 2 ] > 59 )
    2a38:	80 91 3e 01 	lds	r24, 0x013E
    2a3c:	81 50       	subi	r24, 0x01	; 1
    2a3e:	80 93 3e 01 	sts	0x013E, r24
    2a42:	8c 33       	cpi	r24, 0x3C	; 60
    2a44:	e8 f0       	brcs	.+58     	; 0x2a80 <time_base+0xa8>
				{
					count_time[ 2 ] = 59;
    2a46:	8b e3       	ldi	r24, 0x3B	; 59
    2a48:	80 93 3e 01 	sts	0x013E, r24
					if ( --count_time[ 1 ] > 23 )
    2a4c:	80 91 3d 01 	lds	r24, 0x013D
    2a50:	81 50       	subi	r24, 0x01	; 1
    2a52:	80 93 3d 01 	sts	0x013D, r24
    2a56:	88 31       	cpi	r24, 0x18	; 24
    2a58:	98 f0       	brcs	.+38     	; 0x2a80 <time_base+0xa8>
					{
						// read hour
						count_time[ 1 ] = eeprom_read_byte( ee_count_time + 1 );
    2a5a:	89 e0       	ldi	r24, 0x09	; 9
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	0e 94 6f 1a 	call	0x34de	; 0x34de <__eerd_byte_m32>
    2a62:	80 93 3d 01 	sts	0x013D, r24
						// read minute
						count_time[ 2 ] = eeprom_read_byte( ee_count_time + 2 );
    2a66:	8a e0       	ldi	r24, 0x0A	; 10
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	0e 94 6f 1a 	call	0x34de	; 0x34de <__eerd_byte_m32>
    2a6e:	80 93 3e 01 	sts	0x013E, r24
						// clear second
						count_time[ 3 ] = 0;
    2a72:	10 92 3f 01 	sts	0x013F, r1
						flag1.bits.send_temp = 1;
    2a76:	80 91 27 01 	lds	r24, 0x0127
    2a7a:	80 61       	ori	r24, 0x10	; 16
    2a7c:	80 93 27 01 	sts	0x0127, r24
    2a80:	08 95       	ret

00002a82 <print_temp>:
// Function : print_temp
// Description : Print ADC0 and temparature to buffer
//
//*****************************************************************************************
void print_temp ( BYTE *dest )
{
    2a82:	df 92       	push	r13
    2a84:	ef 92       	push	r14
    2a86:	ff 92       	push	r15
    2a88:	0f 93       	push	r16
    2a8a:	1f 93       	push	r17
    2a8c:	7c 01       	movw	r14, r24
	WORD adc0_value;
	BYTE temp_value;

	adc0_value = adc_read ( 0 );
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	0e 94 77 16 	call	0x2cee	; 0x2cee <adc_read>
    2a94:	8c 01       	movw	r16, r24
	temp_value = adc_read_temp ( );
    2a96:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <adc_read_temp>
    2a9a:	d8 2e       	mov	r13, r24

	dest = print_decimal ( dest, 4, adc0_value );
    2a9c:	c7 01       	movw	r24, r14
    2a9e:	64 e0       	ldi	r22, 0x04	; 4
    2aa0:	a8 01       	movw	r20, r16
    2aa2:	0e 94 ca 10 	call	0x2194	; 0x2194 <print_decimal>
	*dest++ = ',';
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	8c e2       	ldi	r24, 0x2C	; 44
    2aaa:	81 93       	st	Z+, r24
	dest = print_decimal ( dest, 2, temp_value );
    2aac:	cf 01       	movw	r24, r30
    2aae:	62 e0       	ldi	r22, 0x02	; 2
    2ab0:	4d 2d       	mov	r20, r13
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	0e 94 ca 10 	call	0x2194	; 0x2194 <print_decimal>
    2ab8:	dc 01       	movw	r26, r24
	*dest++ = ASCII_DEGREE;
    2aba:	fc 01       	movw	r30, r24
    2abc:	8f ed       	ldi	r24, 0xDF	; 223
    2abe:	81 93       	st	Z+, r24
	*dest++ = 'C';
    2ac0:	83 e4       	ldi	r24, 0x43	; 67
    2ac2:	11 96       	adiw	r26, 0x01	; 1
    2ac4:	8c 93       	st	X, r24
	*dest = '\0';
    2ac6:	11 82       	std	Z+1, r1	; 0x01
}
    2ac8:	1f 91       	pop	r17
    2aca:	0f 91       	pop	r16
    2acc:	ff 90       	pop	r15
    2ace:	ef 90       	pop	r14
    2ad0:	df 90       	pop	r13
    2ad2:	08 95       	ret

00002ad4 <standby_display>:
// Function : standby_display
// Description : display board status such as AVR ip, server ip, countdown time, temparature
//
//*******************************************************************************************
void standby_display ( void )
{
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	c0 54       	subi	r28, 0x40	; 64
    2ade:	d0 40       	sbci	r29, 0x00	; 0
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	cd bf       	out	0x3d, r28	; 61
	BYTE generic_buf[64];

	// update lcd display flag not set, exit from function
	if ( flag1.bits.update_display == 0 )
    2aea:	90 91 27 01 	lds	r25, 0x0127
    2aee:	91 ff       	sbrs	r25, 1
    2af0:	4d c0       	rjmp	.+154    	; 0x2b8c <standby_display+0xb8>
		return;
	flag1.bits.update_display = 0;
    2af2:	89 2f       	mov	r24, r25
    2af4:	8d 7f       	andi	r24, 0xFD	; 253
    2af6:	80 93 27 01 	sts	0x0127, r24
	// lcd display is displaying other information, wait until busy flag clear
	if ( flag1.bits.lcd_busy )
    2afa:	92 fd       	sbrc	r25, 2
    2afc:	47 c0       	rjmp	.+142    	; 0x2b8c <standby_display+0xb8>
		return;
	// now displaying menu information, wait until exit from menu
	if ( menu_index )
    2afe:	80 91 41 01 	lds	r24, 0x0141
    2b02:	88 23       	and	r24, r24
    2b04:	09 f0       	breq	.+2      	; 0x2b08 <standby_display+0x34>
    2b06:	42 c0       	rjmp	.+132    	; 0x2b8c <standby_display+0xb8>
		return;

	// display status on lcd line 1
	lcd_putc ( '\f' );
    2b08:	8c e0       	ldi	r24, 0x0C	; 12
    2b0a:	0e 94 40 16 	call	0x2c80	; 0x2c80 <lcd_putc>
	lcd_print ( (BYTE*)standby_list[ standby_cursor - 1 ] );
    2b0e:	e0 91 40 01 	lds	r30, 0x0140
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	ee 0f       	add	r30, r30
    2b16:	ff 1f       	adc	r31, r31
    2b18:	ef 5f       	subi	r30, 0xFF	; 255
    2b1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b1c:	80 81       	ld	r24, Z
    2b1e:	91 81       	ldd	r25, Z+1	; 0x01
    2b20:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <lcd_print>

	// display status devices on lcd line 2
	lcd_putc ( '\n' );
    2b24:	8a e0       	ldi	r24, 0x0A	; 10
    2b26:	0e 94 40 16 	call	0x2c80	; 0x2c80 <lcd_putc>
	if ( standby_cursor == 1 )
    2b2a:	80 91 40 01 	lds	r24, 0x0140
    2b2e:	81 30       	cpi	r24, 0x01	; 1
    2b30:	31 f4       	brne	.+12     	; 0x2b3e <standby_display+0x6a>
	{
		print_devices (generic_buf,ind_device_cur);
    2b32:	ce 01       	movw	r24, r28
    2b34:	01 96       	adiw	r24, 0x01	; 1
    2b36:	60 91 11 01 	lds	r22, 0x0111
    2b3a:	0e 94 74 11 	call	0x22e8	; 0x22e8 <print_devices>
		
	}
	// display avr ip
	if ( standby_cursor == 2 )
    2b3e:	80 91 40 01 	lds	r24, 0x0140
    2b42:	82 30       	cpi	r24, 0x02	; 2
    2b44:	29 f4       	brne	.+10     	; 0x2b50 <standby_display+0x7c>
	{
		print_ip ( generic_buf, (BYTE*)&avr_ip, 0 );
    2b46:	ce 01       	movw	r24, r28
    2b48:	01 96       	adiw	r24, 0x01	; 1
    2b4a:	62 e3       	ldi	r22, 0x32	; 50
    2b4c:	71 e0       	ldi	r23, 0x01	; 1
    2b4e:	06 c0       	rjmp	.+12     	; 0x2b5c <standby_display+0x88>
	}
	// display server ip
	else if ( standby_cursor == 3 )
    2b50:	83 30       	cpi	r24, 0x03	; 3
    2b52:	41 f4       	brne	.+16     	; 0x2b64 <standby_display+0x90>
	{
		print_ip ( generic_buf, (BYTE*)&server_ip, 0 );
    2b54:	ce 01       	movw	r24, r28
    2b56:	01 96       	adiw	r24, 0x01	; 1
    2b58:	6e e2       	ldi	r22, 0x2E	; 46
    2b5a:	71 e0       	ldi	r23, 0x01	; 1
    2b5c:	40 e0       	ldi	r20, 0x00	; 0
    2b5e:	0e 94 08 11 	call	0x2210	; 0x2210 <print_ip>
    2b62:	10 c0       	rjmp	.+32     	; 0x2b84 <standby_display+0xb0>
	}
	// display countdown timer
	else if ( standby_cursor == 4 )
    2b64:	84 30       	cpi	r24, 0x04	; 4
    2b66:	41 f4       	brne	.+16     	; 0x2b78 <standby_display+0xa4>
	{
		print_time ( generic_buf, count_time, 0 );
    2b68:	ce 01       	movw	r24, r28
    2b6a:	01 96       	adiw	r24, 0x01	; 1
    2b6c:	6c e3       	ldi	r22, 0x3C	; 60
    2b6e:	71 e0       	ldi	r23, 0x01	; 1
    2b70:	40 e0       	ldi	r20, 0x00	; 0
    2b72:	0e 94 13 12 	call	0x2426	; 0x2426 <print_time>
    2b76:	06 c0       	rjmp	.+12     	; 0x2b84 <standby_display+0xb0>
	}
	// display current temparature
	else if ( standby_cursor == 5 )
    2b78:	85 30       	cpi	r24, 0x05	; 5
    2b7a:	21 f4       	brne	.+8      	; 0x2b84 <standby_display+0xb0>
	{
		print_temp ( generic_buf );
    2b7c:	ce 01       	movw	r24, r28
    2b7e:	01 96       	adiw	r24, 0x01	; 1
    2b80:	0e 94 41 15 	call	0x2a82	; 0x2a82 <print_temp>
	}
	lcd_print ( generic_buf );
    2b84:	ce 01       	movw	r24, r28
    2b86:	01 96       	adiw	r24, 0x01	; 1
    2b88:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <lcd_print>
}
    2b8c:	c0 5c       	subi	r28, 0xC0	; 192
    2b8e:	df 4f       	sbci	r29, 0xFF	; 255
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	f8 94       	cli
    2b94:	de bf       	out	0x3e, r29	; 62
    2b96:	0f be       	out	0x3f, r0	; 63
    2b98:	cd bf       	out	0x3d, r28	; 61
    2b9a:	cf 91       	pop	r28
    2b9c:	df 91       	pop	r29
    2b9e:	08 95       	ret

00002ba0 <lcd_send_nibble>:
//
//********************************************************************************************
void lcd_send_nibble(unsigned char data)
{
	data &= 0xF0;
	LCD_DATA_PORT &= 0x0F;
    2ba0:	92 b3       	in	r25, 0x12	; 18
    2ba2:	9f 70       	andi	r25, 0x0F	; 15
    2ba4:	92 bb       	out	0x12, r25	; 18
	LCD_DATA_PORT |= data;
    2ba6:	92 b3       	in	r25, 0x12	; 18
    2ba8:	80 7f       	andi	r24, 0xF0	; 240
    2baa:	89 2b       	or	r24, r25
    2bac:	82 bb       	out	0x12, r24	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bae:	85 e0       	ldi	r24, 0x05	; 5
    2bb0:	8a 95       	dec	r24
    2bb2:	f1 f7       	brne	.-4      	; 0x2bb0 <lcd_send_nibble+0x10>
	_delay_us(1);	// 1us
	LCD_CONTROL_PORT |= _BV(LCD_EN_PIN);
    2bb4:	c2 9a       	sbi	0x18, 2	; 24
    2bb6:	8a e0       	ldi	r24, 0x0A	; 10
    2bb8:	8a 95       	dec	r24
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <lcd_send_nibble+0x18>
	_delay_us(2);
	LCD_CONTROL_PORT &= ~_BV(LCD_EN_PIN);
    2bbc:	c2 98       	cbi	0x18, 2	; 24
}
    2bbe:	08 95       	ret

00002bc0 <lcd_send_byte>:
// Function : lcd_send_byte
// Description : Send data (byte) to lcd module
//
//********************************************************************************************
void lcd_send_byte( char data_or_cmd, char data )
{
    2bc0:	1f 93       	push	r17
    2bc2:	16 2f       	mov	r17, r22
	LCD_CONTROL_PORT &= ~_BV(LCD_RS_PIN);
    2bc4:	c0 98       	cbi	0x18, 0	; 24
	if(data_or_cmd)
    2bc6:	88 23       	and	r24, r24
    2bc8:	11 f0       	breq	.+4      	; 0x2bce <lcd_send_byte+0xe>
		LCD_CONTROL_PORT |= _BV(LCD_RS_PIN);
    2bca:	c0 9a       	sbi	0x18, 0	; 24
    2bcc:	01 c0       	rjmp	.+2      	; 0x2bd0 <lcd_send_byte+0x10>
	else
		LCD_CONTROL_PORT &= ~_BV(LCD_RS_PIN);
    2bce:	c0 98       	cbi	0x18, 0	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bd0:	88 ec       	ldi	r24, 0xC8	; 200
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	f1 f7       	brne	.-4      	; 0x2bd4 <lcd_send_byte+0x14>
	_delay_us(50);		// 1us
	LCD_CONTROL_PORT &= ~_BV(LCD_EN_PIN);
    2bd8:	c2 98       	cbi	0x18, 2	; 24
	lcd_send_nibble(data & 0xF0);
    2bda:	81 2f       	mov	r24, r17
    2bdc:	80 7f       	andi	r24, 0xF0	; 240
    2bde:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <lcd_send_nibble>
	lcd_send_nibble(data << 4);
    2be2:	81 2f       	mov	r24, r17
    2be4:	82 95       	swap	r24
    2be6:	80 7f       	andi	r24, 0xF0	; 240
    2be8:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <lcd_send_nibble>
}
    2bec:	1f 91       	pop	r17
    2bee:	08 95       	ret

00002bf0 <lcd_init>:
// Function : lcd_init
// Description : Lcd module initiation.(4-bits mode)
//
//********************************************************************************************
void lcd_init(void)
{
    2bf0:	0f 93       	push	r16
    2bf2:	1f 93       	push	r17
	char i;
	LCD_DATA_DDR |= (_BV(LCD_D7) | _BV(LCD_D6) | _BV(LCD_D5) | _BV(LCD_D4));
    2bf4:	81 b3       	in	r24, 0x11	; 17
    2bf6:	80 6f       	ori	r24, 0xF0	; 240
    2bf8:	81 bb       	out	0x11, r24	; 17
	LCD_CONTROL_DDR |= (_BV(LCD_RS_PIN) | _BV(LCD_RW_PIN) | _BV(LCD_EN_PIN));
    2bfa:	87 b3       	in	r24, 0x17	; 23
    2bfc:	87 60       	ori	r24, 0x07	; 7
    2bfe:	87 bb       	out	0x17, r24	; 23

	LCD_DATA_PORT &= ~(_BV(LCD_D7) | _BV(LCD_D6) | _BV(LCD_D5) | _BV(LCD_D4));
    2c00:	82 b3       	in	r24, 0x12	; 18
    2c02:	8f 70       	andi	r24, 0x0F	; 15
    2c04:	82 bb       	out	0x12, r24	; 18
	LCD_CONTROL_PORT &= ~(_BV(LCD_RS_PIN) | _BV(LCD_RS_PIN) | _BV(LCD_RS_PIN));
    2c06:	c0 98       	cbi	0x18, 0	; 24
    2c08:	80 e6       	ldi	r24, 0x60	; 96
    2c0a:	9a ee       	ldi	r25, 0xEA	; 234
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	f1 f7       	brne	.-4      	; 0x2c0c <lcd_init+0x1c>
	
	_delay_ms(15);		// 15 ms
	for(i=1;i<=3;++i)
	{
       lcd_send_nibble(0x30);
    2c10:	80 e3       	ldi	r24, 0x30	; 48
    2c12:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <lcd_send_nibble>
    2c16:	00 e2       	ldi	r16, 0x20	; 32
    2c18:	1e e4       	ldi	r17, 0x4E	; 78
    2c1a:	c8 01       	movw	r24, r16
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <lcd_init+0x2c>
    2c20:	80 e3       	ldi	r24, 0x30	; 48
    2c22:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <lcd_send_nibble>
    2c26:	c8 01       	movw	r24, r16
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	f1 f7       	brne	.-4      	; 0x2c28 <lcd_init+0x38>
    2c2c:	80 e3       	ldi	r24, 0x30	; 48
    2c2e:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <lcd_send_nibble>
    2c32:	c8 01       	movw	r24, r16
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <lcd_init+0x44>
       _delay_ms(5);	// 5 ms
    }
    lcd_send_nibble(0x20);
    2c38:	80 e2       	ldi	r24, 0x20	; 32
    2c3a:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <lcd_send_nibble>
	lcd_send_byte(WRITE_COMMAND, SET_FUNCTION);
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	68 e2       	ldi	r22, 0x28	; 40
    2c42:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <lcd_send_byte>
	lcd_send_byte(WRITE_COMMAND, DISPLAY_ON);
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	6c e0       	ldi	r22, 0x0C	; 12
    2c4a:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <lcd_send_byte>
	lcd_send_byte(WRITE_COMMAND, DISPLAY_CLR);
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	61 e0       	ldi	r22, 0x01	; 1
    2c52:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <lcd_send_byte>
	lcd_send_byte(WRITE_COMMAND, ENTRY_MODE);
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	66 e0       	ldi	r22, 0x06	; 6
    2c5a:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <lcd_send_byte>
}
    2c5e:	1f 91       	pop	r17
    2c60:	0f 91       	pop	r16
    2c62:	08 95       	ret

00002c64 <lcd_gotoxy>:
// Function : lcd_gotoxy
// Description : Send SET_DDRAM command to lcd module
//
//********************************************************************************************
void lcd_gotoxy( unsigned char x, unsigned char y)
{
    2c64:	98 2f       	mov	r25, r24
	char address=0;

	if(y!=1)
    2c66:	61 30       	cpi	r22, 0x01	; 1
    2c68:	11 f0       	breq	.+4      	; 0x2c6e <lcd_gotoxy+0xa>
    2c6a:	80 e4       	ldi	r24, 0x40	; 64
    2c6c:	01 c0       	rjmp	.+2      	; 0x2c70 <lcd_gotoxy+0xc>
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
		address = LCD_LINE_TWO;
	address += x-1;
    2c70:	91 50       	subi	r25, 0x01	; 1
    2c72:	98 0f       	add	r25, r24
	lcd_send_byte(WRITE_COMMAND, SET_DDRAM|address);
    2c74:	90 68       	ori	r25, 0x80	; 128
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	69 2f       	mov	r22, r25
    2c7a:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <lcd_send_byte>
}
    2c7e:	08 95       	ret

00002c80 <lcd_putc>:
// '\n' is new line (second line) command
// '\b' is cursor back command
//
//********************************************************************************************
void lcd_putc( unsigned char c)
{
    2c80:	68 2f       	mov	r22, r24
	if(c == '\f')
    2c82:	8c 30       	cpi	r24, 0x0C	; 12
    2c84:	49 f4       	brne	.+18     	; 0x2c98 <lcd_putc+0x18>
	{
		lcd_send_byte(WRITE_COMMAND, DISPLAY_CLR);
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	61 e0       	ldi	r22, 0x01	; 1
    2c8a:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <lcd_send_byte>
    2c8e:	80 e4       	ldi	r24, 0x40	; 64
    2c90:	9f e1       	ldi	r25, 0x1F	; 31
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <lcd_putc+0x12>
    2c96:	08 95       	ret
		_delay_ms(2);	// 2ms
	}
	else if(c == '\n')
    2c98:	8a 30       	cpi	r24, 0x0A	; 10
    2c9a:	29 f4       	brne	.+10     	; 0x2ca6 <lcd_putc+0x26>
		lcd_gotoxy(1, 2);
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	62 e0       	ldi	r22, 0x02	; 2
    2ca0:	0e 94 32 16 	call	0x2c64	; 0x2c64 <lcd_gotoxy>
    2ca4:	08 95       	ret
	else if(c == '\b')
    2ca6:	88 30       	cpi	r24, 0x08	; 8
    2ca8:	19 f4       	brne	.+6      	; 0x2cb0 <lcd_putc+0x30>
		lcd_send_byte(WRITE_COMMAND, CURSOR_BACK);
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	60 e1       	ldi	r22, 0x10	; 16
    2cae:	01 c0       	rjmp	.+2      	; 0x2cb2 <lcd_putc+0x32>
	else
		lcd_send_byte(WRITE_DATA, c);
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <lcd_send_byte>
    2cb6:	08 95       	ret

00002cb8 <lcd_print>:
// Function : lcd_print
// Description : print string from ram to lcd module
//
//********************************************************************************************
void lcd_print( BYTE *ptr )
{
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	ec 01       	movw	r28, r24
    2cbe:	03 c0       	rjmp	.+6      	; 0x2cc6 <lcd_print+0xe>

	while( *ptr )
	{
		lcd_putc(*ptr++);
    2cc0:	21 96       	adiw	r28, 0x01	; 1
    2cc2:	0e 94 40 16 	call	0x2c80	; 0x2c80 <lcd_putc>
//
//********************************************************************************************
void lcd_print( BYTE *ptr )
{

	while( *ptr )
    2cc6:	88 81       	ld	r24, Y
    2cc8:	88 23       	and	r24, r24
    2cca:	d1 f7       	brne	.-12     	; 0x2cc0 <lcd_print+0x8>
	{
		lcd_putc(*ptr++);
	}
}
    2ccc:	df 91       	pop	r29
    2cce:	cf 91       	pop	r28
    2cd0:	08 95       	ret

00002cd2 <lcd_print_p>:
// Function : lcd_print_p
// Description : print string from program memory to lcd module
//
//********************************************************************************************
void lcd_print_p( PGM_P ptr )
{
    2cd2:	cf 93       	push	r28
    2cd4:	df 93       	push	r29
    2cd6:	ec 01       	movw	r28, r24
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <lcd_print_p+0xc>
	unsigned char c;

	while( (c = pgm_read_byte ( ptr++ )) )
	{
		lcd_putc(c);
    2cda:	0e 94 40 16 	call	0x2c80	; 0x2c80 <lcd_putc>
    2cde:	fe 01       	movw	r30, r28
//********************************************************************************************
void lcd_print_p( PGM_P ptr )
{
	unsigned char c;

	while( (c = pgm_read_byte ( ptr++ )) )
    2ce0:	21 96       	adiw	r28, 0x01	; 1
    2ce2:	84 91       	lpm	r24, Z+
    2ce4:	88 23       	and	r24, r24
    2ce6:	c9 f7       	brne	.-14     	; 0x2cda <lcd_print_p+0x8>
	{
		lcd_putc(c);
	}
}
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	08 95       	ret

00002cee <adc_read>:
//
//********************************************************************************************
WORD adc_read ( BYTE channel )
{
	// Analog channel selection
	ADMUX = ((ADMUX) & ~0x1f) | (channel & 0x1f);
    2cee:	97 b1       	in	r25, 0x07	; 7
    2cf0:	8f 71       	andi	r24, 0x1F	; 31
    2cf2:	90 7e       	andi	r25, 0xE0	; 224
    2cf4:	89 2b       	or	r24, r25
    2cf6:	87 b9       	out	0x07, r24	; 7
	
	// Start conversion
	ADCSRA |= _BV(ADSC);
    2cf8:	36 9a       	sbi	0x06, 6	; 6

	// Wait until conversion complete
	while( bit_is_set(ADCSRA, ADSC) );
    2cfa:	36 99       	sbic	0x06, 6	; 6
    2cfc:	fe cf       	rjmp	.-4      	; 0x2cfa <adc_read+0xc>
	
	// CAUTION: READ ADCL BEFORE ADCH!!!
	return ((ADCL) | ((ADCH)<<8));
    2cfe:	24 b1       	in	r18, 0x04	; 4
    2d00:	45 b1       	in	r20, 0x05	; 5
    2d02:	94 2f       	mov	r25, r20
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	28 2b       	or	r18, r24
    2d0a:	39 2b       	or	r19, r25
}
    2d0c:	c9 01       	movw	r24, r18
    2d0e:	08 95       	ret

00002d10 <adc_init>:
void adc_init ( void )
{
	//BYTE i;

	// ADC enable, Prescaler divide by 128, ADC clock = 16MHz/128 = 125kHz
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
    2d10:	87 e8       	ldi	r24, 0x87	; 135
    2d12:	86 b9       	out	0x06, r24	; 6

	// Select Vref, internal Vref 2.56V and external capacitor
	ADMUX = _BV(REFS1) | _BV(REFS0);
    2d14:	80 ec       	ldi	r24, 0xC0	; 192
    2d16:	87 b9       	out	0x07, r24	; 7
	
	// reading temparature
	//for ( i=0; i<32; i++ )
	//	adc_read_temp ();
}
    2d18:	08 95       	ret

00002d1a <adc_read_temp>:
// Function : adc_read_temp
// Description : read temparature from ADC1 and convert to real temparature
//
//********************************************************************************************
BYTE adc_read_temp ( void )
{
    2d1a:	1f 93       	push	r17
	static BYTE buf_index=0;
	WORD result=0,data;
	BYTE loop;
	
	// Store each sample to buffer
	temp_buf[ buf_index ] = adc_read ( ADC_TEMP_CHANNEL );
    2d1c:	10 91 15 01 	lds	r17, 0x0115
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	0e 94 77 16 	call	0x2cee	; 0x2cee <adc_read>
    2d26:	e1 2f       	mov	r30, r17
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	ee 0f       	add	r30, r30
    2d2c:	ff 1f       	adc	r31, r31
    2d2e:	ea 5e       	subi	r30, 0xEA	; 234
    2d30:	fe 4f       	sbci	r31, 0xFE	; 254
    2d32:	91 83       	std	Z+1, r25	; 0x01
    2d34:	80 83       	st	Z, r24
    2d36:	e6 e1       	ldi	r30, 0x16	; 22
    2d38:	f1 e0       	ldi	r31, 0x01	; 1
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
	
	// Low pass filter 8 samples by default.
	for ( loop=0; loop<ADC_TEMP_BUFFER; loop++ )
	{
		result += temp_buf [ loop ];
    2d3e:	81 91       	ld	r24, Z+
    2d40:	91 91       	ld	r25, Z+
    2d42:	28 0f       	add	r18, r24
    2d44:	39 1f       	adc	r19, r25
	
	// Store each sample to buffer
	temp_buf[ buf_index ] = adc_read ( ADC_TEMP_CHANNEL );
	
	// Low pass filter 8 samples by default.
	for ( loop=0; loop<ADC_TEMP_BUFFER; loop++ )
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	e6 32       	cpi	r30, 0x26	; 38
    2d4a:	f8 07       	cpc	r31, r24
    2d4c:	c1 f7       	brne	.-16     	; 0x2d3e <adc_read_temp+0x24>
	{
		result += temp_buf [ loop ];
	}
	// reset index
	if( ++buf_index == ADC_TEMP_BUFFER )
    2d4e:	81 2f       	mov	r24, r17
    2d50:	8f 5f       	subi	r24, 0xFF	; 255
    2d52:	80 93 15 01 	sts	0x0115, r24
    2d56:	88 30       	cpi	r24, 0x08	; 8
    2d58:	11 f4       	brne	.+4      	; 0x2d5e <adc_read_temp+0x44>
	{
		buf_index = 0;
    2d5a:	10 92 15 01 	sts	0x0115, r1
	}
	
	// average result
	result = result / ADC_TEMP_BUFFER;
    2d5e:	b9 01       	movw	r22, r18
    2d60:	83 e0       	ldi	r24, 0x03	; 3
    2d62:	76 95       	lsr	r23
    2d64:	67 95       	ror	r22
    2d66:	8a 95       	dec	r24
    2d68:	e1 f7       	brne	.-8      	; 0x2d62 <adc_read_temp+0x48>
    2d6a:	29 ef       	ldi	r18, 0xF9	; 249
    2d6c:	35 e0       	ldi	r19, 0x05	; 5
    2d6e:	40 e0       	ldi	r20, 0x00	; 0
	
	// look-up for temparature, convert to real temparature
	for ( loop=0; loop<100; loop++ )
	{
		data = pgm_read_word ( temp_list + loop );
    2d70:	f9 01       	movw	r30, r18
    2d72:	85 91       	lpm	r24, Z+
    2d74:	94 91       	lpm	r25, Z+
		if( result <= data)
    2d76:	86 17       	cp	r24, r22
    2d78:	97 07       	cpc	r25, r23
    2d7a:	28 f4       	brcc	.+10     	; 0x2d86 <adc_read_temp+0x6c>
	
	// average result
	result = result / ADC_TEMP_BUFFER;
	
	// look-up for temparature, convert to real temparature
	for ( loop=0; loop<100; loop++ )
    2d7c:	4f 5f       	subi	r20, 0xFF	; 255
    2d7e:	2e 5f       	subi	r18, 0xFE	; 254
    2d80:	3f 4f       	sbci	r19, 0xFF	; 255
    2d82:	44 36       	cpi	r20, 0x64	; 100
    2d84:	a9 f7       	brne	.-22     	; 0x2d70 <adc_read_temp+0x56>
		if( result <= data)
			break;
	}

	return loop;
}
    2d86:	84 2f       	mov	r24, r20
    2d88:	1f 91       	pop	r17
    2d8a:	08 95       	ret

00002d8c <udp_puts_data>:
// Function : udp_puts_data
// Description : puts data from RAM to UDP tx buffer
//
//********************************************************************************************
WORD udp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
    2d8c:	fb 01       	movw	r30, r22
    2d8e:	46 5d       	subi	r20, 0xD6	; 214
    2d90:	5f 4f       	sbci	r21, 0xFF	; 255
    2d92:	dc 01       	movw	r26, r24
    2d94:	a4 0f       	add	r26, r20
    2d96:	b5 1f       	adc	r27, r21
    2d98:	4a 52       	subi	r20, 0x2A	; 42
    2d9a:	50 40       	sbci	r21, 0x00	; 0
    2d9c:	04 c0       	rjmp	.+8      	; 0x2da6 <udp_puts_data+0x1a>
	while( *data )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = *data++;
    2d9e:	8d 93       	st	X+, r24
    2da0:	31 96       	adiw	r30, 0x01	; 1
		offset++;
    2da2:	4f 5f       	subi	r20, 0xFF	; 255
    2da4:	5f 4f       	sbci	r21, 0xFF	; 255
// Description : puts data from RAM to UDP tx buffer
//
//********************************************************************************************
WORD udp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
	while( *data )
    2da6:	80 81       	ld	r24, Z
    2da8:	88 23       	and	r24, r24
    2daa:	c9 f7       	brne	.-14     	; 0x2d9e <udp_puts_data+0x12>
		rxtx_buffer[ UDP_DATA_P + offset ] = *data++;
		offset++;
	}

	return offset;
}
    2dac:	ca 01       	movw	r24, r20
    2dae:	08 95       	ret

00002db0 <udp_puts_data_p>:
// Function : udp_puts_data_p
// Description : puts data from program memory to tx buffer
//
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
    2db0:	46 5d       	subi	r20, 0xD6	; 214
    2db2:	5f 4f       	sbci	r21, 0xFF	; 255
    2db4:	dc 01       	movw	r26, r24
    2db6:	a4 0f       	add	r26, r20
    2db8:	b5 1f       	adc	r27, r21
    2dba:	4a 52       	subi	r20, 0x2A	; 42
    2dbc:	50 40       	sbci	r21, 0x00	; 0
    2dbe:	03 c0       	rjmp	.+6      	; 0x2dc6 <udp_puts_data_p+0x16>
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    2dc0:	8d 93       	st	X+, r24
		offset++;
    2dc2:	4f 5f       	subi	r20, 0xFF	; 255
    2dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    2dc6:	fb 01       	movw	r30, r22
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    2dc8:	6f 5f       	subi	r22, 0xFF	; 255
    2dca:	7f 4f       	sbci	r23, 0xFF	; 255
    2dcc:	84 91       	lpm	r24, Z+
    2dce:	88 23       	and	r24, r24
    2dd0:	b9 f7       	brne	.-18     	; 0x2dc0 <udp_puts_data_p+0x10>
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
		offset++;
	}

	return offset;
}
    2dd2:	ca 01       	movw	r24, r20
    2dd4:	08 95       	ret

00002dd6 <udp_generate_header>:
//
// Description : generate udp header
//
//********************************************************************************************
void udp_generate_header ( BYTE *rxtx_buffer, WORD_BYTES dest_port, WORD_BYTES length )
{
    2dd6:	0f 93       	push	r16
    2dd8:	1f 93       	push	r17
    2dda:	8c 01       	movw	r16, r24
	WORD_BYTES ck;

	// setup source port, default value is 3000
	rxtx_buffer[UDP_SRC_PORT_H_P] = UDP_AVR_PORT_H_V;
    2ddc:	8b e0       	ldi	r24, 0x0B	; 11
    2dde:	f8 01       	movw	r30, r16
    2de0:	82 a3       	std	Z+34, r24	; 0x22
	rxtx_buffer[UDP_SRC_PORT_L_P] = UDP_AVR_PORT_L_V;
    2de2:	88 eb       	ldi	r24, 0xB8	; 184
    2de4:	83 a3       	std	Z+35, r24	; 0x23

	// setup destination port
	rxtx_buffer[UDP_DST_PORT_H_P] = dest_port.byte.high;
    2de6:	74 a3       	std	Z+36, r23	; 0x24
	rxtx_buffer[UDP_DST_PORT_L_P] = dest_port.byte.low;
    2de8:	65 a3       	std	Z+37, r22	; 0x25

	// setup udp length
	rxtx_buffer[UDP_LENGTH_H_P] = length.byte.high;
    2dea:	56 a3       	std	Z+38, r21	; 0x26
	rxtx_buffer[UDP_LENGTH_L_P] = length.byte.low;
    2dec:	47 a3       	std	Z+39, r20	; 0x27

	// setup udp checksum
	rxtx_buffer[UDP_CHECKSUM_H_P] = 0;
    2dee:	10 a6       	std	Z+40, r1	; 0x28
	rxtx_buffer[UDP_CHECKSUM_L_P] = 0;
    2df0:	11 a6       	std	Z+41, r1	; 0x29
	// length+8 for source/destination IP address length (8-bytes)
	ck.word = software_checksum ( (BYTE*)&rxtx_buffer[IP_SRC_IP_P], length.word+8, length.word+IP_PROTO_UDP_V);
    2df2:	ba 01       	movw	r22, r20
    2df4:	6f 5e       	subi	r22, 0xEF	; 239
    2df6:	7f 4f       	sbci	r23, 0xFF	; 255
    2df8:	9b 01       	movw	r18, r22
    2dfa:	40 e0       	ldi	r20, 0x00	; 0
    2dfc:	50 e0       	ldi	r21, 0x00	; 0
    2dfe:	c8 01       	movw	r24, r16
    2e00:	4a 96       	adiw	r24, 0x1a	; 26
    2e02:	69 50       	subi	r22, 0x09	; 9
    2e04:	70 40       	sbci	r23, 0x00	; 0
    2e06:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <software_checksum>
	rxtx_buffer[UDP_CHECKSUM_H_P] = ck.byte.high;
    2e0a:	f8 01       	movw	r30, r16
    2e0c:	90 a7       	std	Z+40, r25	; 0x28
	rxtx_buffer[UDP_CHECKSUM_L_P] = ck.byte.low;
    2e0e:	81 a7       	std	Z+41, r24	; 0x29
}
    2e10:	1f 91       	pop	r17
    2e12:	0f 91       	pop	r16
    2e14:	08 95       	ret

00002e16 <udp_receive>:
//
// Description : check received packet and process UDP command.
//
//********************************************************************************************
BYTE udp_receive ( BYTE *rxtx_buffer, BYTE *dest_mac, BYTE *dest_ip )
{
    2e16:	6f 92       	push	r6
    2e18:	7f 92       	push	r7
    2e1a:	8f 92       	push	r8
    2e1c:	9f 92       	push	r9
    2e1e:	af 92       	push	r10
    2e20:	bf 92       	push	r11
    2e22:	cf 92       	push	r12
    2e24:	df 92       	push	r13
    2e26:	ef 92       	push	r14
    2e28:	ff 92       	push	r15
    2e2a:	0f 93       	push	r16
    2e2c:	1f 93       	push	r17
    2e2e:	df 93       	push	r29
    2e30:	cf 93       	push	r28
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	c3 54       	subi	r28, 0x43	; 67
    2e38:	d0 40       	sbci	r29, 0x00	; 0
    2e3a:	0f b6       	in	r0, 0x3f	; 63
    2e3c:	f8 94       	cli
    2e3e:	de bf       	out	0x3e, r29	; 62
    2e40:	0f be       	out	0x3f, r0	; 63
    2e42:	cd bf       	out	0x3d, r28	; 61
    2e44:	5c 01       	movw	r10, r24
    2e46:	4b 01       	movw	r8, r22
    2e48:	3a 01       	movw	r6, r20
	WORD_BYTES dlength, adc0;
	BYTE generic_buf[64], temp, count_time_temp[3], tmp;

	// check UDP packet and check destination port
	if ( rxtx_buffer[IP_PROTO_P] != IP_PROTO_UDP_V || rxtx_buffer[UDP_DST_PORT_H_P] != UDP_AVR_PORT_H_V || rxtx_buffer[ UDP_DST_PORT_L_P ] != UDP_AVR_PORT_L_V )
    2e4a:	fc 01       	movw	r30, r24
    2e4c:	87 89       	ldd	r24, Z+23	; 0x17
    2e4e:	81 31       	cpi	r24, 0x11	; 17
    2e50:	09 f0       	breq	.+2      	; 0x2e54 <udp_receive+0x3e>
    2e52:	0a c3       	rjmp	.+1556   	; 0x3468 <udp_receive+0x652>
    2e54:	84 a1       	ldd	r24, Z+36	; 0x24
    2e56:	8b 30       	cpi	r24, 0x0B	; 11
    2e58:	09 f0       	breq	.+2      	; 0x2e5c <udp_receive+0x46>
    2e5a:	06 c3       	rjmp	.+1548   	; 0x3468 <udp_receive+0x652>
    2e5c:	85 a1       	ldd	r24, Z+37	; 0x25
    2e5e:	88 3b       	cpi	r24, 0xB8	; 184
    2e60:	09 f0       	breq	.+2      	; 0x2e64 <udp_receive+0x4e>
    2e62:	02 c3       	rjmp	.+1540   	; 0x3468 <udp_receive+0x652>
	// AAA.AAA.AAA.AAA is an AVR IP address
	// SSS.SSS.SSS.SSS is a Server IP address
	// ';' is end of IP address
	// \r\n is end of command
	// for example : GA100512250010010.1.1.1;10.1.1.76\r\n = LED1 on, LED2 off, ADC0 0512, Temp 25, Disable send temp, Hour 01, Min 00
	if ( rxtx_buffer[UDP_DATA_P] == 'G' && rxtx_buffer[UDP_DATA_P+1] == 'A' && rxtx_buffer[UDP_DATA_P+2] == '\r' && rxtx_buffer[UDP_DATA_P+3] == '\n')
    2e64:	8a e2       	ldi	r24, 0x2A	; 42
    2e66:	c8 2e       	mov	r12, r24
    2e68:	d1 2c       	mov	r13, r1
    2e6a:	ca 0c       	add	r12, r10
    2e6c:	db 1c       	adc	r13, r11
    2e6e:	82 a5       	ldd	r24, Z+42	; 0x2a
    2e70:	87 34       	cpi	r24, 0x47	; 71
    2e72:	09 f0       	breq	.+2      	; 0x2e76 <udp_receive+0x60>
    2e74:	86 c1       	rjmp	.+780    	; 0x3182 <udp_receive+0x36c>
    2e76:	83 a5       	ldd	r24, Z+43	; 0x2b
    2e78:	81 34       	cpi	r24, 0x41	; 65
    2e7a:	09 f0       	breq	.+2      	; 0x2e7e <udp_receive+0x68>
    2e7c:	a5 c2       	rjmp	.+1354   	; 0x33c8 <udp_receive+0x5b2>
    2e7e:	84 a5       	ldd	r24, Z+44	; 0x2c
    2e80:	8d 30       	cpi	r24, 0x0D	; 13
    2e82:	09 f0       	breq	.+2      	; 0x2e86 <udp_receive+0x70>
    2e84:	a1 c2       	rjmp	.+1346   	; 0x33c8 <udp_receive+0x5b2>
    2e86:	85 a5       	ldd	r24, Z+45	; 0x2d
    2e88:	8a 30       	cpi	r24, 0x0A	; 10
    2e8a:	09 f0       	breq	.+2      	; 0x2e8e <udp_receive+0x78>
    2e8c:	9d c2       	rjmp	.+1338   	; 0x33c8 <udp_receive+0x5b2>
    2e8e:	d6 01       	movw	r26, r12
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	02 c0       	rjmp	.+4      	; 0x2e9a <udp_receive+0x84>
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    2e96:	2d 93       	st	X+, r18
		offset++;
    2e98:	01 96       	adiw	r24, 0x01	; 1
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	e7 50       	subi	r30, 0x07	; 7
    2e9e:	f9 4f       	sbci	r31, 0xF9	; 249
    2ea0:	24 91       	lpm	r18, Z+
    2ea2:	22 23       	and	r18, r18
    2ea4:	c1 f7       	brne	.-16     	; 0x2e96 <udp_receive+0x80>
    2ea6:	9c 01       	movw	r18, r24
    2ea8:	26 5d       	subi	r18, 0xD6	; 214
    2eaa:	3f 4f       	sbci	r19, 0xFF	; 255
	if ( rxtx_buffer[UDP_DATA_P] == 'G' && rxtx_buffer[UDP_DATA_P+1] == 'A' && rxtx_buffer[UDP_DATA_P+2] == '\r' && rxtx_buffer[UDP_DATA_P+3] == '\n')
	{
		// command response
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("GAOK"), 0 );
		// LED1
		if ((LED_PORT&_BV(LED_PIN1))==0)
    2eac:	af 9b       	sbis	0x15, 7	; 21
    2eae:	06 c0       	rjmp	.+12     	; 0x2ebc <udp_receive+0xa6>
    2eb0:	d5 01       	movw	r26, r10
    2eb2:	a2 0f       	add	r26, r18
    2eb4:	b3 1f       	adc	r27, r19
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("1"), dlength.word );
		else
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("0"), dlength.word );
    2eb6:	25 ef       	ldi	r18, 0xF5	; 245
    2eb8:	36 e0       	ldi	r19, 0x06	; 6
    2eba:	11 c0       	rjmp	.+34     	; 0x2ede <udp_receive+0xc8>
    2ebc:	d5 01       	movw	r26, r10
    2ebe:	a2 0f       	add	r26, r18
    2ec0:	b3 1f       	adc	r27, r19
	{
		// command response
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("GAOK"), 0 );
		// LED1
		if ((LED_PORT&_BV(LED_PIN1))==0)
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("1"), dlength.word );
    2ec2:	27 ef       	ldi	r18, 0xF7	; 247
    2ec4:	36 e0       	ldi	r19, 0x06	; 6
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <udp_receive+0xb6>
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    2ec8:	4d 93       	st	X+, r20
		offset++;
    2eca:	01 96       	adiw	r24, 0x01	; 1
    2ecc:	f9 01       	movw	r30, r18
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    2ece:	2f 5f       	subi	r18, 0xFF	; 255
    2ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed2:	44 91       	lpm	r20, Z+
    2ed4:	44 23       	and	r20, r20
    2ed6:	c1 f7       	brne	.-16     	; 0x2ec8 <udp_receive+0xb2>
    2ed8:	08 c0       	rjmp	.+16     	; 0x2eea <udp_receive+0xd4>
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    2eda:	4d 93       	st	X+, r20
		offset++;
    2edc:	01 96       	adiw	r24, 0x01	; 1
    2ede:	f9 01       	movw	r30, r18
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    2ee0:	2f 5f       	subi	r18, 0xFF	; 255
    2ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee4:	44 91       	lpm	r20, Z+
    2ee6:	44 23       	and	r20, r20
    2ee8:	c1 f7       	brne	.-16     	; 0x2eda <udp_receive+0xc4>
		if ((LED_PORT&_BV(LED_PIN1))==0)
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("1"), dlength.word );
		else
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("0"), dlength.word );
		// LED2
		if ((LED_PORT&_BV(LED_PIN2))==0)
    2eea:	ae 99       	sbic	0x15, 6	; 21
    2eec:	14 c0       	rjmp	.+40     	; 0x2f16 <udp_receive+0x100>
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("1"), dlength.word );
    2eee:	9c 01       	movw	r18, r24
    2ef0:	26 5d       	subi	r18, 0xD6	; 214
    2ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef4:	d5 01       	movw	r26, r10
    2ef6:	a2 0f       	add	r26, r18
    2ef8:	b3 1f       	adc	r27, r19
    2efa:	2a 52       	subi	r18, 0x2A	; 42
    2efc:	30 40       	sbci	r19, 0x00	; 0
    2efe:	83 ef       	ldi	r24, 0xF3	; 243
    2f00:	96 e0       	ldi	r25, 0x06	; 6
    2f02:	03 c0       	rjmp	.+6      	; 0x2f0a <udp_receive+0xf4>
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    2f04:	4d 93       	st	X+, r20
		offset++;
    2f06:	2f 5f       	subi	r18, 0xFF	; 255
    2f08:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0a:	fc 01       	movw	r30, r24
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    2f0c:	01 96       	adiw	r24, 0x01	; 1
    2f0e:	44 91       	lpm	r20, Z+
    2f10:	44 23       	and	r20, r20
    2f12:	c1 f7       	brne	.-16     	; 0x2f04 <udp_receive+0xee>
    2f14:	13 c0       	rjmp	.+38     	; 0x2f3c <udp_receive+0x126>
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("0"), dlength.word );
		// LED2
		if ((LED_PORT&_BV(LED_PIN2))==0)
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("1"), dlength.word );
		else
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("0"), dlength.word );
    2f16:	9c 01       	movw	r18, r24
    2f18:	26 5d       	subi	r18, 0xD6	; 214
    2f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f1c:	d5 01       	movw	r26, r10
    2f1e:	a2 0f       	add	r26, r18
    2f20:	b3 1f       	adc	r27, r19
    2f22:	2a 52       	subi	r18, 0x2A	; 42
    2f24:	30 40       	sbci	r19, 0x00	; 0
    2f26:	81 ef       	ldi	r24, 0xF1	; 241
    2f28:	96 e0       	ldi	r25, 0x06	; 6
    2f2a:	03 c0       	rjmp	.+6      	; 0x2f32 <udp_receive+0x11c>
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    2f2c:	4d 93       	st	X+, r20
		offset++;
    2f2e:	2f 5f       	subi	r18, 0xFF	; 255
    2f30:	3f 4f       	sbci	r19, 0xFF	; 255
    2f32:	fc 01       	movw	r30, r24
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    2f34:	01 96       	adiw	r24, 0x01	; 1
    2f36:	44 91       	lpm	r20, Z+
    2f38:	44 23       	and	r20, r20
    2f3a:	c1 f7       	brne	.-16     	; 0x2f2c <udp_receive+0x116>
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("0"), dlength.word );
		// LED2
		if ((LED_PORT&_BV(LED_PIN2))==0)
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("1"), dlength.word );
		else
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("0"), dlength.word );
    2f3c:	d2 2e       	mov	r13, r18
    2f3e:	f3 2e       	mov	r15, r19
		// ADC0
		adc0.word = adc_read ( 0 );
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	0e 94 77 16 	call	0x2cee	; 0x2cee <adc_read>
    2f46:	ac 01       	movw	r20, r24
		print_decimal ( generic_buf, 4, adc0.word );
    2f48:	8e 01       	movw	r16, r28
    2f4a:	0c 5f       	subi	r16, 0xFC	; 252
    2f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4e:	c8 01       	movw	r24, r16
    2f50:	64 e0       	ldi	r22, 0x04	; 4
    2f52:	0e 94 ca 10 	call	0x2194	; 0x2194 <print_decimal>
		generic_buf[ 4 ] = '\0';
    2f56:	18 86       	std	Y+8, r1	; 0x08
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
    2f58:	2d 2d       	mov	r18, r13
    2f5a:	3f 2d       	mov	r19, r15
    2f5c:	c9 01       	movw	r24, r18
    2f5e:	7c 01       	movw	r14, r24
    2f60:	8a e2       	ldi	r24, 0x2A	; 42
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	e8 0e       	add	r14, r24
    2f66:	f9 1e       	adc	r15, r25
    2f68:	d5 01       	movw	r26, r10
    2f6a:	ae 0d       	add	r26, r14
    2f6c:	bf 1d       	adc	r27, r15
    2f6e:	e6 ed       	ldi	r30, 0xD6	; 214
    2f70:	ff ef       	ldi	r31, 0xFF	; 255
    2f72:	ee 0e       	add	r14, r30
    2f74:	ff 1e       	adc	r15, r31
    2f76:	f8 01       	movw	r30, r16
    2f78:	05 c0       	rjmp	.+10     	; 0x2f84 <udp_receive+0x16e>
//********************************************************************************************
WORD udp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
	while( *data )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = *data++;
    2f7a:	8d 93       	st	X+, r24
    2f7c:	31 96       	adiw	r30, 0x01	; 1
		offset++;
    2f7e:	08 94       	sec
    2f80:	e1 1c       	adc	r14, r1
    2f82:	f1 1c       	adc	r15, r1
// Description : puts data from RAM to UDP tx buffer
//
//********************************************************************************************
WORD udp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
	while( *data )
    2f84:	80 81       	ld	r24, Z
    2f86:	88 23       	and	r24, r24
    2f88:	c1 f7       	brne	.-16     	; 0x2f7a <udp_receive+0x164>
		adc0.word = adc_read ( 0 );
		print_decimal ( generic_buf, 4, adc0.word );
		generic_buf[ 4 ] = '\0';
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
		// temperature
		temp = adc_read_temp();
    2f8a:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <adc_read_temp>
    2f8e:	48 2f       	mov	r20, r24
		print_decimal ( generic_buf, 2, temp );
    2f90:	8e 01       	movw	r16, r28
    2f92:	0c 5f       	subi	r16, 0xFC	; 252
    2f94:	1f 4f       	sbci	r17, 0xFF	; 255
    2f96:	c8 01       	movw	r24, r16
    2f98:	62 e0       	ldi	r22, 0x02	; 2
    2f9a:	50 e0       	ldi	r21, 0x00	; 0
    2f9c:	0e 94 ca 10 	call	0x2194	; 0x2194 <print_decimal>
		generic_buf[ 2 ] = '\0';
    2fa0:	1e 82       	std	Y+6, r1	; 0x06
    2fa2:	8a e2       	ldi	r24, 0x2A	; 42
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	e8 0e       	add	r14, r24
    2fa8:	f9 1e       	adc	r15, r25
    2faa:	d5 01       	movw	r26, r10
    2fac:	ae 0d       	add	r26, r14
    2fae:	bf 1d       	adc	r27, r15
    2fb0:	e6 ed       	ldi	r30, 0xD6	; 214
    2fb2:	ff ef       	ldi	r31, 0xFF	; 255
    2fb4:	ee 0e       	add	r14, r30
    2fb6:	ff 1e       	adc	r15, r31
    2fb8:	f8 01       	movw	r30, r16
    2fba:	05 c0       	rjmp	.+10     	; 0x2fc6 <udp_receive+0x1b0>
//********************************************************************************************
WORD udp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
	while( *data )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = *data++;
    2fbc:	8d 93       	st	X+, r24
    2fbe:	31 96       	adiw	r30, 0x01	; 1
		offset++;
    2fc0:	08 94       	sec
    2fc2:	e1 1c       	adc	r14, r1
    2fc4:	f1 1c       	adc	r15, r1
// Description : puts data from RAM to UDP tx buffer
//
//********************************************************************************************
WORD udp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
	while( *data )
    2fc6:	80 81       	ld	r24, Z
    2fc8:	88 23       	and	r24, r24
    2fca:	c1 f7       	brne	.-16     	; 0x2fbc <udp_receive+0x1a6>
		temp = adc_read_temp();
		print_decimal ( generic_buf, 2, temp );
		generic_buf[ 2 ] = '\0';
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
		// send temp config
		eeprom_read_block ( count_time_temp, ee_count_time, 3 );
    2fcc:	ce 01       	movw	r24, r28
    2fce:	01 96       	adiw	r24, 0x01	; 1
    2fd0:	68 e0       	ldi	r22, 0x08	; 8
    2fd2:	70 e0       	ldi	r23, 0x00	; 0
    2fd4:	43 e0       	ldi	r20, 0x03	; 3
    2fd6:	50 e0       	ldi	r21, 0x00	; 0
    2fd8:	0e 94 5f 1a 	call	0x34be	; 0x34be <__eerd_block_m32>
		if (count_time_temp[0])
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
    2fde:	97 01       	movw	r18, r14
    2fe0:	26 5d       	subi	r18, 0xD6	; 214
    2fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe4:	88 23       	and	r24, r24
    2fe6:	31 f4       	brne	.+12     	; 0x2ff4 <udp_receive+0x1de>
    2fe8:	d5 01       	movw	r26, r10
    2fea:	a2 0f       	add	r26, r18
    2fec:	b3 1f       	adc	r27, r19
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("1"), dlength.word );
		else
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("0"), dlength.word );
    2fee:	8d ee       	ldi	r24, 0xED	; 237
    2ff0:	96 e0       	ldi	r25, 0x06	; 6
    2ff2:	14 c0       	rjmp	.+40     	; 0x301c <udp_receive+0x206>
    2ff4:	d5 01       	movw	r26, r10
    2ff6:	a2 0f       	add	r26, r18
    2ff8:	b3 1f       	adc	r27, r19
		generic_buf[ 2 ] = '\0';
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
		// send temp config
		eeprom_read_block ( count_time_temp, ee_count_time, 3 );
		if (count_time_temp[0])
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("1"), dlength.word );
    2ffa:	8f ee       	ldi	r24, 0xEF	; 239
    2ffc:	96 e0       	ldi	r25, 0x06	; 6
    2ffe:	04 c0       	rjmp	.+8      	; 0x3008 <udp_receive+0x1f2>
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    3000:	2d 93       	st	X+, r18
		offset++;
    3002:	08 94       	sec
    3004:	e1 1c       	adc	r14, r1
    3006:	f1 1c       	adc	r15, r1
    3008:	fc 01       	movw	r30, r24
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    300a:	01 96       	adiw	r24, 0x01	; 1
    300c:	24 91       	lpm	r18, Z+
    300e:	22 23       	and	r18, r18
    3010:	b9 f7       	brne	.-18     	; 0x3000 <udp_receive+0x1ea>
    3012:	09 c0       	rjmp	.+18     	; 0x3026 <udp_receive+0x210>
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    3014:	2d 93       	st	X+, r18
		offset++;
    3016:	08 94       	sec
    3018:	e1 1c       	adc	r14, r1
    301a:	f1 1c       	adc	r15, r1
    301c:	fc 01       	movw	r30, r24
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    301e:	01 96       	adiw	r24, 0x01	; 1
    3020:	24 91       	lpm	r18, Z+
    3022:	22 23       	and	r18, r18
    3024:	b9 f7       	brne	.-18     	; 0x3014 <udp_receive+0x1fe>
		eeprom_read_block ( count_time_temp, ee_count_time, 3 );
		if (count_time_temp[0])
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("1"), dlength.word );
		else
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("0"), dlength.word );
		print_decimal ( generic_buf, 2, count_time_temp[1] );
    3026:	8e 01       	movw	r16, r28
    3028:	0c 5f       	subi	r16, 0xFC	; 252
    302a:	1f 4f       	sbci	r17, 0xFF	; 255
    302c:	4a 81       	ldd	r20, Y+2	; 0x02
    302e:	c8 01       	movw	r24, r16
    3030:	62 e0       	ldi	r22, 0x02	; 2
    3032:	50 e0       	ldi	r21, 0x00	; 0
    3034:	0e 94 ca 10 	call	0x2194	; 0x2194 <print_decimal>
		generic_buf[ 2 ] = '\0';
    3038:	1e 82       	std	Y+6, r1	; 0x06
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
    303a:	2e 2d       	mov	r18, r14
    303c:	3f 2d       	mov	r19, r15
    303e:	c9 01       	movw	r24, r18
    3040:	7c 01       	movw	r14, r24
    3042:	8a e2       	ldi	r24, 0x2A	; 42
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	e8 0e       	add	r14, r24
    3048:	f9 1e       	adc	r15, r25
    304a:	d5 01       	movw	r26, r10
    304c:	ae 0d       	add	r26, r14
    304e:	bf 1d       	adc	r27, r15
    3050:	e6 ed       	ldi	r30, 0xD6	; 214
    3052:	ff ef       	ldi	r31, 0xFF	; 255
    3054:	ee 0e       	add	r14, r30
    3056:	ff 1e       	adc	r15, r31
    3058:	f8 01       	movw	r30, r16
    305a:	05 c0       	rjmp	.+10     	; 0x3066 <udp_receive+0x250>
//********************************************************************************************
WORD udp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
	while( *data )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = *data++;
    305c:	8d 93       	st	X+, r24
    305e:	31 96       	adiw	r30, 0x01	; 1
		offset++;
    3060:	08 94       	sec
    3062:	e1 1c       	adc	r14, r1
    3064:	f1 1c       	adc	r15, r1
// Description : puts data from RAM to UDP tx buffer
//
//********************************************************************************************
WORD udp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
	while( *data )
    3066:	80 81       	ld	r24, Z
    3068:	88 23       	and	r24, r24
    306a:	c1 f7       	brne	.-16     	; 0x305c <udp_receive+0x246>
		else
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("0"), dlength.word );
		print_decimal ( generic_buf, 2, count_time_temp[1] );
		generic_buf[ 2 ] = '\0';
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
		print_decimal ( generic_buf, 2, count_time_temp[2] );
    306c:	8e 01       	movw	r16, r28
    306e:	0c 5f       	subi	r16, 0xFC	; 252
    3070:	1f 4f       	sbci	r17, 0xFF	; 255
    3072:	4b 81       	ldd	r20, Y+3	; 0x03
    3074:	c8 01       	movw	r24, r16
    3076:	62 e0       	ldi	r22, 0x02	; 2
    3078:	50 e0       	ldi	r21, 0x00	; 0
    307a:	0e 94 ca 10 	call	0x2194	; 0x2194 <print_decimal>
		generic_buf[ 2 ] = '\0';
    307e:	1e 82       	std	Y+6, r1	; 0x06
    3080:	8a e2       	ldi	r24, 0x2A	; 42
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	e8 0e       	add	r14, r24
    3086:	f9 1e       	adc	r15, r25
    3088:	d5 01       	movw	r26, r10
    308a:	ae 0d       	add	r26, r14
    308c:	bf 1d       	adc	r27, r15
    308e:	e6 ed       	ldi	r30, 0xD6	; 214
    3090:	ff ef       	ldi	r31, 0xFF	; 255
    3092:	ee 0e       	add	r14, r30
    3094:	ff 1e       	adc	r15, r31
    3096:	f8 01       	movw	r30, r16
    3098:	05 c0       	rjmp	.+10     	; 0x30a4 <udp_receive+0x28e>
//********************************************************************************************
WORD udp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
	while( *data )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = *data++;
    309a:	8d 93       	st	X+, r24
    309c:	31 96       	adiw	r30, 0x01	; 1
		offset++;
    309e:	08 94       	sec
    30a0:	e1 1c       	adc	r14, r1
    30a2:	f1 1c       	adc	r15, r1
// Description : puts data from RAM to UDP tx buffer
//
//********************************************************************************************
WORD udp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
	while( *data )
    30a4:	80 81       	ld	r24, Z
    30a6:	88 23       	and	r24, r24
    30a8:	c1 f7       	brne	.-16     	; 0x309a <udp_receive+0x284>
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
		print_decimal ( generic_buf, 2, count_time_temp[2] );
		generic_buf[ 2 ] = '\0';
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
		// AVR IP address
		print_ip ( generic_buf, (BYTE*)&avr_ip, 0 );
    30aa:	8e 01       	movw	r16, r28
    30ac:	0c 5f       	subi	r16, 0xFC	; 252
    30ae:	1f 4f       	sbci	r17, 0xFF	; 255
    30b0:	c8 01       	movw	r24, r16
    30b2:	62 e3       	ldi	r22, 0x32	; 50
    30b4:	71 e0       	ldi	r23, 0x01	; 1
    30b6:	40 e0       	ldi	r20, 0x00	; 0
    30b8:	0e 94 08 11 	call	0x2210	; 0x2210 <print_ip>
    30bc:	8a e2       	ldi	r24, 0x2A	; 42
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	e8 0e       	add	r14, r24
    30c2:	f9 1e       	adc	r15, r25
    30c4:	d5 01       	movw	r26, r10
    30c6:	ae 0d       	add	r26, r14
    30c8:	bf 1d       	adc	r27, r15
    30ca:	e6 ed       	ldi	r30, 0xD6	; 214
    30cc:	ff ef       	ldi	r31, 0xFF	; 255
    30ce:	ee 0e       	add	r14, r30
    30d0:	ff 1e       	adc	r15, r31
    30d2:	f8 01       	movw	r30, r16
    30d4:	05 c0       	rjmp	.+10     	; 0x30e0 <udp_receive+0x2ca>
//********************************************************************************************
WORD udp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
	while( *data )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = *data++;
    30d6:	8d 93       	st	X+, r24
    30d8:	31 96       	adiw	r30, 0x01	; 1
		offset++;
    30da:	08 94       	sec
    30dc:	e1 1c       	adc	r14, r1
    30de:	f1 1c       	adc	r15, r1
// Description : puts data from RAM to UDP tx buffer
//
//********************************************************************************************
WORD udp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
	while( *data )
    30e0:	80 81       	ld	r24, Z
    30e2:	88 23       	and	r24, r24
    30e4:	c1 f7       	brne	.-16     	; 0x30d6 <udp_receive+0x2c0>
    30e6:	8a e2       	ldi	r24, 0x2A	; 42
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	e8 0e       	add	r14, r24
    30ec:	f9 1e       	adc	r15, r25
    30ee:	d5 01       	movw	r26, r10
    30f0:	ae 0d       	add	r26, r14
    30f2:	bf 1d       	adc	r27, r15
    30f4:	e6 ed       	ldi	r30, 0xD6	; 214
    30f6:	ff ef       	ldi	r31, 0xFF	; 255
    30f8:	ee 0e       	add	r14, r30
    30fa:	ff 1e       	adc	r15, r31
		generic_buf[ 2 ] = '\0';
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
		// AVR IP address
		print_ip ( generic_buf, (BYTE*)&avr_ip, 0 );
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR(";"), dlength.word );
    30fc:	8b ee       	ldi	r24, 0xEB	; 235
    30fe:	96 e0       	ldi	r25, 0x06	; 6
    3100:	04 c0       	rjmp	.+8      	; 0x310a <udp_receive+0x2f4>
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    3102:	2d 93       	st	X+, r18
		offset++;
    3104:	08 94       	sec
    3106:	e1 1c       	adc	r14, r1
    3108:	f1 1c       	adc	r15, r1
    310a:	fc 01       	movw	r30, r24
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    310c:	01 96       	adiw	r24, 0x01	; 1
    310e:	24 91       	lpm	r18, Z+
    3110:	22 23       	and	r18, r18
    3112:	b9 f7       	brne	.-18     	; 0x3102 <udp_receive+0x2ec>
		// AVR IP address
		print_ip ( generic_buf, (BYTE*)&avr_ip, 0 );
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR(";"), dlength.word );
		// Server IP address
		print_ip ( generic_buf, (BYTE*)&server_ip, 0 );
    3114:	8e 01       	movw	r16, r28
    3116:	0c 5f       	subi	r16, 0xFC	; 252
    3118:	1f 4f       	sbci	r17, 0xFF	; 255
    311a:	c8 01       	movw	r24, r16
    311c:	6e e2       	ldi	r22, 0x2E	; 46
    311e:	71 e0       	ldi	r23, 0x01	; 1
    3120:	40 e0       	ldi	r20, 0x00	; 0
    3122:	0e 94 08 11 	call	0x2210	; 0x2210 <print_ip>
    3126:	8a e2       	ldi	r24, 0x2A	; 42
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	e8 0e       	add	r14, r24
    312c:	f9 1e       	adc	r15, r25
    312e:	d5 01       	movw	r26, r10
    3130:	ae 0d       	add	r26, r14
    3132:	bf 1d       	adc	r27, r15
    3134:	e6 ed       	ldi	r30, 0xD6	; 214
    3136:	ff ef       	ldi	r31, 0xFF	; 255
    3138:	ee 0e       	add	r14, r30
    313a:	ff 1e       	adc	r15, r31
    313c:	f8 01       	movw	r30, r16
    313e:	05 c0       	rjmp	.+10     	; 0x314a <udp_receive+0x334>
//********************************************************************************************
WORD udp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
	while( *data )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = *data++;
    3140:	8d 93       	st	X+, r24
    3142:	31 96       	adiw	r30, 0x01	; 1
		offset++;
    3144:	08 94       	sec
    3146:	e1 1c       	adc	r14, r1
    3148:	f1 1c       	adc	r15, r1
// Description : puts data from RAM to UDP tx buffer
//
//********************************************************************************************
WORD udp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
	while( *data )
    314a:	80 81       	ld	r24, Z
    314c:	88 23       	and	r24, r24
    314e:	c1 f7       	brne	.-16     	; 0x3140 <udp_receive+0x32a>
    3150:	8a e2       	ldi	r24, 0x2A	; 42
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	e8 0e       	add	r14, r24
    3156:	f9 1e       	adc	r15, r25
    3158:	d5 01       	movw	r26, r10
    315a:	ae 0d       	add	r26, r14
    315c:	bf 1d       	adc	r27, r15
    315e:	e6 ed       	ldi	r30, 0xD6	; 214
    3160:	ff ef       	ldi	r31, 0xFF	; 255
    3162:	ee 0e       	add	r14, r30
    3164:	ff 1e       	adc	r15, r31
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR(";"), dlength.word );
		// Server IP address
		print_ip ( generic_buf, (BYTE*)&server_ip, 0 );
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR(";\r\n"), dlength.word );
    3166:	87 ee       	ldi	r24, 0xE7	; 231
    3168:	96 e0       	ldi	r25, 0x06	; 6
    316a:	04 c0       	rjmp	.+8      	; 0x3174 <udp_receive+0x35e>
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    316c:	2d 93       	st	X+, r18
		offset++;
    316e:	08 94       	sec
    3170:	e1 1c       	adc	r14, r1
    3172:	f1 1c       	adc	r15, r1
    3174:	fc 01       	movw	r30, r24
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    3176:	01 96       	adiw	r24, 0x01	; 1
    3178:	24 91       	lpm	r18, Z+
    317a:	22 23       	and	r18, r18
    317c:	b9 f7       	brne	.-18     	; 0x316c <udp_receive+0x356>
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR(";"), dlength.word );
		// Server IP address
		print_ip ( generic_buf, (BYTE*)&server_ip, 0 );
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR(";\r\n"), dlength.word );
    317e:	de 2c       	mov	r13, r14
    3180:	4e c1       	rjmp	.+668    	; 0x341e <udp_receive+0x608>
	// E is send temp enable/disable
	// HH is hours for send temp
	// MM is minutes for send temp
	// \r\n is end of command
	// for example : ST10115\r\n = Enable send temp, 1-Hour, 15-Minutes
	else if ( rxtx_buffer[UDP_DATA_P] == 'S' && rxtx_buffer[UDP_DATA_P+1] == 'T' && rxtx_buffer[UDP_DATA_P+7] == '\r' && rxtx_buffer[UDP_DATA_P+8] == '\n')
    3182:	83 35       	cpi	r24, 0x53	; 83
    3184:	09 f0       	breq	.+2      	; 0x3188 <udp_receive+0x372>
    3186:	ab c0       	rjmp	.+342    	; 0x32de <udp_receive+0x4c8>
    3188:	f5 01       	movw	r30, r10
    318a:	83 a5       	ldd	r24, Z+43	; 0x2b
    318c:	84 35       	cpi	r24, 0x54	; 84
    318e:	d9 f5       	brne	.+118    	; 0x3206 <udp_receive+0x3f0>
    3190:	81 a9       	ldd	r24, Z+49	; 0x31
    3192:	8d 30       	cpi	r24, 0x0D	; 13
    3194:	09 f0       	breq	.+2      	; 0x3198 <udp_receive+0x382>
    3196:	ed c0       	rjmp	.+474    	; 0x3372 <udp_receive+0x55c>
    3198:	32 a9       	ldd	r19, Z+50	; 0x32
    319a:	3a 30       	cpi	r19, 0x0A	; 10
    319c:	09 f0       	breq	.+2      	; 0x31a0 <udp_receive+0x38a>
    319e:	e9 c0       	rjmp	.+466    	; 0x3372 <udp_receive+0x55c>
	{
		// get enable/disable
		count_time_temp[0] = rxtx_buffer[UDP_DATA_P+2] - '0';
    31a0:	84 a5       	ldd	r24, Z+44	; 0x2c
    31a2:	80 53       	subi	r24, 0x30	; 48
    31a4:	89 83       	std	Y+1, r24	; 0x01
		// get hour
		count_time_temp[1] = (rxtx_buffer[UDP_DATA_P+3] - '0') * 10;
    31a6:	85 a5       	ldd	r24, Z+45	; 0x2d
    31a8:	83 9f       	mul	r24, r19
    31aa:	c0 01       	movw	r24, r0
    31ac:	11 24       	eor	r1, r1
		count_time_temp[1] = count_time_temp[1] + (rxtx_buffer[UDP_DATA_P+4] - '0');
    31ae:	26 a5       	ldd	r18, Z+46	; 0x2e
    31b0:	28 0f       	add	r18, r24
    31b2:	20 51       	subi	r18, 0x10	; 16
    31b4:	2a 83       	std	Y+2, r18	; 0x02
		// get minute
		count_time_temp[2] = (rxtx_buffer[UDP_DATA_P+5] - '0') * 10;
    31b6:	87 a5       	ldd	r24, Z+47	; 0x2f
    31b8:	83 9f       	mul	r24, r19
    31ba:	c0 01       	movw	r24, r0
    31bc:	11 24       	eor	r1, r1
		count_time_temp[2] = count_time_temp[2] + (rxtx_buffer[UDP_DATA_P+6] - '0');
    31be:	20 a9       	ldd	r18, Z+48	; 0x30
    31c0:	28 0f       	add	r18, r24
    31c2:	20 51       	subi	r18, 0x10	; 16
    31c4:	2b 83       	std	Y+3, r18	; 0x03
		// write config to eeprom
		eeprom_write_block ( count_time_temp, ee_count_time, 3 );
    31c6:	ce 01       	movw	r24, r28
    31c8:	01 96       	adiw	r24, 0x01	; 1
    31ca:	68 e0       	ldi	r22, 0x08	; 8
    31cc:	70 e0       	ldi	r23, 0x00	; 0
    31ce:	43 e0       	ldi	r20, 0x03	; 3
    31d0:	50 e0       	ldi	r21, 0x00	; 0
    31d2:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__eewr_block_m32>
		eeprom_read_block ( count_time, ee_count_time, 3 );
    31d6:	8c e3       	ldi	r24, 0x3C	; 60
    31d8:	91 e0       	ldi	r25, 0x01	; 1
    31da:	68 e0       	ldi	r22, 0x08	; 8
    31dc:	70 e0       	ldi	r23, 0x00	; 0
    31de:	43 e0       	ldi	r20, 0x03	; 3
    31e0:	50 e0       	ldi	r21, 0x00	; 0
    31e2:	0e 94 5f 1a 	call	0x34be	; 0x34be <__eerd_block_m32>
		count_time[3] = 0;
    31e6:	10 92 3f 01 	sts	0x013F, r1
    31ea:	d6 01       	movw	r26, r12
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	03 c0       	rjmp	.+6      	; 0x31f8 <udp_receive+0x3e2>
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    31f2:	8d 93       	st	X+, r24
		offset++;
    31f4:	2f 5f       	subi	r18, 0xFF	; 255
    31f6:	3f 4f       	sbci	r19, 0xFF	; 255
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    31f8:	f9 01       	movw	r30, r18
    31fa:	e0 52       	subi	r30, 0x20	; 32
    31fc:	f9 4f       	sbci	r31, 0xF9	; 249
    31fe:	84 91       	lpm	r24, Z+
    3200:	88 23       	and	r24, r24
    3202:	b9 f7       	brne	.-18     	; 0x31f2 <udp_receive+0x3dc>
    3204:	0a c1       	rjmp	.+532    	; 0x341a <udp_receive+0x604>
	// AAA.AAA.AAA.AAA is an AVR IP address (variable length)
	// SSS.SSS.SSS.SSS is a Server IP address (variable length)
	// ';' end of ip address
	// \r\n is end of command
	// for example : SI10.1.1.1;10.1.1.76;\r\n
	else if ( rxtx_buffer[UDP_DATA_P] == 'S' && rxtx_buffer[UDP_DATA_P+1] == 'I' )
    3206:	89 34       	cpi	r24, 0x49	; 73
    3208:	09 f0       	breq	.+2      	; 0x320c <udp_receive+0x3f6>
    320a:	b3 c0       	rjmp	.+358    	; 0x3372 <udp_receive+0x55c>
    320c:	f5 01       	movw	r30, r10
    320e:	ec 5a       	subi	r30, 0xAC	; 172
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	9a e2       	ldi	r25, 0x2A	; 42
	{
		// find \r\n
		for(tmp=UDP_DATA_P; tmp<UDP_DATA_P+128; tmp++)
		{
			if(rxtx_buffer[UDP_DATA_P+tmp]=='\r' && rxtx_buffer[UDP_DATA_P+tmp+1]=='\n')
    3214:	80 81       	ld	r24, Z
    3216:	8d 30       	cpi	r24, 0x0D	; 13
    3218:	19 f4       	brne	.+6      	; 0x3220 <udp_receive+0x40a>
    321a:	81 81       	ldd	r24, Z+1	; 0x01
    321c:	8a 30       	cpi	r24, 0x0A	; 10
    321e:	39 f0       	breq	.+14     	; 0x322e <udp_receive+0x418>
	// \r\n is end of command
	// for example : SI10.1.1.1;10.1.1.76;\r\n
	else if ( rxtx_buffer[UDP_DATA_P] == 'S' && rxtx_buffer[UDP_DATA_P+1] == 'I' )
	{
		// find \r\n
		for(tmp=UDP_DATA_P; tmp<UDP_DATA_P+128; tmp++)
    3220:	9f 5f       	subi	r25, 0xFF	; 255
    3222:	31 96       	adiw	r30, 0x01	; 1
    3224:	9a 3a       	cpi	r25, 0xAA	; 170
    3226:	b1 f7       	brne	.-20     	; 0x3214 <udp_receive+0x3fe>
    3228:	02 c0       	rjmp	.+4      	; 0x322e <udp_receive+0x418>
		}
		if(temp==0)
		{
			tmp = 0;
			// find ';' end of IP address and replace it with zero
			while ( rxtx_buffer[UDP_DATA_P+tmp] != ';') tmp++;
    322a:	0f 5f       	subi	r16, 0xFF	; 255
    322c:	01 c0       	rjmp	.+2      	; 0x3230 <udp_receive+0x41a>
    322e:	00 e0       	ldi	r16, 0x00	; 0
    3230:	e0 2f       	mov	r30, r16
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	ba 96       	adiw	r30, 0x2a	; 42
    3236:	ea 0d       	add	r30, r10
    3238:	fb 1d       	adc	r31, r11
    323a:	80 81       	ld	r24, Z
    323c:	8b 33       	cpi	r24, 0x3B	; 59
    323e:	a9 f7       	brne	.-22     	; 0x322a <udp_receive+0x414>
    3240:	f0 2e       	mov	r15, r16
			rxtx_buffer[UDP_DATA_P+tmp] = 0;
    3242:	10 82       	st	Z, r1
			// use http_get_ip to convert ascii to hex 
			if ( http_get_ip ( (BYTE*)&rxtx_buffer[UDP_DATA_P+2], (BYTE*)&avr_ip ) == 4 )
    3244:	c5 01       	movw	r24, r10
    3246:	8c 96       	adiw	r24, 0x2c	; 44
    3248:	62 e3       	ldi	r22, 0x32	; 50
    324a:	71 e0       	ldi	r23, 0x01	; 1
    324c:	0e 94 aa 07 	call	0xf54	; 0xf54 <http_get_ip>
    3250:	84 30       	cpi	r24, 0x04	; 4
    3252:	41 f4       	brne	.+16     	; 0x3264 <udp_receive+0x44e>
				eeprom_write_block ( &avr_ip, ee_avr_ip, 4 );
    3254:	82 e3       	ldi	r24, 0x32	; 50
    3256:	91 e0       	ldi	r25, 0x01	; 1
    3258:	60 e0       	ldi	r22, 0x00	; 0
    325a:	70 e0       	ldi	r23, 0x00	; 0
    325c:	44 e0       	ldi	r20, 0x04	; 4
    325e:	50 e0       	ldi	r21, 0x00	; 0
    3260:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__eewr_block_m32>
			eeprom_read_block ( &avr_ip, ee_avr_ip, 4 );
    3264:	82 e3       	ldi	r24, 0x32	; 50
    3266:	91 e0       	ldi	r25, 0x01	; 1
    3268:	60 e0       	ldi	r22, 0x00	; 0
    326a:	70 e0       	ldi	r23, 0x00	; 0
    326c:	44 e0       	ldi	r20, 0x04	; 4
    326e:	50 e0       	ldi	r21, 0x00	; 0
    3270:	0e 94 5f 1a 	call	0x34be	; 0x34be <__eerd_block_m32>
    3274:	01 c0       	rjmp	.+2      	; 0x3278 <udp_receive+0x462>
		
			// Get server IP
			temp = tmp+1;
			while ( rxtx_buffer[UDP_DATA_P+tmp] != ';') tmp++;
    3276:	0f 5f       	subi	r16, 0xFF	; 255
    3278:	e0 2f       	mov	r30, r16
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	ba 96       	adiw	r30, 0x2a	; 42
    327e:	ea 0d       	add	r30, r10
    3280:	fb 1d       	adc	r31, r11
    3282:	80 81       	ld	r24, Z
    3284:	8b 33       	cpi	r24, 0x3B	; 59
    3286:	b9 f7       	brne	.-18     	; 0x3276 <udp_receive+0x460>
			rxtx_buffer[UDP_DATA_P+tmp] = '\0';
    3288:	10 82       	st	Z, r1
			// use http_get_ip to convert ascii to hex 
			if ( http_get_ip ( (BYTE*)&rxtx_buffer[UDP_DATA_P+temp], (BYTE*)&server_ip ) == 4 )
    328a:	f3 94       	inc	r15
    328c:	8f 2d       	mov	r24, r15
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	8a 96       	adiw	r24, 0x2a	; 42
    3292:	8a 0d       	add	r24, r10
    3294:	9b 1d       	adc	r25, r11
    3296:	6e e2       	ldi	r22, 0x2E	; 46
    3298:	71 e0       	ldi	r23, 0x01	; 1
    329a:	0e 94 aa 07 	call	0xf54	; 0xf54 <http_get_ip>
    329e:	84 30       	cpi	r24, 0x04	; 4
    32a0:	41 f4       	brne	.+16     	; 0x32b2 <udp_receive+0x49c>
				eeprom_write_block ( &avr_ip, ee_server_ip, 4 );
    32a2:	82 e3       	ldi	r24, 0x32	; 50
    32a4:	91 e0       	ldi	r25, 0x01	; 1
    32a6:	64 e0       	ldi	r22, 0x04	; 4
    32a8:	70 e0       	ldi	r23, 0x00	; 0
    32aa:	44 e0       	ldi	r20, 0x04	; 4
    32ac:	50 e0       	ldi	r21, 0x00	; 0
    32ae:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__eewr_block_m32>
			eeprom_read_block ( &avr_ip, ee_server_ip, 4 );
    32b2:	82 e3       	ldi	r24, 0x32	; 50
    32b4:	91 e0       	ldi	r25, 0x01	; 1
    32b6:	64 e0       	ldi	r22, 0x04	; 4
    32b8:	70 e0       	ldi	r23, 0x00	; 0
    32ba:	44 e0       	ldi	r20, 0x04	; 4
    32bc:	50 e0       	ldi	r21, 0x00	; 0
    32be:	0e 94 5f 1a 	call	0x34be	; 0x34be <__eerd_block_m32>
    32c2:	d6 01       	movw	r26, r12
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	03 c0       	rjmp	.+6      	; 0x32d0 <udp_receive+0x4ba>
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    32ca:	8d 93       	st	X+, r24
		offset++;
    32cc:	2f 5f       	subi	r18, 0xFF	; 255
    32ce:	3f 4f       	sbci	r19, 0xFF	; 255
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    32d0:	f9 01       	movw	r30, r18
    32d2:	e7 52       	subi	r30, 0x27	; 39
    32d4:	f9 4f       	sbci	r31, 0xF9	; 249
    32d6:	84 91       	lpm	r24, Z+
    32d8:	88 23       	and	r24, r24
    32da:	b9 f7       	brne	.-18     	; 0x32ca <udp_receive+0x4b4>
    32dc:	9e c0       	rjmp	.+316    	; 0x341a <udp_receive+0x604>
	// 1111111111111111 is 1'st line character (variable length, max is 16)
	// 2222222222222222 is 2'nd line character (variable length, max is 16)
	// ';' end of character
	// \r\n is end of command
	// for example : WLHello World!;I'm AVRnet;\r\n
	else if ( rxtx_buffer[UDP_DATA_P] == 'W' && rxtx_buffer[UDP_DATA_P+1] == 'L')
    32de:	87 35       	cpi	r24, 0x57	; 87
    32e0:	09 f0       	breq	.+2      	; 0x32e4 <udp_receive+0x4ce>
    32e2:	45 c0       	rjmp	.+138    	; 0x336e <udp_receive+0x558>
    32e4:	f5 01       	movw	r30, r10
    32e6:	83 a5       	ldd	r24, Z+43	; 0x2b
    32e8:	8c 34       	cpi	r24, 0x4C	; 76
    32ea:	09 f0       	breq	.+2      	; 0x32ee <udp_receive+0x4d8>
    32ec:	6d c0       	rjmp	.+218    	; 0x33c8 <udp_receive+0x5b2>
    32ee:	ec 5a       	subi	r30, 0xAC	; 172
    32f0:	ff 4f       	sbci	r31, 0xFF	; 255
    32f2:	9a e2       	ldi	r25, 0x2A	; 42
	{
		// find \r\n
		for(tmp=UDP_DATA_P; tmp<UDP_DATA_P+128; tmp++)
		{
			if(rxtx_buffer[UDP_DATA_P+tmp]=='\r' && rxtx_buffer[UDP_DATA_P+tmp+1]=='\n')
    32f4:	80 81       	ld	r24, Z
    32f6:	8d 30       	cpi	r24, 0x0D	; 13
    32f8:	19 f4       	brne	.+6      	; 0x3300 <udp_receive+0x4ea>
    32fa:	81 81       	ldd	r24, Z+1	; 0x01
    32fc:	8a 30       	cpi	r24, 0x0A	; 10
    32fe:	39 f0       	breq	.+14     	; 0x330e <udp_receive+0x4f8>
	// \r\n is end of command
	// for example : WLHello World!;I'm AVRnet;\r\n
	else if ( rxtx_buffer[UDP_DATA_P] == 'W' && rxtx_buffer[UDP_DATA_P+1] == 'L')
	{
		// find \r\n
		for(tmp=UDP_DATA_P; tmp<UDP_DATA_P+128; tmp++)
    3300:	9f 5f       	subi	r25, 0xFF	; 255
    3302:	31 96       	adiw	r30, 0x01	; 1
    3304:	9a 3a       	cpi	r25, 0xAA	; 170
    3306:	b1 f7       	brne	.-20     	; 0x32f4 <udp_receive+0x4de>
    3308:	02 c0       	rjmp	.+4      	; 0x330e <udp_receive+0x4f8>
		}
		if(temp==0)
		{
			tmp=0;
			// find end of 1'st line and replace it with '\n'
			while( rxtx_buffer[UDP_DATA_P+tmp] != ';' ) tmp++;
    330a:	9f 5f       	subi	r25, 0xFF	; 255
    330c:	01 c0       	rjmp	.+2      	; 0x3310 <udp_receive+0x4fa>
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	e9 2f       	mov	r30, r25
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	ba 96       	adiw	r30, 0x2a	; 42
    3316:	ea 0d       	add	r30, r10
    3318:	fb 1d       	adc	r31, r11
    331a:	80 81       	ld	r24, Z
    331c:	8b 33       	cpi	r24, 0x3B	; 59
    331e:	a9 f7       	brne	.-22     	; 0x330a <udp_receive+0x4f4>
			rxtx_buffer[UDP_DATA_P+tmp] = '\n';
    3320:	8a e0       	ldi	r24, 0x0A	; 10
    3322:	80 83       	st	Z, r24
    3324:	01 c0       	rjmp	.+2      	; 0x3328 <udp_receive+0x512>
			// find end of 1'st line and replace it with '\0'
			while( rxtx_buffer[UDP_DATA_P+tmp] != ';' ) tmp++;
    3326:	9f 5f       	subi	r25, 0xFF	; 255
    3328:	e9 2f       	mov	r30, r25
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	ba 96       	adiw	r30, 0x2a	; 42
    332e:	ea 0d       	add	r30, r10
    3330:	fb 1d       	adc	r31, r11
    3332:	80 81       	ld	r24, Z
    3334:	8b 33       	cpi	r24, 0x3B	; 59
    3336:	b9 f7       	brne	.-18     	; 0x3326 <udp_receive+0x510>
			rxtx_buffer[UDP_DATA_P+tmp] = '\0';
    3338:	10 82       	st	Z, r1
			// print string to LCD
			lcd_putc ( '\f' );
    333a:	8c e0       	ldi	r24, 0x0C	; 12
    333c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <lcd_putc>
			lcd_print ( (BYTE*)&rxtx_buffer[UDP_DATA_P+2] );
    3340:	c5 01       	movw	r24, r10
    3342:	8c 96       	adiw	r24, 0x2c	; 44
    3344:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <lcd_print>
			flag1.bits.lcd_busy = 1;
    3348:	80 91 27 01 	lds	r24, 0x0127
    334c:	84 60       	ori	r24, 0x04	; 4
    334e:	80 93 27 01 	sts	0x0127, r24
    3352:	d6 01       	movw	r26, r12
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	03 c0       	rjmp	.+6      	; 0x3360 <udp_receive+0x54a>
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    335a:	8d 93       	st	X+, r24
		offset++;
    335c:	2f 5f       	subi	r18, 0xFF	; 255
    335e:	3f 4f       	sbci	r19, 0xFF	; 255
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    3360:	f9 01       	movw	r30, r18
    3362:	ee 52       	subi	r30, 0x2E	; 46
    3364:	f9 4f       	sbci	r31, 0xF9	; 249
    3366:	84 91       	lpm	r24, Z+
    3368:	88 23       	and	r24, r24
    336a:	b9 f7       	brne	.-18     	; 0x335a <udp_receive+0x544>
    336c:	56 c0       	rjmp	.+172    	; 0x341a <udp_receive+0x604>
	// "SL" command, is set LED1, LED2 command
	// "SL" command format is SL12\r\n
	// 1 is on/off command for LED1 '1' = ON, '0' = OFF
	// 2 is on/off command for LED2 '1' = ON, '0' = OFF
	// \r\n is end of command
	else if(rxtx_buffer[UDP_DATA_P]=='S' && rxtx_buffer[UDP_DATA_P+1]=='L' && rxtx_buffer[UDP_DATA_P+4]=='\r' && rxtx_buffer[UDP_DATA_P+5]=='\n')
    336e:	83 35       	cpi	r24, 0x53	; 83
    3370:	29 f5       	brne	.+74     	; 0x33bc <udp_receive+0x5a6>
    3372:	f5 01       	movw	r30, r10
    3374:	83 a5       	ldd	r24, Z+43	; 0x2b
    3376:	8c 34       	cpi	r24, 0x4C	; 76
    3378:	39 f5       	brne	.+78     	; 0x33c8 <udp_receive+0x5b2>
    337a:	86 a5       	ldd	r24, Z+46	; 0x2e
    337c:	8d 30       	cpi	r24, 0x0D	; 13
    337e:	21 f5       	brne	.+72     	; 0x33c8 <udp_receive+0x5b2>
    3380:	87 a5       	ldd	r24, Z+47	; 0x2f
    3382:	8a 30       	cpi	r24, 0x0A	; 10
    3384:	09 f5       	brne	.+66     	; 0x33c8 <udp_receive+0x5b2>
	{
		// on/off LED1
		if(rxtx_buffer[UDP_DATA_P+2]=='0')
    3386:	84 a5       	ldd	r24, Z+44	; 0x2c
    3388:	80 33       	cpi	r24, 0x30	; 48
    338a:	11 f4       	brne	.+4      	; 0x3390 <udp_receive+0x57a>
			LED_PORT |= _BV ( LED_PIN1 );
    338c:	af 9a       	sbi	0x15, 7	; 21
    338e:	01 c0       	rjmp	.+2      	; 0x3392 <udp_receive+0x57c>
		else
			LED_PORT &= ~_BV ( LED_PIN1 );
    3390:	af 98       	cbi	0x15, 7	; 21
		// on/off LED2
		if(rxtx_buffer[UDP_DATA_P+3]=='0')
    3392:	f5 01       	movw	r30, r10
    3394:	85 a5       	ldd	r24, Z+45	; 0x2d
    3396:	80 33       	cpi	r24, 0x30	; 48
    3398:	29 f4       	brne	.+10     	; 0x33a4 <udp_receive+0x58e>
			LED_PORT |= _BV ( LED_PIN2 );
    339a:	ae 9a       	sbi	0x15, 6	; 21
    339c:	d6 01       	movw	r26, r12
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	05 c0       	rjmp	.+10     	; 0x33ae <udp_receive+0x598>
		else
			LED_PORT &= ~_BV ( LED_PIN2 );
    33a4:	ae 98       	cbi	0x15, 6	; 21
    33a6:	fa cf       	rjmp	.-12     	; 0x339c <udp_receive+0x586>
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    33a8:	8d 93       	st	X+, r24
		offset++;
    33aa:	2f 5f       	subi	r18, 0xFF	; 255
    33ac:	3f 4f       	sbci	r19, 0xFF	; 255
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    33ae:	f9 01       	movw	r30, r18
    33b0:	e5 53       	subi	r30, 0x35	; 53
    33b2:	f9 4f       	sbci	r31, 0xF9	; 249
    33b4:	84 91       	lpm	r24, Z+
    33b6:	88 23       	and	r24, r24
    33b8:	b9 f7       	brne	.-18     	; 0x33a8 <udp_receive+0x592>
    33ba:	2f c0       	rjmp	.+94     	; 0x341a <udp_receive+0x604>
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("SLOK\r\n"), 0 );
	}
	// added in V1.1 ==============================================================================
	// "RS" is software reset command
#ifndef REMOVE_BOOTLOADER_SUPPORT
	else if(rxtx_buffer[UDP_DATA_P]=='R' && rxtx_buffer[UDP_DATA_P+1]=='S' && rxtx_buffer[UDP_DATA_P+2]=='\r' && rxtx_buffer[UDP_DATA_P+3]=='\n')
    33bc:	82 35       	cpi	r24, 0x52	; 82
    33be:	21 f4       	brne	.+8      	; 0x33c8 <udp_receive+0x5b2>
    33c0:	f5 01       	movw	r30, r10
    33c2:	83 a5       	ldd	r24, Z+43	; 0x2b
    33c4:	83 35       	cpi	r24, 0x53	; 83
    33c6:	21 f0       	breq	.+8      	; 0x33d0 <udp_receive+0x5ba>
    33c8:	d6 01       	movw	r26, r12
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	1f c0       	rjmp	.+62     	; 0x340e <udp_receive+0x5f8>
    33d0:	f5 01       	movw	r30, r10
    33d2:	84 a5       	ldd	r24, Z+44	; 0x2c
    33d4:	8d 30       	cpi	r24, 0x0D	; 13
    33d6:	c1 f7       	brne	.-16     	; 0x33c8 <udp_receive+0x5b2>
    33d8:	85 a5       	ldd	r24, Z+45	; 0x2d
    33da:	8a 30       	cpi	r24, 0x0A	; 10
    33dc:	a9 f7       	brne	.-22     	; 0x33c8 <udp_receive+0x5b2>
    33de:	d6 01       	movw	r26, r12
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	03 c0       	rjmp	.+6      	; 0x33ec <udp_receive+0x5d6>
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    33e6:	8d 93       	st	X+, r24
		offset++;
    33e8:	2f 5f       	subi	r18, 0xFF	; 255
    33ea:	3f 4f       	sbci	r19, 0xFF	; 255
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    33ec:	f9 01       	movw	r30, r18
    33ee:	e7 53       	subi	r30, 0x37	; 55
    33f0:	f9 4f       	sbci	r31, 0xF9	; 249
    33f2:	84 91       	lpm	r24, Z+
    33f4:	88 23       	and	r24, r24
    33f6:	b9 f7       	brne	.-18     	; 0x33e6 <udp_receive+0x5d0>
	// "RS" is software reset command
#ifndef REMOVE_BOOTLOADER_SUPPORT
	else if(rxtx_buffer[UDP_DATA_P]=='R' && rxtx_buffer[UDP_DATA_P+1]=='S' && rxtx_buffer[UDP_DATA_P+2]=='\r' && rxtx_buffer[UDP_DATA_P+3]=='\n')
	{
		// send command response
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("Y"), 0 );
    33f8:	d2 2e       	mov	r13, r18
    33fa:	f3 2e       	mov	r15, r19
		flag2.bits.software_reset = 1;
    33fc:	80 91 26 01 	lds	r24, 0x0126
    3400:	82 60       	ori	r24, 0x02	; 2
    3402:	80 93 26 01 	sts	0x0126, r24
    3406:	0b c0       	rjmp	.+22     	; 0x341e <udp_receive+0x608>
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    3408:	8d 93       	st	X+, r24
		offset++;
    340a:	2f 5f       	subi	r18, 0xFF	; 255
    340c:	3f 4f       	sbci	r19, 0xFF	; 255
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    340e:	f9 01       	movw	r30, r18
    3410:	ef 53       	subi	r30, 0x3F	; 63
    3412:	f9 4f       	sbci	r31, 0xF9	; 249
    3414:	84 91       	lpm	r24, Z+
    3416:	88 23       	and	r24, r24
    3418:	b9 f7       	brne	.-18     	; 0x3408 <udp_receive+0x5f2>
#endif
	// end added in V1.1 ==========================================================================
	else
	{
		// unknown command, send "ERROR" to client
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("ERROR\r\n"), 0 );
    341a:	d2 2e       	mov	r13, r18
    341c:	f3 2e       	mov	r15, r19
	}

	// set ethernet header
	eth_generate_header (rxtx_buffer, (WORD_BYTES){ETH_TYPE_IP_V}, dest_mac );
    341e:	c5 01       	movw	r24, r10
    3420:	60 e0       	ldi	r22, 0x00	; 0
    3422:	78 e0       	ldi	r23, 0x08	; 8
    3424:	a4 01       	movw	r20, r8
    3426:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <eth_generate_header>
	
	// generate ip header and checksum
	ip_generate_header (rxtx_buffer, (WORD_BYTES){sizeof(IP_HEADER)+sizeof(UDP_HEADER)+dlength.word}, IP_PROTO_UDP_V, dest_ip );
    342a:	0d 2d       	mov	r16, r13
    342c:	1f 2d       	mov	r17, r15
    342e:	04 5e       	subi	r16, 0xE4	; 228
    3430:	1f 4f       	sbci	r17, 0xFF	; 255
    3432:	c5 01       	movw	r24, r10
    3434:	b8 01       	movw	r22, r16
    3436:	41 e1       	ldi	r20, 0x11	; 17
    3438:	93 01       	movw	r18, r6
    343a:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <ip_generate_header>

	// generate UDP header
	udp_generate_header (rxtx_buffer, (WORD_BYTES){(rxtx_buffer[UDP_SRC_PORT_H_P]<<8)|rxtx_buffer[UDP_SRC_PORT_L_P]}, (WORD_BYTES){sizeof(UDP_HEADER)+dlength.word});
    343e:	f5 01       	movw	r30, r10
    3440:	72 a1       	ldd	r23, Z+34	; 0x22
    3442:	60 e0       	ldi	r22, 0x00	; 0
    3444:	83 a1       	ldd	r24, Z+35	; 0x23
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	68 2b       	or	r22, r24
    344a:	79 2b       	or	r23, r25
    344c:	04 51       	subi	r16, 0x14	; 20
    344e:	10 40       	sbci	r17, 0x00	; 0
    3450:	c5 01       	movw	r24, r10
    3452:	a8 01       	movw	r20, r16
    3454:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <udp_generate_header>

	// send packet to ethernet media
	enc28j60_packet_send ( rxtx_buffer, sizeof(ETH_HEADER)+sizeof(IP_HEADER)+sizeof(UDP_HEADER)+dlength.word );
    3458:	0e 5d       	subi	r16, 0xDE	; 222
    345a:	1f 4f       	sbci	r17, 0xFF	; 255
    345c:	c5 01       	movw	r24, r10
    345e:	b8 01       	movw	r22, r16
    3460:	0e 94 08 05 	call	0xa10	; 0xa10 <enc28j60_packet_send>
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	01 c0       	rjmp	.+2      	; 0x346a <udp_receive+0x654>

	return 1;
    3468:	80 e0       	ldi	r24, 0x00	; 0
}
    346a:	cd 5b       	subi	r28, 0xBD	; 189
    346c:	df 4f       	sbci	r29, 0xFF	; 255
    346e:	0f b6       	in	r0, 0x3f	; 63
    3470:	f8 94       	cli
    3472:	de bf       	out	0x3e, r29	; 62
    3474:	0f be       	out	0x3f, r0	; 63
    3476:	cd bf       	out	0x3d, r28	; 61
    3478:	cf 91       	pop	r28
    347a:	df 91       	pop	r29
    347c:	1f 91       	pop	r17
    347e:	0f 91       	pop	r16
    3480:	ff 90       	pop	r15
    3482:	ef 90       	pop	r14
    3484:	df 90       	pop	r13
    3486:	cf 90       	pop	r12
    3488:	bf 90       	pop	r11
    348a:	af 90       	pop	r10
    348c:	9f 90       	pop	r9
    348e:	8f 90       	pop	r8
    3490:	7f 90       	pop	r7
    3492:	6f 90       	pop	r6
    3494:	08 95       	ret

00003496 <__udivmodhi4>:
    3496:	aa 1b       	sub	r26, r26
    3498:	bb 1b       	sub	r27, r27
    349a:	51 e1       	ldi	r21, 0x11	; 17
    349c:	07 c0       	rjmp	.+14     	; 0x34ac <__udivmodhi4_ep>

0000349e <__udivmodhi4_loop>:
    349e:	aa 1f       	adc	r26, r26
    34a0:	bb 1f       	adc	r27, r27
    34a2:	a6 17       	cp	r26, r22
    34a4:	b7 07       	cpc	r27, r23
    34a6:	10 f0       	brcs	.+4      	; 0x34ac <__udivmodhi4_ep>
    34a8:	a6 1b       	sub	r26, r22
    34aa:	b7 0b       	sbc	r27, r23

000034ac <__udivmodhi4_ep>:
    34ac:	88 1f       	adc	r24, r24
    34ae:	99 1f       	adc	r25, r25
    34b0:	5a 95       	dec	r21
    34b2:	a9 f7       	brne	.-22     	; 0x349e <__udivmodhi4_loop>
    34b4:	80 95       	com	r24
    34b6:	90 95       	com	r25
    34b8:	bc 01       	movw	r22, r24
    34ba:	cd 01       	movw	r24, r26
    34bc:	08 95       	ret

000034be <__eerd_block_m32>:
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22

000034c2 <__eerd_blraw_m32>:
    34c2:	fc 01       	movw	r30, r24
    34c4:	e1 99       	sbic	0x1c, 1	; 28
    34c6:	fe cf       	rjmp	.-4      	; 0x34c4 <__eerd_blraw_m32+0x2>
    34c8:	06 c0       	rjmp	.+12     	; 0x34d6 <__eerd_blraw_m32+0x14>
    34ca:	ff bb       	out	0x1f, r31	; 31
    34cc:	ee bb       	out	0x1e, r30	; 30
    34ce:	e0 9a       	sbi	0x1c, 0	; 28
    34d0:	31 96       	adiw	r30, 0x01	; 1
    34d2:	0d b2       	in	r0, 0x1d	; 29
    34d4:	0d 92       	st	X+, r0
    34d6:	41 50       	subi	r20, 0x01	; 1
    34d8:	50 40       	sbci	r21, 0x00	; 0
    34da:	b8 f7       	brcc	.-18     	; 0x34ca <__eerd_blraw_m32+0x8>
    34dc:	08 95       	ret

000034de <__eerd_byte_m32>:
    34de:	e1 99       	sbic	0x1c, 1	; 28
    34e0:	fe cf       	rjmp	.-4      	; 0x34de <__eerd_byte_m32>
    34e2:	9f bb       	out	0x1f, r25	; 31
    34e4:	8e bb       	out	0x1e, r24	; 30
    34e6:	e0 9a       	sbi	0x1c, 0	; 28
    34e8:	99 27       	eor	r25, r25
    34ea:	8d b3       	in	r24, 0x1d	; 29
    34ec:	08 95       	ret

000034ee <__eewr_block_m32>:
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	03 c0       	rjmp	.+6      	; 0x34fa <__eewr_block_m32+0xc>
    34f4:	2d 91       	ld	r18, X+
    34f6:	0e 94 82 1a 	call	0x3504	; 0x3504 <__eewr_r18_m32>
    34fa:	41 50       	subi	r20, 0x01	; 1
    34fc:	50 40       	sbci	r21, 0x00	; 0
    34fe:	d0 f7       	brcc	.-12     	; 0x34f4 <__eewr_block_m32+0x6>
    3500:	08 95       	ret

00003502 <__eewr_byte_m32>:
    3502:	26 2f       	mov	r18, r22

00003504 <__eewr_r18_m32>:
    3504:	e1 99       	sbic	0x1c, 1	; 28
    3506:	fe cf       	rjmp	.-4      	; 0x3504 <__eewr_r18_m32>
    3508:	9f bb       	out	0x1f, r25	; 31
    350a:	8e bb       	out	0x1e, r24	; 30
    350c:	2d bb       	out	0x1d, r18	; 29
    350e:	0f b6       	in	r0, 0x3f	; 63
    3510:	f8 94       	cli
    3512:	e2 9a       	sbi	0x1c, 2	; 28
    3514:	e1 9a       	sbi	0x1c, 1	; 28
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	01 96       	adiw	r24, 0x01	; 1
    351a:	08 95       	ret

0000351c <_exit>:
    351c:	f8 94       	cli

0000351e <__stop_program>:
    351e:	ff cf       	rjmp	.-2      	; 0x351e <__stop_program>
