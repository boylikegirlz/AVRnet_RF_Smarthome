
avrnet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b86  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00002b86  00002c3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  0080010c  0080010c  00002ce6  2**0
                  ALLOC
  3 .eeprom       0000000b  00810000  00810000  00002ce6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000140  00000000  00000000  00002cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000007ca  00000000  00000000  00002e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004558  00000000  00000000  000035fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010e2  00000000  00000000  00007b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002970  00000000  00000000  00008c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000490  00000000  00000000  0000b5a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ec  00000000  00000000  0000ba38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001aff  00000000  00000000  0000c324  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000de23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__ctors_end>
       4:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
       8:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
       c:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      10:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      14:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      18:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      1c:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      20:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      24:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      28:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      2c:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      30:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      34:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      38:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      3c:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      40:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      44:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      48:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      4c:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      50:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>

00000054 <version>:
      54:	53 6d 61 72 74 20 68 6f 6d 65 00                    Smart home.

0000005f <web_title>:
      5f:	57 65 6c 6c 63 6f 6d 65 20 74 6f 20 73 6d 61 72     Wellcome to smar
      6f:	74 20 68 6f 6d 65 20 70 61 67 65 00                 t home page.

0000007b <tag_br>:
      7b:	3c 62 72 3e 00                                      <br>.

00000080 <tag_hr>:
      80:	3c 68 72 20 77 69 64 74 68 3d 22 31 30 30 25 22     <hr width="100%"
      90:	20 73 69 7a 65 3d 22 31 22 3e 3c 62 72 3e 00         size="1"><br>.

0000009f <tag_form>:
      9f:	3c 66 6f 72 6d 20 61 63 74 69 6f 6e 3d 22 2e 2f     <form action="./
      af:	3f 22 20 6d 65 74 68 6f 64 3d 22 67 65 74 22 3e     ?" method="get">
	...

000000c0 <__c.2608>:
      c0:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
      d0:	6d 69 74 22 20 76 61 6c 75 65 3d 22 57 72 69 74     mit" value="Writ
      e0:	65 20 4c 43 44 22 3e 3c 2f 66 6f 72 6d 3e 00        e LCD"></form>.

000000ef <__c.2606>:
      ef:	3c 69 6e 70 75 74 20 6e 61 6d 65 3d 22 6c 63 64     <input name="lcd
      ff:	32 22 20 74 79 70 65 3d 22 74 65 78 74 22 20 73     2" type="text" s
     10f:	69 7a 65 3d 22 31 36 22 20 6d 61 78 6c 65 6e 67     ize="16" maxleng
     11f:	74 68 3d 22 31 36 22 3e 00                          th="16">.

00000128 <__c.2604>:
     128:	3c 69 6e 70 75 74 20 6e 61 6d 65 3d 22 6c 63 64     <input name="lcd
     138:	31 22 20 74 79 70 65 3d 22 74 65 78 74 22 20 73     1" type="text" s
     148:	69 7a 65 3d 22 31 36 22 20 6d 61 78 6c 65 6e 67     ize="16" maxleng
     158:	74 68 3d 22 31 36 22 3e 3c 62 72 3e 00              th="16"><br>.

00000165 <__c.2602>:
     165:	26 64 65 67 3b 43 3c 62 72 3e 00                    &deg;C<br>.

00000170 <__c.2600>:
     170:	20 20 54 65 6d 70 61 72 61 74 75 72 65 20 3d 20       Temparature = 
	...

00000181 <__c.2598>:
     181:	41 43 44 30 20 3d 20 00                             ACD0 = .

00000189 <__c.2596>:
     189:	3c 2f 61 3e 20 5d 3c 62 72 3e 3c 62 72 3e 00        </a> ]<br><br>.

00000198 <__c.2594>:
     198:	31 22 3e 4f 4e 00                                   1">ON.

0000019e <__c.2592>:
     19e:	30 22 3e 4f 46 46 00                                0">OFF.

000001a5 <__c.2590>:
     1a5:	3c 2f 66 6f 6e 74 3e 20 5b 20 3c 61 20 68 72 65     </font> [ <a hre
     1b5:	66 3d 22 2e 2f 3f 6c 36 3d 00                       f="./?l6=.

000001bf <__c.2588>:
     1bf:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 72 65 64 3e     <font color=red>
     1cf:	4f 46 46 00                                         OFF.

000001d3 <__c.2586>:
     1d3:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 67 72 65 65     <font color=gree
     1e3:	6e 3e 4f 4e 00                                      n>ON.

000001e8 <__c.2584>:
     1e8:	3c 2f 61 3e 20 5d 2c 20 4c 45 44 36 3a 20 00        </a> ], LED6: .

000001f7 <__c.2582>:
     1f7:	31 22 3e 4f 4e 00                                   1">ON.

000001fd <__c.2580>:
     1fd:	30 22 3e 4f 46 46 00                                0">OFF.

00000204 <__c.2578>:
     204:	3c 2f 66 6f 6e 74 3e 20 5b 20 3c 61 20 68 72 65     </font> [ <a hre
     214:	66 3d 22 2e 2f 3f 6c 35 3d 00                       f="./?l5=.

0000021e <__c.2576>:
     21e:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 72 65 64 3e     <font color=red>
     22e:	4f 46 46 00                                         OFF.

00000232 <__c.2574>:
     232:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 67 72 65 65     <font color=gree
     242:	6e 3e 4f 4e 00                                      n>ON.

00000247 <__c.2572>:
     247:	3c 2f 61 3e 20 5d 2c 20 4c 45 44 35 3a 20 00        </a> ], LED5: .

00000256 <__c.2570>:
     256:	31 22 3e 4f 4e 00                                   1">ON.

0000025c <__c.2568>:
     25c:	30 22 3e 4f 46 46 00                                0">OFF.

00000263 <__c.2566>:
     263:	3c 2f 66 6f 6e 74 3e 20 5b 20 3c 61 20 68 72 65     </font> [ <a hre
     273:	66 3d 22 2e 2f 3f 6c 34 3d 00                       f="./?l4=.

0000027d <__c.2564>:
     27d:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 72 65 64 3e     <font color=red>
     28d:	4f 46 46 00                                         OFF.

00000291 <__c.2562>:
     291:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 67 72 65 65     <font color=gree
     2a1:	6e 3e 4f 4e 00                                      n>ON.

000002a6 <__c.2560>:
     2a6:	3c 2f 61 3e 20 5d 2c 20 4c 45 44 34 3a 20 00        </a> ], LED4: .

000002b5 <__c.2558>:
     2b5:	31 22 3e 4f 4e 00                                   1">ON.

000002bb <__c.2556>:
     2bb:	30 22 3e 4f 46 46 00                                0">OFF.

000002c2 <__c.2554>:
     2c2:	3c 2f 66 6f 6e 74 3e 20 5b 20 3c 61 20 68 72 65     </font> [ <a hre
     2d2:	66 3d 22 2e 2f 3f 6c 33 3d 00                       f="./?l3=.

000002dc <__c.2552>:
     2dc:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 72 65 64 3e     <font color=red>
     2ec:	4f 46 46 00                                         OFF.

000002f0 <__c.2550>:
     2f0:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 67 72 65 65     <font color=gree
     300:	6e 3e 4f 4e 00                                      n>ON.

00000305 <__c.2548>:
     305:	3c 2f 61 3e 20 5d 2c 20 4c 45 44 33 3a 20 00        </a> ], LED3: .

00000314 <__c.2546>:
     314:	31 22 3e 4f 4e 00                                   1">ON.

0000031a <__c.2544>:
     31a:	30 22 3e 4f 46 46 00                                0">OFF.

00000321 <__c.2542>:
     321:	3c 2f 66 6f 6e 74 3e 20 5b 20 3c 61 20 68 72 65     </font> [ <a hre
     331:	66 3d 22 2e 2f 3f 6c 32 3d 00                       f="./?l2=.

0000033b <__c.2540>:
     33b:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 72 65 64 3e     <font color=red>
     34b:	4f 46 46 00                                         OFF.

0000034f <__c.2538>:
     34f:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 67 72 65 65     <font color=gree
     35f:	6e 3e 4f 4e 00                                      n>ON.

00000364 <__c.2536>:
     364:	3c 2f 61 3e 20 5d 2c 20 4c 45 44 32 3a 20 00        </a> ], LED2: .

00000373 <__c.2534>:
     373:	31 22 3e 4f 4e 00                                   1">ON.

00000379 <__c.2532>:
     379:	30 22 3e 4f 46 46 00                                0">OFF.

00000380 <__c.2530>:
     380:	3c 2f 66 6f 6e 74 3e 20 5b 20 3c 61 20 68 72 65     </font> [ <a hre
     390:	66 3d 22 2e 2f 3f 6c 31 3d 00                       f="./?l1=.

0000039a <__c.2528>:
     39a:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 72 65 64 3e     <font color=red>
     3aa:	4f 46 46 00                                         OFF.

000003ae <__c.2526>:
     3ae:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 67 72 65 65     <font color=gree
     3be:	6e 3e 4f 4e 00                                      n>ON.

000003c3 <__c.2524>:
     3c3:	4c 45 44 31 3a 20 00                                LED1: .

000003ca <__c.2522>:
     3ca:	3c 2f 74 69 74 6c 65 3e 00                          </title>.

000003d3 <__c.2520>:
     3d3:	3c 74 69 74 6c 65 3e 00                             <title>.

000003db <__c.2518>:
     3db:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     3eb:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     3fb:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

00000408 <__c.2456>:
     408:	22 7d 00                                            "}.

0000040b <__c.2454>:
     40b:	2c 22 73 69 70 22 3a 22 00                          ,"sip":".

00000414 <__c.2452>:
     414:	22 00                                               ".

00000416 <__c.2450>:
     416:	2c 22 61 69 70 22 3a 22 00                          ,"aip":".

0000041f <__c.2448>:
     41f:	22 00                                               ".

00000421 <__c.2446>:
     421:	2c 22 74 65 6d 70 22 3a 22 00                       ,"temp":".

0000042b <__c.2444>:
     42b:	22 00                                               ".

0000042d <__c.2442>:
     42d:	2c 22 41 43 44 30 22 3a 22 00                       ,"ACD0":".

00000437 <__c.2440>:
     437:	30 22 00                                            0".

0000043a <__c.2438>:
     43a:	31 22 00                                            1".

0000043d <__c.2436>:
     43d:	2c 22 6c 36 22 3a 22 00                             ,"l6":".

00000445 <__c.2434>:
     445:	30 22 00                                            0".

00000448 <__c.2432>:
     448:	31 22 00                                            1".

0000044b <__c.2430>:
     44b:	2c 22 6c 35 22 3a 22 00                             ,"l5":".

00000453 <__c.2428>:
     453:	30 22 00                                            0".

00000456 <__c.2426>:
     456:	31 22 00                                            1".

00000459 <__c.2424>:
     459:	2c 22 6c 34 22 3a 22 00                             ,"l4":".

00000461 <__c.2422>:
     461:	30 22 00                                            0".

00000464 <__c.2420>:
     464:	31 22 00                                            1".

00000467 <__c.2418>:
     467:	2c 22 6c 33 22 3a 22 00                             ,"l3":".

0000046f <__c.2416>:
     46f:	31 22 00                                            1".

00000472 <__c.2414>:
     472:	30 22 00                                            0".

00000475 <__c.2412>:
     475:	2c 22 6c 32 22 3a 22 00                             ,"l2":".

0000047d <__c.2410>:
     47d:	30 22 00                                            0".

00000480 <__c.2408>:
     480:	31 22 00                                            1".

00000483 <__c.2406>:
     483:	7b 22 6c 31 22 3a 22 00                             {"l1":".

0000048b <__c.2404>:
     48b:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     49b:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     4ab:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

000004b8 <__c.2392>:
     4b8:	7b 22 73 74 61 74 75 73 22 3a 22 4f 4b 22 7d 00     {"status":"OK"}.

000004c8 <__c.2390>:
     4c8:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     4d8:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     4e8:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

000004f5 <__c.2373>:
     4f5:	43 6f 6e 6e 65 63 74 69 6f 6e 3a 20 6b 65 65 70     Connection: keep
     505:	2d 61 6c 69 76 65 0d 0a 0d 0a 00                    -alive.....

00000510 <__c.2371>:
     510:	4b 65 65 70 2d 41 6c 69 76 65 3a 20 33 30 30 0d     Keep-Alive: 300.
     520:	0a 00                                               ..

00000522 <__c.2369>:
     522:	41 63 63 65 70 74 3a 20 74 65 78 74 2f 68 74 6d     Accept: text/htm
     532:	6c 0d 0a 00                                         l...

00000536 <__c.2367>:
     536:	55 73 65 72 2d 41 67 65 6e 74 3a 20 53 6d 61 72     User-Agent: Smar
     546:	74 20 68 6f 6d 65 0d 0a 00                          t home...

0000054f <__c.2365>:
     54f:	48 6f 73 74 3a 20 31 39 32 2e 31 36 38 2e 31 2e     Host: 192.168.1.
     55f:	33 30 0d 0a 00                                      30...

00000564 <__c.2363>:
     564:	20 48 54 54 50 2f 31 2e 30 0d 0a 00                  HTTP/1.0...

00000570 <__c.2361>:
     570:	47 45 54 20 2f 61 76 72 6e 65 74 2f 73 61 76 65     GET /avrnet/save
     580:	2e 70 68 70 3f 70 77 64 3d 73 65 63 72 65 74 26     .php?pwd=secret&
     590:	74 65 6d 70 3d 00                                   temp=.

00000596 <__c.2189>:
     596:	73 74 61 74 75 73 00                                status.

0000059d <__c.2187>:
     59d:	61 70 69 00                                         api.

000005a1 <__c.2185>:
     5a1:	6d 00                                               m.

000005a3 <__c.2183>:
     5a3:	68 00                                               h.

000005a5 <__c.2181>:
     5a5:	65 6e 00                                            en.

000005a8 <__c.2179>:
     5a8:	74 63 00                                            tc.

000005ab <__c.2177>:
     5ab:	6c 63 64 32 00                                      lcd2.

000005b0 <__c.2175>:
     5b0:	6c 63 64 31 00                                      lcd1.

000005b5 <__c.2173>:
     5b5:	6c 36 00                                            l6.

000005b8 <__c.2171>:
     5b8:	6c 35 00                                            l5.

000005bb <__c.2169>:
     5bb:	6c 34 00                                            l4.

000005be <__c.2167>:
     5be:	6c 33 00                                            l3.

000005c1 <__c.2165>:
     5c1:	6c 32 00                                            l2.

000005c4 <__c.2163>:
     5c4:	6c 31 00                                            l1.

000005c7 <__c.2161>:
     5c7:	73 69 70 00                                         sip.

000005cb <__c.2159>:
     5cb:	61 69 70 00                                         aip.

000005cf <setting_cursor_max>:
     5cf:	04 04 04                                            ...

000005d2 <count_time_max>:
     5d2:	02 3c 3c 18                                         .<<.

000005d6 <str_enable>:
     5d6:	45 6e 61 62 6c 65 00                                Enable.

000005dd <str_disable>:
     5dd:	44 69 73 61 62 6c 65 00                             Disable.

000005e5 <temp_list>:
     5e5:	e5 00 ef 00 f9 00 03 01 0e 01 18 01 23 01 2e 01     ............#...
     5f5:	39 01 44 01 4f 01 5b 01 66 01 72 01 7e 01 8a 01     9.D.O.[.f.r.~...
     605:	95 01 a1 01 ad 01 b9 01 c5 01 d1 01 dd 01 e9 01     ................
     615:	f4 01 00 02 0c 02 17 02 23 02 2e 02 39 02 44 02     ........#...9.D.
     625:	4f 02 5a 02 65 02 6f 02 79 02 84 02 8e 02 97 02     O.Z.e.o.y.......
     635:	a1 02 aa 02 b4 02 bd 02 c6 02 ce 02 d7 02 df 02     ................
     645:	e7 02 ef 02 f7 02 fe 02 06 03 0d 03 14 03 1b 03     ................
     655:	21 03 28 03 2e 03 34 03 3a 03 40 03 45 03 4b 03     !.(...4.:.@.E.K.
     665:	50 03 55 03 5a 03 5f 03 63 03 68 03 6c 03 71 03     P.U.Z._.c.h.l.q.
     675:	75 03 79 03 7d 03 81 03 84 03 88 03 8b 03 8f 03     u.y.}...........
     685:	92 03 95 03 98 03 9b 03 9e 03 a1 03 a3 03 a6 03     ................
     695:	a8 03 ab 03 ad 03 b0 03 b2 03 b4 03 b6 03 b8 03     ................
     6a5:	ba 03 bc 03 be 03 c0 03 00                          .........

000006ae <__ctors_end>:
     6ae:	11 24       	eor	r1, r1
     6b0:	1f be       	out	0x3f, r1	; 63
     6b2:	cf e5       	ldi	r28, 0x5F	; 95
     6b4:	d8 e0       	ldi	r29, 0x08	; 8
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	cd bf       	out	0x3d, r28	; 61

000006ba <__do_copy_data>:
     6ba:	11 e0       	ldi	r17, 0x01	; 1
     6bc:	a0 e6       	ldi	r26, 0x60	; 96
     6be:	b0 e0       	ldi	r27, 0x00	; 0
     6c0:	e6 e8       	ldi	r30, 0x86	; 134
     6c2:	fb e2       	ldi	r31, 0x2B	; 43
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <.do_copy_data_start>

000006c6 <.do_copy_data_loop>:
     6c6:	05 90       	lpm	r0, Z+
     6c8:	0d 92       	st	X+, r0

000006ca <.do_copy_data_start>:
     6ca:	ac 30       	cpi	r26, 0x0C	; 12
     6cc:	b1 07       	cpc	r27, r17
     6ce:	d9 f7       	brne	.-10     	; 0x6c6 <.do_copy_data_loop>

000006d0 <__do_clear_bss>:
     6d0:	11 e0       	ldi	r17, 0x01	; 1
     6d2:	ac e0       	ldi	r26, 0x0C	; 12
     6d4:	b1 e0       	ldi	r27, 0x01	; 1
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <.do_clear_bss_start>

000006d8 <.do_clear_bss_loop>:
     6d8:	1d 92       	st	X+, r1

000006da <.do_clear_bss_start>:
     6da:	a5 34       	cpi	r26, 0x45	; 69
     6dc:	b1 07       	cpc	r27, r17
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <.do_clear_bss_loop>
     6e0:	0e 94 fd 06 	call	0xdfa	; 0xdfa <main>
     6e4:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <_exit>

000006e8 <__bad_interrupt>:
     6e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006ec <enc28j60ReadOp>:
//
//*******************************************************************************************
BYTE enc28j60ReadOp(BYTE op, BYTE address)
{
	// activate CS
	CSACTIVE;
     6ec:	c4 98       	cbi	0x18, 4	; 24
	// issue read command
	SPDR = op | (address & ADDR_MASK);
     6ee:	96 2f       	mov	r25, r22
     6f0:	9f 71       	andi	r25, 0x1F	; 31
     6f2:	98 2b       	or	r25, r24
     6f4:	9f b9       	out	0x0f, r25	; 15
	waitspi();
     6f6:	77 9b       	sbis	0x0e, 7	; 14
     6f8:	fe cf       	rjmp	.-4      	; 0x6f6 <enc28j60ReadOp+0xa>
	// read data
	SPDR = 0x00;
     6fa:	1f b8       	out	0x0f, r1	; 15
	waitspi();
     6fc:	77 9b       	sbis	0x0e, 7	; 14
     6fe:	fe cf       	rjmp	.-4      	; 0x6fc <enc28j60ReadOp+0x10>
	// do dummy read if needed (for mac and mii, see datasheet page 29)
	if(address & 0x80)
     700:	67 ff       	sbrs	r22, 7
     702:	03 c0       	rjmp	.+6      	; 0x70a <enc28j60ReadOp+0x1e>
	{
		SPDR = 0x00;
     704:	1f b8       	out	0x0f, r1	; 15
		waitspi();
     706:	77 9b       	sbis	0x0e, 7	; 14
     708:	fe cf       	rjmp	.-4      	; 0x706 <enc28j60ReadOp+0x1a>
	}
	// release CS
	CSPASSIVE;
     70a:	c4 9a       	sbi	0x18, 4	; 24
	return(SPDR);
     70c:	8f b1       	in	r24, 0x0f	; 15
}
     70e:	08 95       	ret

00000710 <enc28j60WriteOp>:
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
void enc28j60WriteOp(BYTE op, BYTE address, BYTE data)
{
	CSACTIVE;
     710:	c4 98       	cbi	0x18, 4	; 24
	// issue write command
	SPDR = op | (address & ADDR_MASK);
     712:	6f 71       	andi	r22, 0x1F	; 31
     714:	68 2b       	or	r22, r24
     716:	6f b9       	out	0x0f, r22	; 15
	waitspi();
     718:	77 9b       	sbis	0x0e, 7	; 14
     71a:	fe cf       	rjmp	.-4      	; 0x718 <enc28j60WriteOp+0x8>
	// write data
	SPDR = data;
     71c:	4f b9       	out	0x0f, r20	; 15
	waitspi();
     71e:	77 9b       	sbis	0x0e, 7	; 14
     720:	fe cf       	rjmp	.-4      	; 0x71e <enc28j60WriteOp+0xe>
	CSPASSIVE;
     722:	c4 9a       	sbi	0x18, 4	; 24
}
     724:	08 95       	ret

00000726 <enc28j60SetBank>:
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
void enc28j60SetBank(BYTE address)
{
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	18 2f       	mov	r17, r24
	// set the bank (if needed)
	if((address & BANK_MASK) != Enc28j60Bank)
     72e:	c8 2f       	mov	r28, r24
     730:	d0 e0       	ldi	r29, 0x00	; 0
     732:	c0 76       	andi	r28, 0x60	; 96
     734:	d0 70       	andi	r29, 0x00	; 0
     736:	80 91 0c 01 	lds	r24, 0x010C
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	c8 17       	cp	r28, r24
     73e:	d9 07       	cpc	r29, r25
     740:	91 f0       	breq	.+36     	; 0x766 <enc28j60SetBank+0x40>
	{
		// set the bank
		enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
     742:	80 ea       	ldi	r24, 0xA0	; 160
     744:	6f e1       	ldi	r22, 0x1F	; 31
     746:	43 e0       	ldi	r20, 0x03	; 3
     748:	0e 94 88 03 	call	0x710	; 0x710 <enc28j60WriteOp>
		enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
     74c:	85 e0       	ldi	r24, 0x05	; 5
     74e:	d5 95       	asr	r29
     750:	c7 95       	ror	r28
     752:	8a 95       	dec	r24
     754:	e1 f7       	brne	.-8      	; 0x74e <enc28j60SetBank+0x28>
     756:	80 e8       	ldi	r24, 0x80	; 128
     758:	6f e1       	ldi	r22, 0x1F	; 31
     75a:	4c 2f       	mov	r20, r28
     75c:	0e 94 88 03 	call	0x710	; 0x710 <enc28j60WriteOp>
		Enc28j60Bank = (address & BANK_MASK);
     760:	10 76       	andi	r17, 0x60	; 96
     762:	10 93 0c 01 	sts	0x010C, r17
	}
}
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	08 95       	ret

0000076e <enc28j60Read>:
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
BYTE enc28j60Read(BYTE address)
{
     76e:	1f 93       	push	r17
     770:	18 2f       	mov	r17, r24
	// select bank to read
	enc28j60SetBank(address);
     772:	0e 94 93 03 	call	0x726	; 0x726 <enc28j60SetBank>
	
	// do the read
	return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	61 2f       	mov	r22, r17
     77a:	0e 94 76 03 	call	0x6ec	; 0x6ec <enc28j60ReadOp>
}
     77e:	1f 91       	pop	r17
     780:	08 95       	ret

00000782 <enc28j60Write>:
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
void enc28j60Write(BYTE address, BYTE data)
{
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	18 2f       	mov	r17, r24
     788:	06 2f       	mov	r16, r22
	// select bank to write
	enc28j60SetBank(address);
     78a:	0e 94 93 03 	call	0x726	; 0x726 <enc28j60SetBank>

	// do the write
	enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
     78e:	80 e4       	ldi	r24, 0x40	; 64
     790:	61 2f       	mov	r22, r17
     792:	40 2f       	mov	r20, r16
     794:	0e 94 88 03 	call	0x710	; 0x710 <enc28j60WriteOp>
}
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	08 95       	ret

0000079e <enc28j60_read_phyreg>:
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
WORD enc28j60_read_phyreg(BYTE address)
{
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	68 2f       	mov	r22, r24
	WORD data;
	
	// set the PHY register address
	enc28j60Write(MIREGADR, address);
     7a4:	84 ed       	ldi	r24, 0xD4	; 212
     7a6:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
     7aa:	82 ed       	ldi	r24, 0xD2	; 210
     7ac:	61 e0       	ldi	r22, 0x01	; 1
     7ae:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	
	// Loop to wait until the PHY register has been read through the MII
	// This requires 10.24us
	while( (enc28j60Read(MISTAT) & MISTAT_BUSY) );
     7b2:	8a ee       	ldi	r24, 0xEA	; 234
     7b4:	0e 94 b7 03 	call	0x76e	; 0x76e <enc28j60Read>
     7b8:	80 fd       	sbrc	r24, 0
     7ba:	fb cf       	rjmp	.-10     	; 0x7b2 <enc28j60_read_phyreg+0x14>
	
	// Stop reading
	enc28j60Write(MICMD, MICMD_MIIRD);
     7bc:	82 ed       	ldi	r24, 0xD2	; 210
     7be:	61 e0       	ldi	r22, 0x01	; 1
     7c0:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	
	// Obtain results and return
	data = enc28j60Read ( MIRDL );
     7c4:	88 ed       	ldi	r24, 0xD8	; 216
     7c6:	0e 94 b7 03 	call	0x76e	; 0x76e <enc28j60Read>
     7ca:	08 2f       	mov	r16, r24
     7cc:	10 e0       	ldi	r17, 0x00	; 0
	data |= enc28j60Read ( MIRDH );
     7ce:	89 ed       	ldi	r24, 0xD9	; 217
     7d0:	0e 94 b7 03 	call	0x76e	; 0x76e <enc28j60Read>
     7d4:	28 2f       	mov	r18, r24
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	20 2b       	or	r18, r16
     7da:	31 2b       	or	r19, r17

	return data;
}
     7dc:	c9 01       	movw	r24, r18
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	08 95       	ret

000007e4 <enc28j60PhyWrite>:
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
void enc28j60PhyWrite(BYTE address, WORD_BYTES data)
{
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	98 2f       	mov	r25, r24
     7ea:	16 2f       	mov	r17, r22
     7ec:	07 2f       	mov	r16, r23
	// set the PHY register address
	enc28j60Write(MIREGADR, address);
     7ee:	84 ed       	ldi	r24, 0xD4	; 212
     7f0:	69 2f       	mov	r22, r25
     7f2:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	// write the PHY data
	enc28j60Write(MIWRL, data.byte.low);
     7f6:	86 ed       	ldi	r24, 0xD6	; 214
     7f8:	61 2f       	mov	r22, r17
     7fa:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(MIWRH, data.byte.high);
     7fe:	87 ed       	ldi	r24, 0xD7	; 215
     800:	60 2f       	mov	r22, r16
     802:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     806:	10 e5       	ldi	r17, 0x50	; 80
     808:	03 c0       	rjmp	.+6      	; 0x810 <enc28j60PhyWrite+0x2c>
     80a:	81 2f       	mov	r24, r17
     80c:	8a 95       	dec	r24
     80e:	f1 f7       	brne	.-4      	; 0x80c <enc28j60PhyWrite+0x28>
	// wait until the PHY write completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY)
     810:	8a ee       	ldi	r24, 0xEA	; 234
     812:	0e 94 b7 03 	call	0x76e	; 0x76e <enc28j60Read>
     816:	80 fd       	sbrc	r24, 0
     818:	f8 cf       	rjmp	.-16     	; 0x80a <enc28j60PhyWrite+0x26>
	{
		_delay_us(15);
	}
}
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	08 95       	ret

00000820 <enc28j60_init>:
	//enc28j60_flag.rx_buffer_is_free = 1;
	_delay_ms(20);
}
*/
void enc28j60_init( BYTE *avr_mac)
{
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	ec 01       	movw	r28, r24
	// initialize I/O
	//DDRB |= _BV( DDB4 );
	//CSPASSIVE;

	// enable PB0, reset as output 
	ENC28J60_DDR |= _BV(ENC28J60_RESET_PIN_DDR);
     826:	8b 9a       	sbi	0x11, 3	; 17

	// enable PD2/INT0, as input
	ENC28J60_DDR &= ~_BV(ENC28J60_INT_PIN_DDR);
     828:	8a 98       	cbi	0x11, 2	; 17
	ENC28J60_PORT |= _BV(ENC28J60_INT_PIN);
     82a:	92 9a       	sbi	0x12, 2	; 18

	// set output to gnd, reset the ethernet chip
	ENC28J60_PORT &= ~_BV(ENC28J60_RESET_PIN);
     82c:	93 98       	cbi	0x12, 3	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     82e:	80 e4       	ldi	r24, 0x40	; 64
     830:	9c e9       	ldi	r25, 0x9C	; 156
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <enc28j60_init+0x12>
	_delay_ms(10);

	// set output to Vcc, reset inactive
	ENC28J60_PORT |= _BV(ENC28J60_RESET_PIN);
     836:	93 9a       	sbi	0x12, 3	; 18
     838:	80 ed       	ldi	r24, 0xD0	; 208
     83a:	97 e0       	ldi	r25, 0x07	; 7
     83c:	20 e9       	ldi	r18, 0x90	; 144
     83e:	31 e0       	ldi	r19, 0x01	; 1
     840:	f9 01       	movw	r30, r18
     842:	31 97       	sbiw	r30, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <enc28j60_init+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     846:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     848:	d9 f7       	brne	.-10     	; 0x840 <enc28j60_init+0x20>
	_delay_ms(200);

    //	
	DDRB  |= _BV( DDB4 ) | _BV( DDB5 ) | _BV( DDB7 ); // mosi, sck, ss output
     84a:	87 b3       	in	r24, 0x17	; 23
     84c:	80 6b       	ori	r24, 0xB0	; 176
     84e:	87 bb       	out	0x17, r24	; 23
	//DDRB &= ~_BV( DDB6 ); // MISO is input

	CSPASSIVE;
     850:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &= ~(_BV( PB5 ) | _BV( PB7 ) );
     852:	88 b3       	in	r24, 0x18	; 24
     854:	8f 75       	andi	r24, 0x5F	; 95
     856:	88 bb       	out	0x18, r24	; 24
	//
	// initialize SPI interface
	// master mode and Fosc/2 clock:
    SPCR = _BV( SPE ) | _BV( MSTR );
     858:	80 e5       	ldi	r24, 0x50	; 80
     85a:	8d b9       	out	0x0d, r24	; 13
    SPSR |= _BV( SPI2X );
     85c:	70 9a       	sbi	0x0e, 0	; 14

	// perform system reset
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     85e:	8f ef       	ldi	r24, 0xFF	; 255
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	4f ef       	ldi	r20, 0xFF	; 255
     864:	0e 94 88 03 	call	0x710	; 0x710 <enc28j60WriteOp>
     868:	84 ef       	ldi	r24, 0xF4	; 244
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	20 e9       	ldi	r18, 0x90	; 144
     86e:	31 e0       	ldi	r19, 0x01	; 1
     870:	f9 01       	movw	r30, r18
     872:	31 97       	sbiw	r30, 0x01	; 1
     874:	f1 f7       	brne	.-4      	; 0x872 <__stack+0x13>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     876:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     878:	d9 f7       	brne	.-10     	; 0x870 <__stack+0x11>
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	next_packet_ptr.word = RXSTART_INIT;
     87a:	10 92 0e 01 	sts	0x010E, r1
     87e:	10 92 0d 01 	sts	0x010D, r1
    // Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
     882:	88 e0       	ldi	r24, 0x08	; 8
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
     88a:	89 e0       	ldi	r24, 0x09	; 9
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
     892:	8c e0       	ldi	r24, 0x0C	; 12
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
     89a:	8d e0       	ldi	r24, 0x0D	; 13
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
     8a2:	8a e0       	ldi	r24, 0x0A	; 10
     8a4:	63 e2       	ldi	r22, 0x23	; 35
     8a6:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
     8aa:	8b e0       	ldi	r24, 0x0B	; 11
     8ac:	6a e1       	ldi	r22, 0x1A	; 26
     8ae:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
     8b2:	84 e0       	ldi	r24, 0x04	; 4
     8b4:	64 e2       	ldi	r22, 0x24	; 36
     8b6:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
     8ba:	85 e0       	ldi	r24, 0x05	; 5
     8bc:	6a e1       	ldi	r22, 0x1A	; 26
     8be:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
     8c2:	86 e0       	ldi	r24, 0x06	; 6
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
     8ca:	87 e0       	ldi	r24, 0x07	; 7
     8cc:	60 e2       	ldi	r22, 0x20	; 32
     8ce:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>

	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
     8d2:	80 ec       	ldi	r24, 0xC0	; 192
     8d4:	6d e0       	ldi	r22, 0x0D	; 13
     8d6:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	
	// bring MAC out of reset
	//enc28j60Write(MACON2, 0x00);

	// enable automatic padding to 60bytes and CRC operations
	enc28j60Write(MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     8da:	82 ec       	ldi	r24, 0xC2	; 194
     8dc:	62 e3       	ldi	r22, 0x32	; 50
     8de:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>

	// Allow infinite deferals if the medium is continuously busy 
    // (do not time out a transmission if the half duplex medium is 
    // completely saturated with other people's data)
    enc28j60Write(MACON4, MACON4_DEFER);
     8e2:	83 ec       	ldi	r24, 0xC3	; 195
     8e4:	60 e4       	ldi	r22, 0x40	; 64
     8e6:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>

	// Late collisions occur beyond 63+8 bytes (8 bytes for preamble/start of frame delimiter)
	// 55 is all that is needed for IEEE 802.3, but ENC28J60 B5 errata for improper link pulse 
	// collisions will occur less often with a larger number.
    enc28j60Write(MACLCON2, 63);
     8ea:	89 ec       	ldi	r24, 0xC9	; 201
     8ec:	6f e3       	ldi	r22, 0x3F	; 63
     8ee:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	
	// Set non-back-to-back inter-packet gap to 9.6us.  The back-to-back 
	// inter-packet gap (MABBIPG) is set by MACSetDuplex() which is called 
	// later.
	enc28j60Write(MAIPGL, 0x12);
     8f2:	86 ec       	ldi	r24, 0xC6	; 198
     8f4:	62 e1       	ldi	r22, 0x12	; 18
     8f6:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(MAIPGH, 0x0C);
     8fa:	87 ec       	ldi	r24, 0xC7	; 199
     8fc:	6c e0       	ldi	r22, 0x0C	; 12
     8fe:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	
	// Set the maximum packet size which the controller will accept
    // Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
     902:	8a ec       	ldi	r24, 0xCA	; 202
     904:	6e ee       	ldi	r22, 0xEE	; 238
     906:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
     90a:	8b ec       	ldi	r24, 0xCB	; 203
     90c:	65 e0       	ldi	r22, 0x05	; 5
     90e:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	
	// do bank 3 stuff
    // write MAC address
	// NOTE: MAC address in ENC28J60 is byte-backward
	// ENC28J60 is big-endian avr gcc is little-endian
	enc28j60Write(MAADR5, avr_mac[0]);
     912:	84 ee       	ldi	r24, 0xE4	; 228
     914:	68 81       	ld	r22, Y
     916:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(MAADR4, avr_mac[1]);
     91a:	85 ee       	ldi	r24, 0xE5	; 229
     91c:	69 81       	ldd	r22, Y+1	; 0x01
     91e:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(MAADR3, avr_mac[2]);
     922:	82 ee       	ldi	r24, 0xE2	; 226
     924:	6a 81       	ldd	r22, Y+2	; 0x02
     926:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(MAADR2, avr_mac[3]);
     92a:	83 ee       	ldi	r24, 0xE3	; 227
     92c:	6b 81       	ldd	r22, Y+3	; 0x03
     92e:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(MAADR1, avr_mac[4]);
     932:	80 ee       	ldi	r24, 0xE0	; 224
     934:	6c 81       	ldd	r22, Y+4	; 0x04
     936:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(MAADR0, avr_mac[5]);
     93a:	81 ee       	ldi	r24, 0xE1	; 225
     93c:	6d 81       	ldd	r22, Y+5	; 0x05
     93e:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, (WORD_BYTES){PHCON2_HDLDIS});
     942:	80 e1       	ldi	r24, 0x10	; 16
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	71 e0       	ldi	r23, 0x01	; 1
     948:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <enc28j60PhyWrite>
	
	// Magjack leds configuration, see enc28j60 datasheet, page 11
	// 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
	// enc28j60PhyWrite(PHLCON,0b0000 0100 0111 00 10);
	enc28j60PhyWrite(PHLCON,(WORD_BYTES){0x0472});
     94c:	84 e1       	ldi	r24, 0x14	; 20
     94e:	62 e7       	ldi	r22, 0x72	; 114
     950:	74 e0       	ldi	r23, 0x04	; 4
     952:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <enc28j60PhyWrite>
	// Type     ETH.DST
	// ARP      BROADCAST
 	// 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
	// in binary these poitions are:11 0000 0011 1111
	// This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
     956:	88 e3       	ldi	r24, 0x38	; 56
     958:	60 eb       	ldi	r22, 0xB0	; 176
     95a:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(EPMM0, 0x3f);
     95e:	88 e2       	ldi	r24, 0x28	; 40
     960:	6f e3       	ldi	r22, 0x3F	; 63
     962:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(EPMM1, 0x30);
     966:	89 e2       	ldi	r24, 0x29	; 41
     968:	60 e3       	ldi	r22, 0x30	; 48
     96a:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(EPMCSL, 0xf9);
     96e:	80 e3       	ldi	r24, 0x30	; 48
     970:	69 ef       	ldi	r22, 0xF9	; 249
     972:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(EPMCSH, 0xf7);
     976:	81 e3       	ldi	r24, 0x31	; 49
     978:	67 ef       	ldi	r22, 0xF7	; 247
     97a:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>

	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
     97e:	84 ec       	ldi	r24, 0xC4	; 196
     980:	62 e1       	ldi	r22, 0x12	; 18
     982:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	
	// switch to bank 0
	enc28j60SetBank(ECON1);
     986:	8f e1       	ldi	r24, 0x1F	; 31
     988:	0e 94 93 03 	call	0x726	; 0x726 <enc28j60SetBank>

	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     98c:	80 e8       	ldi	r24, 0x80	; 128
     98e:	6b e1       	ldi	r22, 0x1B	; 27
     990:	40 ec       	ldi	r20, 0xC0	; 192
     992:	0e 94 88 03 	call	0x710	; 0x710 <enc28j60WriteOp>

	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     996:	80 e8       	ldi	r24, 0x80	; 128
     998:	6f e1       	ldi	r22, 0x1F	; 31
     99a:	44 e0       	ldi	r20, 0x04	; 4
     99c:	0e 94 88 03 	call	0x710	; 0x710 <enc28j60WriteOp>
     9a0:	88 ec       	ldi	r24, 0xC8	; 200
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	20 e9       	ldi	r18, 0x90	; 144
     9a6:	31 e0       	ldi	r19, 0x01	; 1
     9a8:	f9 01       	movw	r30, r18
     9aa:	31 97       	sbiw	r30, 0x01	; 1
     9ac:	f1 f7       	brne	.-4      	; 0x9aa <__stack+0x14b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9b0:	d9 f7       	brne	.-10     	; 0x9a8 <__stack+0x149>

	_delay_ms(20);
}
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <enc28j60getrev>:
// Description : read the revision of the chip.
//
//*******************************************************************************************
BYTE enc28j60getrev(void)
{
	return(enc28j60Read(EREVID));
     9b8:	82 e7       	ldi	r24, 0x72	; 114
     9ba:	0e 94 b7 03 	call	0x76e	; 0x76e <enc28j60Read>
}
     9be:	08 95       	ret

000009c0 <enc28j60_packet_send>:
// Function : enc28j60_packet_send
// Description : Send packet to network.
//
//*******************************************************************************************
void enc28j60_packet_send ( BYTE *buffer, WORD length )
{
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	8c 01       	movw	r16, r24
     9ca:	eb 01       	movw	r28, r22
	//Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, LOW(TXSTART_INIT) );
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	64 e2       	ldi	r22, 0x24	; 36
     9d0:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(EWRPTH, HIGH(TXSTART_INIT) );
     9d4:	83 e0       	ldi	r24, 0x03	; 3
     9d6:	6a e1       	ldi	r22, 0x1A	; 26
     9d8:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>

	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, LOW((TXSTART_INIT+length)) );
     9dc:	ce 01       	movw	r24, r28
     9de:	8c 5d       	subi	r24, 0xDC	; 220
     9e0:	68 2f       	mov	r22, r24
     9e2:	86 e0       	ldi	r24, 0x06	; 6
     9e4:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(ETXNDH, HIGH((TXSTART_INIT+length)) );
     9e8:	9e 01       	movw	r18, r28
     9ea:	2c 5d       	subi	r18, 0xDC	; 220
     9ec:	35 4e       	sbci	r19, 0xE5	; 229
     9ee:	87 e0       	ldi	r24, 0x07	; 7
     9f0:	63 2f       	mov	r22, r19
     9f2:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>

	// write per-packet control byte (0x00 means use macon3 settings)
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     9f6:	8a e7       	ldi	r24, 0x7A	; 122
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	0e 94 88 03 	call	0x710	; 0x710 <enc28j60WriteOp>

	CSACTIVE;
     a00:	c4 98       	cbi	0x18, 4	; 24
	// issue write command
	SPDR = ENC28J60_WRITE_BUF_MEM;
     a02:	8a e7       	ldi	r24, 0x7A	; 122
     a04:	8f b9       	out	0x0f, r24	; 15
	waitspi();
     a06:	77 9b       	sbis	0x0e, 7	; 14
     a08:	fe cf       	rjmp	.-4      	; 0xa06 <enc28j60_packet_send+0x46>
     a0a:	08 c0       	rjmp	.+16     	; 0xa1c <enc28j60_packet_send+0x5c>
	while(length)
	{
		length--;
		// write data
		SPDR = *buffer++;
     a0c:	f8 01       	movw	r30, r16
     a0e:	80 81       	ld	r24, Z
     a10:	8f b9       	out	0x0f, r24	; 15
		waitspi();
     a12:	77 9b       	sbis	0x0e, 7	; 14
     a14:	fe cf       	rjmp	.-4      	; 0xa12 <enc28j60_packet_send+0x52>
	// issue write command
	SPDR = ENC28J60_WRITE_BUF_MEM;
	waitspi();
	while(length)
	{
		length--;
     a16:	21 97       	sbiw	r28, 0x01	; 1
		// write data
		SPDR = *buffer++;
     a18:	0f 5f       	subi	r16, 0xFF	; 255
     a1a:	1f 4f       	sbci	r17, 0xFF	; 255

	CSACTIVE;
	// issue write command
	SPDR = ENC28J60_WRITE_BUF_MEM;
	waitspi();
	while(length)
     a1c:	20 97       	sbiw	r28, 0x00	; 0
     a1e:	b1 f7       	brne	.-20     	; 0xa0c <enc28j60_packet_send+0x4c>
		length--;
		// write data
		SPDR = *buffer++;
		waitspi();
	}
	CSPASSIVE;
     a20:	c4 9a       	sbi	0x18, 4	; 24
	
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     a22:	80 e8       	ldi	r24, 0x80	; 128
     a24:	6f e1       	ldi	r22, 0x1F	; 31
     a26:	48 e0       	ldi	r20, 0x08	; 8
     a28:	0e 94 88 03 	call	0x710	; 0x710 <enc28j60WriteOp>

	// Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
	if( (enc28j60Read(EIR) & EIR_TXERIF) )
     a2c:	8c e1       	ldi	r24, 0x1C	; 28
     a2e:	0e 94 b7 03 	call	0x76e	; 0x76e <enc28j60Read>
     a32:	81 ff       	sbrs	r24, 1
     a34:	05 c0       	rjmp	.+10     	; 0xa40 <enc28j60_packet_send+0x80>
	{
		enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     a36:	80 ea       	ldi	r24, 0xA0	; 160
     a38:	6f e1       	ldi	r22, 0x1F	; 31
     a3a:	48 e0       	ldi	r20, 0x08	; 8
     a3c:	0e 94 88 03 	call	0x710	; 0x710 <enc28j60WriteOp>
	}
}
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	08 95       	ret

00000a4a <enc28j60_packet_receive>:
// Description : check received packet and return length of data
//
//*******************************************************************************************
//WORD data_length;
WORD enc28j60_packet_receive ( BYTE *rxtx_buffer, WORD max_length )
{
     a4a:	cf 92       	push	r12
     a4c:	df 92       	push	r13
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	6c 01       	movw	r12, r24
     a5c:	7b 01       	movw	r14, r22
	WORD_BYTES rx_status, data_length;
	
	// check if a packet has been received and buffered
	// if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
	// The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) == 0 )
     a5e:	89 e3       	ldi	r24, 0x39	; 57
     a60:	0e 94 b7 03 	call	0x76e	; 0x76e <enc28j60Read>
     a64:	88 23       	and	r24, r24
     a66:	19 f4       	brne	.+6      	; 0xa6e <enc28j60_packet_receive+0x24>
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	5a c0       	rjmp	.+180    	; 0xb22 <enc28j60_packet_receive+0xd8>
	{
		return 0;
	}

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, next_packet_ptr.bytes[0]);
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	60 91 0d 01 	lds	r22, 0x010D
     a74:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(ERDPTH, next_packet_ptr.bytes[1]);
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	60 91 0e 01 	lds	r22, 0x010E
     a7e:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>

	// read the next packet pointer
	next_packet_ptr.bytes[0] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     a82:	8a e3       	ldi	r24, 0x3A	; 58
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	0e 94 76 03 	call	0x6ec	; 0x6ec <enc28j60ReadOp>
     a8a:	80 93 0d 01 	sts	0x010D, r24
	next_packet_ptr.bytes[1] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     a8e:	8a e3       	ldi	r24, 0x3A	; 58
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	0e 94 76 03 	call	0x6ec	; 0x6ec <enc28j60ReadOp>
     a96:	08 2f       	mov	r16, r24
     a98:	80 93 0e 01 	sts	0x010E, r24

	// read the packet length (see datasheet page 43)
	data_length.bytes[0] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     a9c:	8a e3       	ldi	r24, 0x3A	; 58
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	0e 94 76 03 	call	0x6ec	; 0x6ec <enc28j60ReadOp>
     aa4:	c8 2f       	mov	r28, r24
	data_length.bytes[1] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     aa6:	8a e3       	ldi	r24, 0x3A	; 58
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	0e 94 76 03 	call	0x6ec	; 0x6ec <enc28j60ReadOp>
     aae:	d8 2f       	mov	r29, r24
	data_length.word -=4; //remove the CRC count
     ab0:	24 97       	sbiw	r28, 0x04	; 4
	
	// read the receive status (see datasheet page 43)
	rx_status.bytes[0] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     ab2:	8a e3       	ldi	r24, 0x3A	; 58
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	0e 94 76 03 	call	0x6ec	; 0x6ec <enc28j60ReadOp>
     aba:	18 2f       	mov	r17, r24
	rx_status.bytes[1] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     abc:	8a e3       	ldi	r24, 0x3A	; 58
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	0e 94 76 03 	call	0x6ec	; 0x6ec <enc28j60ReadOp>
	
	if ( data_length.word > (max_length-1) )
     ac4:	b7 01       	movw	r22, r14
     ac6:	61 50       	subi	r22, 0x01	; 1
     ac8:	70 40       	sbci	r23, 0x00	; 0
     aca:	6c 17       	cp	r22, r28
     acc:	7d 07       	cpc	r23, r29
     ace:	08 f4       	brcc	.+2      	; 0xad2 <enc28j60_packet_receive+0x88>
	{
		data_length.word = max_length-1;
     ad0:	eb 01       	movw	r28, r22
	}
	
	// check CRC and symbol errors (see datasheet page 44, table 7-3):
	// The ERXFCON.CRCEN is set by default. Normally we should not
	// need to check this.
	if ( (rx_status.word & 0x80)==0 )
     ad2:	17 fd       	sbrc	r17, 7
     ad4:	03 c0       	rjmp	.+6      	; 0xadc <enc28j60_packet_receive+0x92>
	{
		// invalid
		data_length.word = 0;
     ad6:	c0 e0       	ldi	r28, 0x00	; 0
     ad8:	d0 e0       	ldi	r29, 0x00	; 0
     ada:	14 c0       	rjmp	.+40     	; 0xb04 <enc28j60_packet_receive+0xba>
	}
	else
	{
		// read data from rx buffer and save to rxtx_buffer
		rx_status.word = data_length.word;
     adc:	9e 01       	movw	r18, r28
		CSACTIVE;
     ade:	c4 98       	cbi	0x18, 4	; 24
		// issue read command
		SPDR = ENC28J60_READ_BUF_MEM;
     ae0:	8a e3       	ldi	r24, 0x3A	; 58
     ae2:	8f b9       	out	0x0f, r24	; 15
		waitspi();
     ae4:	77 9b       	sbis	0x0e, 7	; 14
     ae6:	fe cf       	rjmp	.-4      	; 0xae4 <enc28j60_packet_receive+0x9a>
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <enc28j60_packet_receive+0xb2>
		while(rx_status.word)
		{
			rx_status.word--;
			SPDR = 0x00;
     aea:	1f b8       	out	0x0f, r1	; 15
			waitspi();
     aec:	77 9b       	sbis	0x0e, 7	; 14
     aee:	fe cf       	rjmp	.-4      	; 0xaec <enc28j60_packet_receive+0xa2>
			*rxtx_buffer++ = SPDR;
     af0:	8f b1       	in	r24, 0x0f	; 15
     af2:	f6 01       	movw	r30, r12
     af4:	81 93       	st	Z+, r24
     af6:	6f 01       	movw	r12, r30
     af8:	21 50       	subi	r18, 0x01	; 1
     afa:	30 40       	sbci	r19, 0x00	; 0
		rx_status.word = data_length.word;
		CSACTIVE;
		// issue read command
		SPDR = ENC28J60_READ_BUF_MEM;
		waitspi();
		while(rx_status.word)
     afc:	21 15       	cp	r18, r1
     afe:	31 05       	cpc	r19, r1
     b00:	a1 f7       	brne	.-24     	; 0xaea <enc28j60_packet_receive+0xa0>
			rx_status.word--;
			SPDR = 0x00;
			waitspi();
			*rxtx_buffer++ = SPDR;
		}
		CSPASSIVE;
     b02:	c4 9a       	sbi	0x18, 4	; 24
	}
	
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60Write(ERXRDPTL, next_packet_ptr.bytes[0]);
     b04:	8c e0       	ldi	r24, 0x0C	; 12
     b06:	60 91 0d 01 	lds	r22, 0x010D
     b0a:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>
	enc28j60Write(ERXRDPTH, next_packet_ptr.bytes[1]);
     b0e:	8d e0       	ldi	r24, 0x0D	; 13
     b10:	60 2f       	mov	r22, r16
     b12:	0e 94 c1 03 	call	0x782	; 0x782 <enc28j60Write>

	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     b16:	80 e8       	ldi	r24, 0x80	; 128
     b18:	6e e1       	ldi	r22, 0x1E	; 30
     b1a:	40 e4       	ldi	r20, 0x40	; 64
     b1c:	0e 94 88 03 	call	0x710	; 0x710 <enc28j60WriteOp>

	return( data_length.word );
     b20:	9e 01       	movw	r18, r28
}
     b22:	c9 01       	movw	r24, r18
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	cf 90       	pop	r12
     b34:	08 95       	ret

00000b36 <software_reset>:
//*****************************************************************************************
#ifndef REMOVE_BOOTLOADER_SUPPORT
void software_reset(void) __attribute__ ((naked));
void software_reset(void)
{
	wdt_enable(WDTO_15MS);
     b36:	28 e0       	ldi	r18, 0x08	; 8
     b38:	88 e1       	ldi	r24, 0x18	; 24
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	a8 95       	wdr
     b42:	81 bd       	out	0x21, r24	; 33
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	21 bd       	out	0x21, r18	; 33
     b48:	ff cf       	rjmp	.-2      	; 0xb48 <software_reset+0x12>

00000b4a <client_process>:
// I recommented Apache webserver and PHP script. 
// More detail about Apache and PHP installation please visit http://www.avrportal.com/
//
//*****************************************************************************************
void client_process ( void )
{
     b4a:	4f 92       	push	r4
     b4c:	5f 92       	push	r5
     b4e:	6f 92       	push	r6
     b50:	7f 92       	push	r7
     b52:	8f 92       	push	r8
     b54:	9f 92       	push	r9
     b56:	af 92       	push	r10
     b58:	bf 92       	push	r11
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	ce 5e       	subi	r28, 0xEE	; 238
     b6e:	d5 40       	sbci	r29, 0x05	; 5
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
	WORD dlength;
	// you can change rx,tx buffer size in includes.h
	BYTE rxtx_buffer[MAX_RXTX_BUFFER];

	// wait for send temparature flag is set, this flag set by time_base function (menu.c)
	if ( flag1.bits.send_temp == 0 )
     b7a:	80 91 25 01 	lds	r24, 0x0125
     b7e:	84 ff       	sbrs	r24, 4
     b80:	d0 c0       	rjmp	.+416    	; 0xd22 <client_process+0x1d8>
		return;	
	// AVR busy now and wait untill transfer data to web browser completed.
	if ( flag1.bits.syn_is_received )
     b82:	86 fd       	sbrc	r24, 6
     b84:	ce c0       	rjmp	.+412    	; 0xd22 <client_process+0x1d8>
		return;
	// AVR sent temparature to web server but not found web server on port 80
	//if ( flag1.bits.not_found_server )
	//	return;
	// send SYN to initial connection
	if ( flag1.bits.syn_is_sent == 0 )
     b86:	85 fd       	sbrc	r24, 5
     b88:	31 c0       	rjmp	.+98     	; 0xbec <client_process+0xa2>
	{
		// start arp 
		// server ip was not found on network
		if ( arp_who_is ( rxtx_buffer, (BYTE*)&server_mac, (BYTE*)&server_ip ) == 0 )
     b8a:	0c e2       	ldi	r16, 0x2C	; 44
     b8c:	11 e0       	ldi	r17, 0x01	; 1
     b8e:	6e 01       	movw	r12, r28
     b90:	08 94       	sec
     b92:	c1 1c       	adc	r12, r1
     b94:	d1 1c       	adc	r13, r1
     b96:	c6 01       	movw	r24, r12
     b98:	64 e3       	ldi	r22, 0x34	; 52
     b9a:	71 e0       	ldi	r23, 0x01	; 1
     b9c:	a8 01       	movw	r20, r16
     b9e:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <arp_who_is>
     ba2:	88 23       	and	r24, r24
     ba4:	21 f4       	brne	.+8      	; 0xbae <client_process+0x64>
		{
			flag1.bits.send_temp = 0;
     ba6:	80 91 25 01 	lds	r24, 0x0125
     baa:	8f 7e       	andi	r24, 0xEF	; 239
     bac:	2f c0       	rjmp	.+94     	; 0xc0c <client_process+0xc2>
			return;
		}
	
		// send SYN packet to initial connection
		tcp_send_packet (
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <client_process+0x66>
     bb0:	ed b7       	in	r30, 0x3d	; 61
     bb2:	fe b7       	in	r31, 0x3e	; 62
     bb4:	12 83       	std	Z+2, r17	; 0x02
     bb6:	01 83       	std	Z+1, r16	; 0x01
     bb8:	c6 01       	movw	r24, r12
     bba:	60 e5       	ldi	r22, 0x50	; 80
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	40 eb       	ldi	r20, 0xB0	; 176
     bc0:	54 e0       	ldi	r21, 0x04	; 4
     bc2:	22 e0       	ldi	r18, 0x02	; 2
     bc4:	01 e0       	ldi	r16, 0x01	; 1
     bc6:	ee 24       	eor	r14, r14
     bc8:	e3 94       	inc	r14
     bca:	cc 24       	eor	r12, r12
     bcc:	dd 24       	eor	r13, r13
     bce:	aa 24       	eor	r10, r10
     bd0:	bb 24       	eor	r11, r11
     bd2:	34 e3       	ldi	r19, 0x34	; 52
     bd4:	83 2e       	mov	r8, r19
     bd6:	31 e0       	ldi	r19, 0x01	; 1
     bd8:	93 2e       	mov	r9, r19
     bda:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <tcp_send_packet>
			1,						// (bool)clear sequence ack number
			0,						// 0=use old seq, seqack : 1=new seq,seqack no data : new seq,seqack with data
			0,						// tcp data length
			(BYTE*)&server_mac,		// server mac address
			(BYTE*)&server_ip );	// server ip address
		flag1.bits.syn_is_sent = 1;
     bde:	80 91 25 01 	lds	r24, 0x0125
     be2:	80 62       	ori	r24, 0x20	; 32
     be4:	80 93 25 01 	sts	0x0125, r24
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
	}
	// get new packet
	dlength = enc28j60_packet_receive( (BYTE*)&rxtx_buffer, MAX_RXTX_BUFFER );
     bec:	2e 01       	movw	r4, r28
     bee:	08 94       	sec
     bf0:	41 1c       	adc	r4, r1
     bf2:	51 1c       	adc	r5, r1
     bf4:	c2 01       	movw	r24, r4
     bf6:	6e ee       	ldi	r22, 0xEE	; 238
     bf8:	75 e0       	ldi	r23, 0x05	; 5
     bfa:	0e 94 25 05 	call	0xa4a	; 0xa4a <enc28j60_packet_receive>
	
	// no new packet incoming
	if ( dlength == 0 )
     bfe:	89 2b       	or	r24, r25
     c00:	41 f4       	brne	.+16     	; 0xc12 <client_process+0xc8>
	{
		// timeout occured, when SYN has been sent but no response from web server
		// reset send_temp and syn_is_sent flags
		if ( flag1.bits.send_temp_timeout )
     c02:	80 91 25 01 	lds	r24, 0x0125
     c06:	87 ff       	sbrs	r24, 7
     c08:	8c c0       	rjmp	.+280    	; 0xd22 <client_process+0x1d8>
		{
			flag1.bits.send_temp_timeout = 0;
			flag1.bits.send_temp = 0;
			flag1.bits.syn_is_sent = 0;
     c0a:	8f 74       	andi	r24, 0x4F	; 79
     c0c:	80 93 25 01 	sts	0x0125, r24
     c10:	88 c0       	rjmp	.+272    	; 0xd22 <client_process+0x1d8>
		return;
	}
	
	// check ip packet send to avr or not?
	// accept ip packet only
	if ( ip_packet_is_ip ( (BYTE*)&rxtx_buffer ) == 0 )
     c12:	c2 01       	movw	r24, r4
     c14:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <ip_packet_is_ip>
     c18:	88 23       	and	r24, r24
     c1a:	09 f4       	brne	.+2      	; 0xc1e <client_process+0xd4>
     c1c:	82 c0       	rjmp	.+260    	; 0xd22 <client_process+0x1d8>
	{
		return;
	}

	// check SYNACK flag, after AVR send SYN server response by send SYNACK to AVR
	if ( rxtx_buffer [ TCP_FLAGS_P ] == ( TCP_FLAG_SYN_V | TCP_FLAG_ACK_V ) )
     c1e:	88 a9       	ldd	r24, Y+48	; 0x30
     c20:	82 31       	cpi	r24, 0x12	; 18
     c22:	71 f5       	brne	.+92     	; 0xc80 <client_process+0x136>
	{
		// send ACK to answer SYNACK
		tcp_send_packet (
     c24:	00 d0       	rcall	.+0      	; 0xc26 <client_process+0xdc>
     c26:	0c e2       	ldi	r16, 0x2C	; 44
     c28:	60 2e       	mov	r6, r16
     c2a:	01 e0       	ldi	r16, 0x01	; 1
     c2c:	70 2e       	mov	r7, r16
     c2e:	ed b7       	in	r30, 0x3d	; 61
     c30:	fe b7       	in	r31, 0x3e	; 62
     c32:	72 82       	std	Z+2, r7	; 0x02
     c34:	61 82       	std	Z+1, r6	; 0x01
     c36:	c2 01       	movw	r24, r4
     c38:	60 e5       	ldi	r22, 0x50	; 80
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	40 eb       	ldi	r20, 0xB0	; 176
     c3e:	54 e0       	ldi	r21, 0x04	; 4
     c40:	20 e1       	ldi	r18, 0x10	; 16
     c42:	00 e0       	ldi	r16, 0x00	; 0
     c44:	ee 24       	eor	r14, r14
     c46:	11 e0       	ldi	r17, 0x01	; 1
     c48:	c1 2e       	mov	r12, r17
     c4a:	d1 2c       	mov	r13, r1
     c4c:	aa 24       	eor	r10, r10
     c4e:	bb 24       	eor	r11, r11
     c50:	b4 e3       	ldi	r27, 0x34	; 52
     c52:	8b 2e       	mov	r8, r27
     c54:	b1 e0       	ldi	r27, 0x01	; 1
     c56:	9b 2e       	mov	r9, r27
     c58:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <tcp_send_packet>
					1,						// 0=use old seq, seqack : 1=new seq,seqack no data : >1 new seq,seqack with data
					0,						// tcp data length
					(BYTE*)&server_mac,		// server mac address
					(BYTE*)&server_ip );	// server ip address
		// setup http request to server
		dlength = http_put_request( (BYTE*)&rxtx_buffer );
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	c2 01       	movw	r24, r4
     c62:	0e 94 33 09 	call	0x1266	; 0x1266 <http_put_request>
     c66:	5c 01       	movw	r10, r24
		// send http request packet
		// send packet with PSHACK
		tcp_send_packet (
     c68:	00 d0       	rcall	.+0      	; 0xc6a <client_process+0x120>
     c6a:	ed b7       	in	r30, 0x3d	; 61
     c6c:	fe b7       	in	r31, 0x3e	; 62
     c6e:	72 82       	std	Z+2, r7	; 0x02
     c70:	61 82       	std	Z+1, r6	; 0x01
     c72:	c2 01       	movw	r24, r4
     c74:	60 e5       	ldi	r22, 0x50	; 80
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	40 eb       	ldi	r20, 0xB0	; 176
     c7a:	54 e0       	ldi	r21, 0x04	; 4
     c7c:	28 e1       	ldi	r18, 0x18	; 24
     c7e:	29 c0       	rjmp	.+82     	; 0xcd2 <client_process+0x188>
					(BYTE*)&server_ip );	// server ip address
		return;
	}
	// after AVR send http request to server, server response by send data with PSHACK to AVR
	// AVR answer by send ACK and FINACK to server
	if ( rxtx_buffer [ TCP_FLAGS_P ] == (TCP_FLAG_ACK_V|TCP_FLAG_PSH_V) )
     c80:	88 31       	cpi	r24, 0x18	; 24
     c82:	61 f5       	brne	.+88     	; 0xcdc <client_process+0x192>
	{
		dlength = tcp_get_dlength( (BYTE*)&rxtx_buffer );
     c84:	c2 01       	movw	r24, r4
     c86:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <tcp_get_dlength>
     c8a:	6c 01       	movw	r12, r24

		// send ACK to answer PSHACK from server
		tcp_send_packet (
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <client_process+0x144>
     c8e:	ac e2       	ldi	r26, 0x2C	; 44
     c90:	6a 2e       	mov	r6, r26
     c92:	a1 e0       	ldi	r26, 0x01	; 1
     c94:	7a 2e       	mov	r7, r26
     c96:	ed b7       	in	r30, 0x3d	; 61
     c98:	fe b7       	in	r31, 0x3e	; 62
     c9a:	72 82       	std	Z+2, r7	; 0x02
     c9c:	61 82       	std	Z+1, r6	; 0x01
     c9e:	c2 01       	movw	r24, r4
     ca0:	60 e5       	ldi	r22, 0x50	; 80
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	40 eb       	ldi	r20, 0xB0	; 176
     ca6:	54 e0       	ldi	r21, 0x04	; 4
     ca8:	20 e1       	ldi	r18, 0x10	; 16
     caa:	00 e0       	ldi	r16, 0x00	; 0
     cac:	ee 24       	eor	r14, r14
     cae:	aa 24       	eor	r10, r10
     cb0:	bb 24       	eor	r11, r11
     cb2:	f4 e3       	ldi	r31, 0x34	; 52
     cb4:	8f 2e       	mov	r8, r31
     cb6:	f1 e0       	ldi	r31, 0x01	; 1
     cb8:	9f 2e       	mov	r9, r31
     cba:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <tcp_send_packet>
					0,				// tcp data length
					(BYTE*)&server_mac,		// server mac address
					(BYTE*)&server_ip );	// server ip address
		// send finack to disconnect from web server
		
		tcp_send_packet (
     cbe:	ed b7       	in	r30, 0x3d	; 61
     cc0:	fe b7       	in	r31, 0x3e	; 62
     cc2:	72 82       	std	Z+2, r7	; 0x02
     cc4:	61 82       	std	Z+1, r6	; 0x01
     cc6:	c2 01       	movw	r24, r4
     cc8:	60 e5       	ldi	r22, 0x50	; 80
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	40 eb       	ldi	r20, 0xB0	; 176
     cce:	54 e0       	ldi	r21, 0x04	; 4
     cd0:	21 e1       	ldi	r18, 0x11	; 17
     cd2:	cc 24       	eor	r12, r12
     cd4:	dd 24       	eor	r13, r13
     cd6:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <tcp_send_packet>
     cda:	21 c0       	rjmp	.+66     	; 0xd1e <client_process+0x1d4>
		return;
		//menu_flag.bits.send_temp = 0;
		//send_syn = 0;
	}
	// answer FINACK from web server by send ACK to web server
	if ( rxtx_buffer [ TCP_FLAGS_P ] == (TCP_FLAG_FIN_V|TCP_FLAG_ACK_V) )
     cdc:	81 31       	cpi	r24, 0x11	; 17
     cde:	09 f5       	brne	.+66     	; 0xd22 <client_process+0x1d8>
	{
		// send ACK with seqack = 1
		tcp_send_packet (
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <client_process+0x198>
     ce2:	8c e2       	ldi	r24, 0x2C	; 44
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	ed b7       	in	r30, 0x3d	; 61
     ce8:	fe b7       	in	r31, 0x3e	; 62
     cea:	92 83       	std	Z+2, r25	; 0x02
     cec:	81 83       	std	Z+1, r24	; 0x01
     cee:	c2 01       	movw	r24, r4
     cf0:	60 e5       	ldi	r22, 0x50	; 80
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	40 eb       	ldi	r20, 0xB0	; 176
     cf6:	54 e0       	ldi	r21, 0x04	; 4
     cf8:	20 e1       	ldi	r18, 0x10	; 16
     cfa:	00 e0       	ldi	r16, 0x00	; 0
     cfc:	ee 24       	eor	r14, r14
     cfe:	e1 e0       	ldi	r30, 0x01	; 1
     d00:	ce 2e       	mov	r12, r30
     d02:	d1 2c       	mov	r13, r1
     d04:	aa 24       	eor	r10, r10
     d06:	bb 24       	eor	r11, r11
     d08:	34 e3       	ldi	r19, 0x34	; 52
     d0a:	83 2e       	mov	r8, r19
     d0c:	31 e0       	ldi	r19, 0x01	; 1
     d0e:	93 2e       	mov	r9, r19
     d10:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <tcp_send_packet>
					0,				// tcp data length
					(BYTE*)&server_mac,		// server mac address
					(BYTE*)&server_ip );	// server ip address
		// temparature has been sent
		// and wait for next schedule to send temparature
		flag1.bits.send_temp = 0;
     d14:	80 91 25 01 	lds	r24, 0x0125
		flag1.bits.syn_is_sent = 0;
     d18:	8f 7c       	andi	r24, 0xCF	; 207
     d1a:	80 93 25 01 	sts	0x0125, r24
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
	}
}
     d22:	c2 51       	subi	r28, 0x12	; 18
     d24:	da 4f       	sbci	r29, 0xFA	; 250
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	ef 90       	pop	r14
     d3a:	df 90       	pop	r13
     d3c:	cf 90       	pop	r12
     d3e:	bf 90       	pop	r11
     d40:	af 90       	pop	r10
     d42:	9f 90       	pop	r9
     d44:	8f 90       	pop	r8
     d46:	7f 90       	pop	r7
     d48:	6f 90       	pop	r6
     d4a:	5f 90       	pop	r5
     d4c:	4f 90       	pop	r4
     d4e:	08 95       	ret

00000d50 <server_process>:
// Function : server_process
// Description : Run web server and listen on port 80
//
//*****************************************************************************************
void server_process ( void )
{
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	c8 5f       	subi	r28, 0xF8	; 248
     d5e:	d5 40       	sbci	r29, 0x05	; 5
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
	IP_ADDR client_ip;
	// you can change rx,tx buffer size in includes.h
	BYTE rxtx_buffer[MAX_RXTX_BUFFER];
	WORD plen;
	
	if ( flag1.bits.syn_is_sent )
     d6a:	80 91 25 01 	lds	r24, 0x0125
     d6e:	85 fd       	sbrc	r24, 5
     d70:	38 c0       	rjmp	.+112    	; 0xde2 <server_process+0x92>
		return;
	// get new packet
	plen = enc28j60_packet_receive( (BYTE*)&rxtx_buffer, MAX_RXTX_BUFFER );
     d72:	ce 01       	movw	r24, r28
     d74:	0b 96       	adiw	r24, 0x0b	; 11
     d76:	6e ee       	ldi	r22, 0xEE	; 238
     d78:	75 e0       	ldi	r23, 0x05	; 5
     d7a:	0e 94 25 05 	call	0xa4a	; 0xa4a <enc28j60_packet_receive>
	
	//plen will ne unequal to zero if there is a valid packet (without crc error)
	if(plen==0)
     d7e:	89 2b       	or	r24, r25
     d80:	81 f1       	breq	.+96     	; 0xde2 <server_process+0x92>
		return;

	// copy client mac address from buffer to client mac variable
	memcpy ( (BYTE*)&client_mac, &rxtx_buffer[ ETH_SRC_MAC_P ], sizeof(MAC_ADDR) );
     d82:	de 01       	movw	r26, r28
     d84:	15 96       	adiw	r26, 0x05	; 5
     d86:	fe 01       	movw	r30, r28
     d88:	71 96       	adiw	r30, 0x11	; 17
     d8a:	86 e0       	ldi	r24, 0x06	; 6
     d8c:	01 90       	ld	r0, Z+
     d8e:	0d 92       	st	X+, r0
     d90:	81 50       	subi	r24, 0x01	; 1
     d92:	e1 f7       	brne	.-8      	; 0xd8c <server_process+0x3c>
	
	// check arp packet if match with avr ip let's send reply
	if ( arp_packet_is_arp( rxtx_buffer, (WORD_BYTES){ARP_OPCODE_REQUEST_V} ) )
     d94:	8e 01       	movw	r16, r28
     d96:	05 5f       	subi	r16, 0xF5	; 245
     d98:	1f 4f       	sbci	r17, 0xFF	; 255
     d9a:	c8 01       	movw	r24, r16
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	0e 94 57 0d 	call	0x1aae	; 0x1aae <arp_packet_is_arp>
     da4:	88 23       	and	r24, r24
     da6:	39 f0       	breq	.+14     	; 0xdb6 <server_process+0x66>
	{
		arp_send_reply ( (BYTE*)&rxtx_buffer, (BYTE*)&client_mac );
     da8:	c8 01       	movw	r24, r16
     daa:	be 01       	movw	r22, r28
     dac:	6b 5f       	subi	r22, 0xFB	; 251
     dae:	7f 4f       	sbci	r23, 0xFF	; 255
     db0:	0e 94 76 0d 	call	0x1aec	; 0x1aec <arp_send_reply>
     db4:	16 c0       	rjmp	.+44     	; 0xde2 <server_process+0x92>
		return;
	}

	// get client ip address
	memcpy ( (BYTE*)&client_ip, &rxtx_buffer[ IP_SRC_IP_P ], sizeof(IP_ADDR) );
     db6:	8d a1       	ldd	r24, Y+37	; 0x25
     db8:	9e a1       	ldd	r25, Y+38	; 0x26
     dba:	af a1       	ldd	r26, Y+39	; 0x27
     dbc:	b8 a5       	ldd	r27, Y+40	; 0x28
     dbe:	89 83       	std	Y+1, r24	; 0x01
     dc0:	9a 83       	std	Y+2, r25	; 0x02
     dc2:	ab 83       	std	Y+3, r26	; 0x03
     dc4:	bc 83       	std	Y+4, r27	; 0x04
	// check ip packet send to avr or not?
	if ( ip_packet_is_ip ( (BYTE*)&rxtx_buffer ) == 0 )
     dc6:	c8 01       	movw	r24, r16
     dc8:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <ip_packet_is_ip>
     dcc:	88 23       	and	r24, r24
     dce:	49 f0       	breq	.+18     	; 0xde2 <server_process+0x92>
	}


	// tcp start here
	// start web server at port 80, see http.c
	http_webserver_process ( (BYTE*)rxtx_buffer, (BYTE*)&client_mac, (BYTE*)&client_ip );
     dd0:	c8 01       	movw	r24, r16
     dd2:	be 01       	movw	r22, r28
     dd4:	6b 5f       	subi	r22, 0xFB	; 251
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	ae 01       	movw	r20, r28
     dda:	4f 5f       	subi	r20, 0xFF	; 255
     ddc:	5f 4f       	sbci	r21, 0xFF	; 255
     dde:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <http_webserver_process>
}
     de2:	c8 50       	subi	r28, 0x08	; 8
     de4:	da 4f       	sbci	r29, 0xFA	; 250
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	de bf       	out	0x3e, r29	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	cd bf       	out	0x3d, r28	; 61
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	08 95       	ret

00000dfa <main>:
// Function : main
// Description : main program, 
//
//*****************************************************************************************
int main (void)
{
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
	// change your mac address here
	avr_mac.byte[0] = 'A';
     dfe:	81 e4       	ldi	r24, 0x41	; 65
     e00:	80 93 26 01 	sts	0x0126, r24
	avr_mac.byte[1] = 'V';
     e04:	86 e5       	ldi	r24, 0x56	; 86
     e06:	80 93 27 01 	sts	0x0127, r24
	avr_mac.byte[2] = 'R';
     e0a:	92 e5       	ldi	r25, 0x52	; 82
     e0c:	90 93 28 01 	sts	0x0128, r25
	avr_mac.byte[3] = 'P';
     e10:	80 e5       	ldi	r24, 0x50	; 80
     e12:	80 93 29 01 	sts	0x0129, r24
	avr_mac.byte[4] = 'O';
     e16:	8f e4       	ldi	r24, 0x4F	; 79
     e18:	80 93 2a 01 	sts	0x012A, r24
	avr_mac.byte[5] = 'R';
     e1c:	90 93 2b 01 	sts	0x012B, r25

	// read avr and server ip from eeprom
	eeprom_read_block ( &avr_ip, ee_avr_ip, 4 );
     e20:	80 e3       	ldi	r24, 0x30	; 48
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	44 e0       	ldi	r20, 0x04	; 4
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__eerd_block_m32>
	eeprom_read_block ( &server_ip, ee_server_ip, 4 );
     e30:	8c e2       	ldi	r24, 0x2C	; 44
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	64 e0       	ldi	r22, 0x04	; 4
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	44 e0       	ldi	r20, 0x04	; 4
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__eerd_block_m32>
	
	// setup port as input and enable pull-up
	SW_DDR &= ~ ( _BV( SW_MENU ) | _BV( SW_EXIT ) | _BV( SW_UP ) | _BV( SW_DW ) );
     e40:	8a b3       	in	r24, 0x1a	; 26
     e42:	8f 70       	andi	r24, 0x0F	; 15
     e44:	8a bb       	out	0x1a, r24	; 26
	SW_PORT |= _BV( SW_MENU ) | _BV( SW_EXIT ) | _BV( SW_UP ) | _BV( SW_DW );
     e46:	8b b3       	in	r24, 0x1b	; 27
     e48:	80 6f       	ori	r24, 0xF0	; 240
     e4a:	8b bb       	out	0x1b, r24	; 27
	SFIOR &= ~_BV( PUD );
     e4c:	80 b7       	in	r24, 0x30	; 48
     e4e:	8b 7f       	andi	r24, 0xFB	; 251
     e50:	80 bf       	out	0x30, r24	; 48

	// setup lcd backlight as output
	LCD_BL_DDR |= _BV( LCD_BL_PIN );
     e52:	bb 9a       	sbi	0x17, 3	; 23
	// lcd backlight on
	LCD_BL_PORT |= _BV( LCD_BL_PIN );
     e54:	c3 9a       	sbi	0x18, 3	; 24
	
	// setup clock for timer1
	TCCR1B = 0x01;	// clk/1 no prescaling
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	8e bd       	out	0x2e, r24	; 46

	// initial adc, lcd, and menu
	adc_init();
     e5a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <adc_init>
	lcd_init ();
     e5e:	0e 94 b0 14 	call	0x2960	; 0x2960 <lcd_init>
	menu_init ();
     e62:	0e 94 75 11 	call	0x22ea	; 0x22ea <menu_init>

	// set LED1, LED2 as output */
	LED_DDR |= _BV( LED_PIN1_DDR ) | _BV( LED_PIN2_DDR )| _BV( LED_PIN3_DDR )| _BV( LED_PIN4_DDR )| _BV( LED_PIN5_DDR )| _BV( LED_PIN6_DDR );
     e66:	84 b3       	in	r24, 0x14	; 20
     e68:	8c 6f       	ori	r24, 0xFC	; 252
     e6a:	84 bb       	out	0x14, r24	; 20
	// set LED pin to "1" ( LED1,LED2 off)
	//LED_PORT |= _BV( LED_PIN1 ) | _BV( LED_PIN2 )| _BV( LED_PIN3 )| _BV( LED_PIN4 )| _BV( LED_PIN5 )| _BV( LED_PIN6 );
	LED_PORT =0x03;
     e6c:	83 e0       	ldi	r24, 0x03	; 3
     e6e:	85 bb       	out	0x15, r24	; 21

	// initial enc28j60
	enc28j60_init( (BYTE*)&avr_mac );
     e70:	86 e2       	ldi	r24, 0x26	; 38
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	0e 94 10 04 	call	0x820	; 0x820 <enc28j60_init>
	
// added in V1.1
	lcd_print_p( (PGM_P)version );
     e78:	84 e5       	ldi	r24, 0x54	; 84
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 21 15 	call	0x2a42	; 0x2a42 <lcd_print_p>
	for(;;)
	{
		// wait until timer1 overflow
		while ( (TIFR & _BV ( TOV1 )) == 0 );
		TIFR |= _BV(TOV1);
		TCNT1 = 1536;	// Timer1 overflow every 1/16MHz * ( 65536 - 1536 ) = 4ms, 250Hz
     e80:	c0 e0       	ldi	r28, 0x00	; 0
     e82:	d6 e0       	ldi	r29, 0x06	; 6

	// loop forever
	for(;;)
	{
		// wait until timer1 overflow
		while ( (TIFR & _BV ( TOV1 )) == 0 );
     e84:	08 b6       	in	r0, 0x38	; 56
     e86:	02 fe       	sbrs	r0, 2
     e88:	fd cf       	rjmp	.-6      	; 0xe84 <main+0x8a>
		TIFR |= _BV(TOV1);
     e8a:	88 b7       	in	r24, 0x38	; 56
     e8c:	84 60       	ori	r24, 0x04	; 4
     e8e:	88 bf       	out	0x38, r24	; 56
		TCNT1 = 1536;	// Timer1 overflow every 1/16MHz * ( 65536 - 1536 ) = 4ms, 250Hz
     e90:	dd bd       	out	0x2d, r29	; 45
     e92:	cc bd       	out	0x2c, r28	; 44

		// general time base, generate by timer1
		// overflow every 1/250 seconds
		time_base ();
     e94:	0e 94 a4 13 	call	0x2748	; 0x2748 <time_base>
		
		// read temparature
		adc_read_temp();
     e98:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <adc_read_temp>

		// server process response for arp, icmp, http
		server_process ();
     e9c:	0e 94 a8 06 	call	0xd50	; 0xd50 <server_process>

		// send temparature to web server unsing http protocol
		// disable by default.
		client_process ();
     ea0:	0e 94 a5 05 	call	0xb4a	; 0xb4a <client_process>

		// lcd user interface menu
		// setup IP address, countdown timer
		menu_process ();
     ea4:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <menu_process>

		// display AVR ethernet status
		// temparature, AVR ip, server ip, countdown time
		standby_display ();
     ea8:	0e 94 22 14 	call	0x2844	; 0x2844 <standby_display>
     eac:	eb cf       	rjmp	.-42     	; 0xe84 <main+0x8a>

00000eae <http_get_ip>:
// 10.1.1.1 (ascii), http_get_ip function convert ip address in ascii to binary and stored
// in BYTE *dest
//
//********************************************************************************************
unsigned char http_get_ip ( unsigned char *buf, BYTE *dest )
{
     eae:	dc 01       	movw	r26, r24
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	31 e0       	ldi	r19, 0x01	; 1
     eb4:	20 e0       	ldi	r18, 0x00	; 0

		if ( ch >= '0' && ch <= '9' )
		{
			ch = ch - '0';
			temp = (temp * digit) + ch;
			digit *= 10;
     eb6:	5a e0       	ldi	r21, 0x0A	; 10
	digit = 1;
	temp = 0;

	while ( 1 )
	{
		ch = *buf++;
     eb8:	9d 91       	ld	r25, X+

		if ( ch >= '0' && ch <= '9' )
     eba:	49 2f       	mov	r20, r25
     ebc:	40 53       	subi	r20, 0x30	; 48
     ebe:	4a 30       	cpi	r20, 0x0A	; 10
     ec0:	40 f4       	brcc	.+16     	; 0xed2 <http_get_ip+0x24>
		{
			ch = ch - '0';
			temp = (temp * digit) + ch;
     ec2:	23 9f       	mul	r18, r19
     ec4:	20 2d       	mov	r18, r0
     ec6:	11 24       	eor	r1, r1
     ec8:	24 0f       	add	r18, r20
			digit *= 10;
     eca:	35 9f       	mul	r19, r21
     ecc:	30 2d       	mov	r19, r0
     ece:	11 24       	eor	r1, r1
     ed0:	0d c0       	rjmp	.+26     	; 0xeec <http_get_ip+0x3e>
		}
		else if ( ch == '.' || ch == '\0' )
     ed2:	9e 32       	cpi	r25, 0x2E	; 46
     ed4:	21 f0       	breq	.+8      	; 0xede <http_get_ip+0x30>
     ed6:	99 23       	and	r25, r25
     ed8:	11 f0       	breq	.+4      	; 0xede <http_get_ip+0x30>
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	08 95       	ret
		{
			dest[ i ] = temp;
     ede:	fb 01       	movw	r30, r22
     ee0:	e8 0f       	add	r30, r24
     ee2:	f1 1d       	adc	r31, r1
     ee4:	20 83       	st	Z, r18
			i++;
     ee6:	8f 5f       	subi	r24, 0xFF	; 255
     ee8:	31 e0       	ldi	r19, 0x01	; 1
     eea:	20 e0       	ldi	r18, 0x00	; 0
		}
		else
		{
			return 0;
		}
		if ( i == 4 )
     eec:	84 30       	cpi	r24, 0x04	; 4
     eee:	21 f7       	brne	.-56     	; 0xeb8 <http_get_ip+0xa>
			return i;
	}
}
     ef0:	08 95       	ret

00000ef2 <hex2int>:
// Function : hex2int
// Description : convert a single hex digit character to its integer value
//
//********************************************************************************************
unsigned char hex2int(char c)
{
     ef2:	98 2f       	mov	r25, r24
	if (c >= '0' && c <='9')
     ef4:	80 53       	subi	r24, 0x30	; 48
     ef6:	8a 30       	cpi	r24, 0x0A	; 10
     ef8:	68 f0       	brcs	.+26     	; 0xf14 <hex2int+0x22>
		return((unsigned char)c - '0');

	if (c >= 'a' && c <='f')
     efa:	81 53       	subi	r24, 0x31	; 49
     efc:	86 30       	cpi	r24, 0x06	; 6
     efe:	10 f4       	brcc	.+4      	; 0xf04 <hex2int+0x12>
		return((unsigned char)c - 'a' + 10);
     f00:	86 5f       	subi	r24, 0xF6	; 246
     f02:	08 95       	ret
	
	if (c >= 'A' && c <='F')
     f04:	89 2f       	mov	r24, r25
     f06:	81 54       	subi	r24, 0x41	; 65
     f08:	86 30       	cpi	r24, 0x06	; 6
     f0a:	10 f0       	brcs	.+4      	; 0xf10 <hex2int+0x1e>
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	08 95       	ret
		return((unsigned char)c - 'A' + 10);
     f10:	89 2f       	mov	r24, r25
     f12:	87 53       	subi	r24, 0x37	; 55

	return 0;
}
     f14:	08 95       	ret

00000f16 <urldecode>:
// Function : urldecode
// Description : decode a url string e.g "hello%20joe" or "hello+joe" becomes "hello joe"
//
//********************************************************************************************
void urldecode(unsigned char *urlbuf)
{
     f16:	cf 92       	push	r12
     f18:	df 92       	push	r13
     f1a:	ff 92       	push	r15
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	ec 01       	movw	r28, r24
     f26:	6c 01       	movw	r12, r24
     f28:	1c c0       	rjmp	.+56     	; 0xf62 <urldecode+0x4c>
	unsigned char *dst;

	dst=urlbuf;
	while ((c = *urlbuf))
	{
		if (c == '+') c = ' ';
     f2a:	9b 32       	cpi	r25, 0x2B	; 43
     f2c:	11 f4       	brne	.+4      	; 0xf32 <urldecode+0x1c>
     f2e:	90 e2       	ldi	r25, 0x20	; 32
     f30:	14 c0       	rjmp	.+40     	; 0xf5a <urldecode+0x44>
		if (c == '%')
     f32:	95 32       	cpi	r25, 0x25	; 37
     f34:	91 f4       	brne	.+36     	; 0xf5a <urldecode+0x44>
		{
			urlbuf++;
     f36:	8e 01       	movw	r16, r28
     f38:	0f 5f       	subi	r16, 0xFF	; 255
     f3a:	1f 4f       	sbci	r17, 0xFF	; 255
			c = *urlbuf;
			urlbuf++;
     f3c:	e8 01       	movw	r28, r16
     f3e:	21 96       	adiw	r28, 0x01	; 1
			c = (hex2int(c) << 4) | hex2int(*urlbuf);
     f40:	f8 01       	movw	r30, r16
     f42:	80 81       	ld	r24, Z
     f44:	0e 94 79 07 	call	0xef2	; 0xef2 <hex2int>
     f48:	f8 2e       	mov	r15, r24
     f4a:	f8 01       	movw	r30, r16
     f4c:	81 81       	ldd	r24, Z+1	; 0x01
     f4e:	0e 94 79 07 	call	0xef2	; 0xef2 <hex2int>
     f52:	9f 2d       	mov	r25, r15
     f54:	92 95       	swap	r25
     f56:	90 7f       	andi	r25, 0xF0	; 240
     f58:	98 2b       	or	r25, r24
		}
		*dst = c;
     f5a:	f6 01       	movw	r30, r12
     f5c:	91 93       	st	Z+, r25
     f5e:	6f 01       	movw	r12, r30
		dst++;
		urlbuf++;
     f60:	21 96       	adiw	r28, 0x01	; 1
{
	unsigned char c;
	unsigned char *dst;

	dst=urlbuf;
	while ((c = *urlbuf))
     f62:	98 81       	ld	r25, Y
     f64:	99 23       	and	r25, r25
     f66:	09 f7       	brne	.-62     	; 0xf2a <urldecode+0x14>
		}
		*dst = c;
		dst++;
		urlbuf++;
	}
	*dst = '\0';
     f68:	f6 01       	movw	r30, r12
     f6a:	10 82       	st	Z, r1
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	08 95       	ret

00000f7c <http_status>:

	return dlength;
}

WORD http_status( BYTE *rxtx_buffer )
{
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	8c 01       	movw	r16, r24
	WORD dlen;
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n" ), 0 );
     f82:	68 ec       	ldi	r22, 0xC8	; 200
     f84:	74 e0       	ldi	r23, 0x04	; 4
     f86:	40 e0       	ldi	r20, 0x00	; 0
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
     f8e:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "{\"status\":\"OK\"}" ), dlen );
     f90:	c8 01       	movw	r24, r16
     f92:	68 eb       	ldi	r22, 0xB8	; 184
     f94:	74 e0       	ldi	r23, 0x04	; 4
     f96:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
	return(dlen);
}
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	08 95       	ret

00000fa0 <http_home>:
// Function : http_home
// Description : prepare the webpage by writing the data to the tcp send buffer
//
//*****************************************************************************************
WORD http_home( BYTE *rxtx_buffer )
{
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	c0 54       	subi	r28, 0x40	; 64
     fb6:	d0 40       	sbci	r29, 0x00	; 0
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	6c 01       	movw	r12, r24
	WORD dlen, adc0_value;
	BYTE temp_value;
	//	BYTE count_time_temp[3];
	BYTE generic_buf[64];

	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n" ), 0 );
     fc4:	6b ed       	ldi	r22, 0xDB	; 219
     fc6:	73 e0       	ldi	r23, 0x03	; 3
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
     fd0:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR  ( "<title>" ), dlen );
     fd2:	c6 01       	movw	r24, r12
     fd4:	63 ed       	ldi	r22, 0xD3	; 211
     fd6:	73 e0       	ldi	r23, 0x03	; 3
     fd8:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
     fdc:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, (PGM_P)web_title, dlen );
     fde:	c6 01       	movw	r24, r12
     fe0:	6f e5       	ldi	r22, 0x5F	; 95
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
     fe8:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</title>" ), dlen );
     fea:	c6 01       	movw	r24, r12
     fec:	6a ec       	ldi	r22, 0xCA	; 202
     fee:	73 e0       	ldi	r23, 0x03	; 3
     ff0:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
     ff4:	ac 01       	movw	r20, r24


	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "LED1: " ), dlen );
     ff6:	c6 01       	movw	r24, r12
     ff8:	63 ec       	ldi	r22, 0xC3	; 195
     ffa:	73 e0       	ldi	r23, 0x03	; 3
     ffc:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1000:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN1 )) )
    1002:	af 9b       	sbis	0x15, 7	; 21
    1004:	04 c0       	rjmp	.+8      	; 0x100e <http_home+0x6e>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=green>ON" ), dlen );
    1006:	c6 01       	movw	r24, r12
    1008:	6e ea       	ldi	r22, 0xAE	; 174
    100a:	73 e0       	ldi	r23, 0x03	; 3
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <http_home+0x74>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=red>OFF" ), dlen );
    100e:	c6 01       	movw	r24, r12
    1010:	6a e9       	ldi	r22, 0x9A	; 154
    1012:	73 e0       	ldi	r23, 0x03	; 3
    1014:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1018:	ac 01       	movw	r20, r24
		
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</font> [ <a href=\"./?l1=" ), dlen );
    101a:	c6 01       	movw	r24, r12
    101c:	60 e8       	ldi	r22, 0x80	; 128
    101e:	73 e0       	ldi	r23, 0x03	; 3
    1020:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1024:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN1 )) )
    1026:	af 9b       	sbis	0x15, 7	; 21
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <http_home+0x92>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\">OFF" ), dlen );
    102a:	c6 01       	movw	r24, r12
    102c:	69 e7       	ldi	r22, 0x79	; 121
    102e:	73 e0       	ldi	r23, 0x03	; 3
    1030:	03 c0       	rjmp	.+6      	; 0x1038 <http_home+0x98>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\">ON" ), dlen );
    1032:	c6 01       	movw	r24, r12
    1034:	63 e7       	ldi	r22, 0x73	; 115
    1036:	73 e0       	ldi	r23, 0x03	; 3
    1038:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    103c:	ac 01       	movw	r20, r24


	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</a> ], LED2: " ), dlen );
    103e:	c6 01       	movw	r24, r12
    1040:	64 e6       	ldi	r22, 0x64	; 100
    1042:	73 e0       	ldi	r23, 0x03	; 3
    1044:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1048:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN2 )) )
    104a:	ae 9b       	sbis	0x15, 6	; 21
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <http_home+0xb6>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=green>ON" ), dlen );
    104e:	c6 01       	movw	r24, r12
    1050:	6f e4       	ldi	r22, 0x4F	; 79
    1052:	73 e0       	ldi	r23, 0x03	; 3
    1054:	03 c0       	rjmp	.+6      	; 0x105c <http_home+0xbc>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=red>OFF" ), dlen );
    1056:	c6 01       	movw	r24, r12
    1058:	6b e3       	ldi	r22, 0x3B	; 59
    105a:	73 e0       	ldi	r23, 0x03	; 3
    105c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1060:	ac 01       	movw	r20, r24
		
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</font> [ <a href=\"./?l2=" ), dlen );
    1062:	c6 01       	movw	r24, r12
    1064:	61 e2       	ldi	r22, 0x21	; 33
    1066:	73 e0       	ldi	r23, 0x03	; 3
    1068:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    106c:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN2 )) )
    106e:	ae 9b       	sbis	0x15, 6	; 21
    1070:	04 c0       	rjmp	.+8      	; 0x107a <http_home+0xda>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\">OFF" ), dlen );
    1072:	c6 01       	movw	r24, r12
    1074:	6a e1       	ldi	r22, 0x1A	; 26
    1076:	73 e0       	ldi	r23, 0x03	; 3
    1078:	03 c0       	rjmp	.+6      	; 0x1080 <http_home+0xe0>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\">ON" ), dlen );
    107a:	c6 01       	movw	r24, r12
    107c:	64 e1       	ldi	r22, 0x14	; 20
    107e:	73 e0       	ldi	r23, 0x03	; 3
    1080:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1084:	ac 01       	movw	r20, r24
		


	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</a> ], LED3: " ), dlen );
    1086:	c6 01       	movw	r24, r12
    1088:	65 e0       	ldi	r22, 0x05	; 5
    108a:	73 e0       	ldi	r23, 0x03	; 3
    108c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1090:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN3 )) )
    1092:	ad 9b       	sbis	0x15, 5	; 21
    1094:	04 c0       	rjmp	.+8      	; 0x109e <http_home+0xfe>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=green>ON" ), dlen );
    1096:	c6 01       	movw	r24, r12
    1098:	60 ef       	ldi	r22, 0xF0	; 240
    109a:	72 e0       	ldi	r23, 0x02	; 2
    109c:	03 c0       	rjmp	.+6      	; 0x10a4 <http_home+0x104>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=red>OFF" ), dlen );
    109e:	c6 01       	movw	r24, r12
    10a0:	6c ed       	ldi	r22, 0xDC	; 220
    10a2:	72 e0       	ldi	r23, 0x02	; 2
    10a4:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    10a8:	ac 01       	movw	r20, r24
		
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</font> [ <a href=\"./?l3=" ), dlen );
    10aa:	c6 01       	movw	r24, r12
    10ac:	62 ec       	ldi	r22, 0xC2	; 194
    10ae:	72 e0       	ldi	r23, 0x02	; 2
    10b0:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    10b4:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN3 )) )
    10b6:	ad 9b       	sbis	0x15, 5	; 21
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <http_home+0x122>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\">OFF" ), dlen );
    10ba:	c6 01       	movw	r24, r12
    10bc:	6b eb       	ldi	r22, 0xBB	; 187
    10be:	72 e0       	ldi	r23, 0x02	; 2
    10c0:	03 c0       	rjmp	.+6      	; 0x10c8 <http_home+0x128>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\">ON" ), dlen );
    10c2:	c6 01       	movw	r24, r12
    10c4:	65 eb       	ldi	r22, 0xB5	; 181
    10c6:	72 e0       	ldi	r23, 0x02	; 2
    10c8:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    10cc:	ac 01       	movw	r20, r24
		


	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</a> ], LED4: " ), dlen );
    10ce:	c6 01       	movw	r24, r12
    10d0:	66 ea       	ldi	r22, 0xA6	; 166
    10d2:	72 e0       	ldi	r23, 0x02	; 2
    10d4:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    10d8:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN4 )) )
    10da:	ac 9b       	sbis	0x15, 4	; 21
    10dc:	04 c0       	rjmp	.+8      	; 0x10e6 <http_home+0x146>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=green>ON" ), dlen );
    10de:	c6 01       	movw	r24, r12
    10e0:	61 e9       	ldi	r22, 0x91	; 145
    10e2:	72 e0       	ldi	r23, 0x02	; 2
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <http_home+0x14c>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=red>OFF" ), dlen );
    10e6:	c6 01       	movw	r24, r12
    10e8:	6d e7       	ldi	r22, 0x7D	; 125
    10ea:	72 e0       	ldi	r23, 0x02	; 2
    10ec:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    10f0:	ac 01       	movw	r20, r24
		
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</font> [ <a href=\"./?l4=" ), dlen );
    10f2:	c6 01       	movw	r24, r12
    10f4:	63 e6       	ldi	r22, 0x63	; 99
    10f6:	72 e0       	ldi	r23, 0x02	; 2
    10f8:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    10fc:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN4 )) )
    10fe:	ac 9b       	sbis	0x15, 4	; 21
    1100:	04 c0       	rjmp	.+8      	; 0x110a <http_home+0x16a>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\">OFF" ), dlen );
    1102:	c6 01       	movw	r24, r12
    1104:	6c e5       	ldi	r22, 0x5C	; 92
    1106:	72 e0       	ldi	r23, 0x02	; 2
    1108:	03 c0       	rjmp	.+6      	; 0x1110 <http_home+0x170>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\">ON" ), dlen );
    110a:	c6 01       	movw	r24, r12
    110c:	66 e5       	ldi	r22, 0x56	; 86
    110e:	72 e0       	ldi	r23, 0x02	; 2
    1110:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1114:	ac 01       	movw	r20, r24
		


	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</a> ], LED5: " ), dlen );
    1116:	c6 01       	movw	r24, r12
    1118:	67 e4       	ldi	r22, 0x47	; 71
    111a:	72 e0       	ldi	r23, 0x02	; 2
    111c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1120:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN5 )) )
    1122:	ab 9b       	sbis	0x15, 3	; 21
    1124:	04 c0       	rjmp	.+8      	; 0x112e <http_home+0x18e>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=green>ON" ), dlen );
    1126:	c6 01       	movw	r24, r12
    1128:	62 e3       	ldi	r22, 0x32	; 50
    112a:	72 e0       	ldi	r23, 0x02	; 2
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <http_home+0x194>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=red>OFF" ), dlen );
    112e:	c6 01       	movw	r24, r12
    1130:	6e e1       	ldi	r22, 0x1E	; 30
    1132:	72 e0       	ldi	r23, 0x02	; 2
    1134:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1138:	ac 01       	movw	r20, r24
		
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</font> [ <a href=\"./?l5=" ), dlen );
    113a:	c6 01       	movw	r24, r12
    113c:	64 e0       	ldi	r22, 0x04	; 4
    113e:	72 e0       	ldi	r23, 0x02	; 2
    1140:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1144:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN5 )) )
    1146:	ab 9b       	sbis	0x15, 3	; 21
    1148:	04 c0       	rjmp	.+8      	; 0x1152 <http_home+0x1b2>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\">OFF" ), dlen );
    114a:	c6 01       	movw	r24, r12
    114c:	6d ef       	ldi	r22, 0xFD	; 253
    114e:	71 e0       	ldi	r23, 0x01	; 1
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <http_home+0x1b8>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\">ON" ), dlen );
    1152:	c6 01       	movw	r24, r12
    1154:	67 ef       	ldi	r22, 0xF7	; 247
    1156:	71 e0       	ldi	r23, 0x01	; 1
    1158:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    115c:	ac 01       	movw	r20, r24
		


	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</a> ], LED6: " ), dlen );
    115e:	c6 01       	movw	r24, r12
    1160:	68 ee       	ldi	r22, 0xE8	; 232
    1162:	71 e0       	ldi	r23, 0x01	; 1
    1164:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1168:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN6 )) )
    116a:	aa 9b       	sbis	0x15, 2	; 21
    116c:	04 c0       	rjmp	.+8      	; 0x1176 <http_home+0x1d6>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=green>ON" ), dlen );
    116e:	c6 01       	movw	r24, r12
    1170:	63 ed       	ldi	r22, 0xD3	; 211
    1172:	71 e0       	ldi	r23, 0x01	; 1
    1174:	03 c0       	rjmp	.+6      	; 0x117c <http_home+0x1dc>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=red>OFF" ), dlen );
    1176:	c6 01       	movw	r24, r12
    1178:	6f eb       	ldi	r22, 0xBF	; 191
    117a:	71 e0       	ldi	r23, 0x01	; 1
    117c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1180:	ac 01       	movw	r20, r24
		
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</font> [ <a href=\"./?l6=" ), dlen );
    1182:	c6 01       	movw	r24, r12
    1184:	65 ea       	ldi	r22, 0xA5	; 165
    1186:	71 e0       	ldi	r23, 0x01	; 1
    1188:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    118c:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN6 )) )
    118e:	aa 9b       	sbis	0x15, 2	; 21
    1190:	04 c0       	rjmp	.+8      	; 0x119a <http_home+0x1fa>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\">OFF" ), dlen );
    1192:	c6 01       	movw	r24, r12
    1194:	6e e9       	ldi	r22, 0x9E	; 158
    1196:	71 e0       	ldi	r23, 0x01	; 1
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <http_home+0x200>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\">ON" ), dlen );
    119a:	c6 01       	movw	r24, r12
    119c:	68 e9       	ldi	r22, 0x98	; 152
    119e:	71 e0       	ldi	r23, 0x01	; 1
    11a0:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    11a4:	ac 01       	movw	r20, r24
		



	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</a> ]<br><br>" ), dlen );
    11a6:	c6 01       	movw	r24, r12
    11a8:	69 e8       	ldi	r22, 0x89	; 137
    11aa:	71 e0       	ldi	r23, 0x01	; 1
    11ac:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    11b0:	ac 01       	movw	r20, r24
	// read adc0
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "ACD0 = " ), dlen );
    11b2:	c6 01       	movw	r24, r12
    11b4:	61 e8       	ldi	r22, 0x81	; 129
    11b6:	71 e0       	ldi	r23, 0x01	; 1
    11b8:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    11bc:	7c 01       	movw	r14, r24
	adc0_value = adc_read ( 0 );
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <adc_read>
    11c4:	ac 01       	movw	r20, r24
	print_decimal ( generic_buf, 4, adc0_value );
    11c6:	8e 01       	movw	r16, r28
    11c8:	0f 5f       	subi	r16, 0xFF	; 255
    11ca:	1f 4f       	sbci	r17, 0xFF	; 255
    11cc:	c8 01       	movw	r24, r16
    11ce:	64 e0       	ldi	r22, 0x04	; 4
    11d0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <print_decimal>
	generic_buf[ 4 ] = '\0';
    11d4:	1d 82       	std	Y+5, r1	; 0x05
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    11d6:	c6 01       	movw	r24, r12
    11d8:	b8 01       	movw	r22, r16
    11da:	a7 01       	movw	r20, r14
    11dc:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <tcp_puts_data>
    11e0:	ac 01       	movw	r20, r24
	
	// read temp
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "  Temparature = " ), dlen );
    11e2:	c6 01       	movw	r24, r12
    11e4:	60 e7       	ldi	r22, 0x70	; 112
    11e6:	71 e0       	ldi	r23, 0x01	; 1
    11e8:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    11ec:	7c 01       	movw	r14, r24
	temp_value = adc_read_temp();
    11ee:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <adc_read_temp>
    11f2:	48 2f       	mov	r20, r24
	print_decimal ( generic_buf, 2, temp_value );
    11f4:	c8 01       	movw	r24, r16
    11f6:	62 e0       	ldi	r22, 0x02	; 2
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <print_decimal>
	generic_buf[ 2 ] = '\0';
    11fe:	1b 82       	std	Y+3, r1	; 0x03
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    1200:	c6 01       	movw	r24, r12
    1202:	b8 01       	movw	r22, r16
    1204:	a7 01       	movw	r20, r14
    1206:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <tcp_puts_data>
    120a:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "&deg;C<br>" ), dlen );
    120c:	c6 01       	movw	r24, r12
    120e:	65 e6       	ldi	r22, 0x65	; 101
    1210:	71 e0       	ldi	r23, 0x01	; 1
    1212:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1216:	ac 01       	movw	r20, r24
	print_ip ( generic_buf, (BYTE*)&server_ip, 0 );
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "\"> <input type=\"submit\" value=\"Server IP\"></form>" ), dlen );
	*/
	// Write LCD form
	dlen = tcp_puts_data_p ( rxtx_buffer, (PGM_P) tag_form, dlen );
    1218:	c6 01       	movw	r24, r12
    121a:	6f e9       	ldi	r22, 0x9F	; 159
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1222:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<input name=\"lcd1\" type=\"text\" size=\"16\" maxlength=\"16\"><br>" ), dlen );
    1224:	c6 01       	movw	r24, r12
    1226:	68 e2       	ldi	r22, 0x28	; 40
    1228:	71 e0       	ldi	r23, 0x01	; 1
    122a:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    122e:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<input name=\"lcd2\" type=\"text\" size=\"16\" maxlength=\"16\">" ), dlen );
    1230:	c6 01       	movw	r24, r12
    1232:	6f ee       	ldi	r22, 0xEF	; 239
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    123a:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<input type=\"submit\" value=\"Write LCD\"></form>" ), dlen );
    123c:	c6 01       	movw	r24, r12
    123e:	60 ec       	ldi	r22, 0xC0	; 192
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
	

	return(dlen);
}
    1246:	c0 5c       	subi	r28, 0xC0	; 192
    1248:	df 4f       	sbci	r29, 0xFF	; 255
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	df 90       	pop	r13
    1262:	cf 90       	pop	r12
    1264:	08 95       	ret

00001266 <http_put_request>:
// Description : put http request to tx buffer contain 2-variables pwd and temp.
// webserver receive pwd, temp and save to text file by PHP script on webserver.
//
//*****************************************************************************************
WORD http_put_request ( BYTE *rxtx_buffer )
{
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	c0 54       	subi	r28, 0x40	; 64
    1278:	d0 40       	sbci	r29, 0x00	; 0
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	8c 01       	movw	r16, r24
	BYTE temp_value;
	WORD dlength;
	BYTE generic_buf[64];
	
	temp_value = adc_read_temp();
    1286:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <adc_read_temp>
    128a:	48 2f       	mov	r20, r24
	print_decimal ( generic_buf, 2, temp_value );
    128c:	7e 01       	movw	r14, r28
    128e:	08 94       	sec
    1290:	e1 1c       	adc	r14, r1
    1292:	f1 1c       	adc	r15, r1
    1294:	c7 01       	movw	r24, r14
    1296:	62 e0       	ldi	r22, 0x02	; 2
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <print_decimal>
	generic_buf[ 2 ] = '\0';
    129e:	1b 82       	std	Y+3, r1	; 0x03

	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "GET /avrnet/save.php?pwd=secret&temp=" ), 0 );
    12a0:	c8 01       	movw	r24, r16
    12a2:	60 e7       	ldi	r22, 0x70	; 112
    12a4:	75 e0       	ldi	r23, 0x05	; 5
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    12ae:	ac 01       	movw	r20, r24
	dlength = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength );
    12b0:	c8 01       	movw	r24, r16
    12b2:	b7 01       	movw	r22, r14
    12b4:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <tcp_puts_data>
    12b8:	ac 01       	movw	r20, r24
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( " HTTP/1.0\r\n" ), dlength );
    12ba:	c8 01       	movw	r24, r16
    12bc:	64 e6       	ldi	r22, 0x64	; 100
    12be:	75 e0       	ldi	r23, 0x05	; 5
    12c0:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    12c4:	ac 01       	movw	r20, r24
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "Host: 192.168.1.30\r\n" ), dlength );
    12c6:	c8 01       	movw	r24, r16
    12c8:	6f e4       	ldi	r22, 0x4F	; 79
    12ca:	75 e0       	ldi	r23, 0x05	; 5
    12cc:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    12d0:	ac 01       	movw	r20, r24
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "User-Agent: Smart home\r\n" ), dlength );
    12d2:	c8 01       	movw	r24, r16
    12d4:	66 e3       	ldi	r22, 0x36	; 54
    12d6:	75 e0       	ldi	r23, 0x05	; 5
    12d8:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    12dc:	ac 01       	movw	r20, r24
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "Accept: text/html\r\n" ), dlength );
    12de:	c8 01       	movw	r24, r16
    12e0:	62 e2       	ldi	r22, 0x22	; 34
    12e2:	75 e0       	ldi	r23, 0x05	; 5
    12e4:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    12e8:	ac 01       	movw	r20, r24
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "Keep-Alive: 300\r\n" ), dlength );
    12ea:	c8 01       	movw	r24, r16
    12ec:	60 e1       	ldi	r22, 0x10	; 16
    12ee:	75 e0       	ldi	r23, 0x05	; 5
    12f0:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    12f4:	ac 01       	movw	r20, r24
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "Connection: keep-alive\r\n\r\n" ), dlength );
    12f6:	c8 01       	movw	r24, r16
    12f8:	65 ef       	ldi	r22, 0xF5	; 245
    12fa:	74 e0       	ldi	r23, 0x04	; 4
    12fc:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>

	return dlength;
}
    1300:	c0 5c       	subi	r28, 0xC0	; 192
    1302:	df 4f       	sbci	r29, 0xFF	; 255
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	08 95       	ret

0000131c <http_api>:
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "{\"status\":\"OK\"}" ), dlen );
	return(dlen);
}

WORD http_api( BYTE *rxtx_buffer )
{
    131c:	cf 92       	push	r12
    131e:	df 92       	push	r13
    1320:	ef 92       	push	r14
    1322:	ff 92       	push	r15
    1324:	0f 93       	push	r16
    1326:	1f 93       	push	r17
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	c0 54       	subi	r28, 0x40	; 64
    1332:	d0 40       	sbci	r29, 0x00	; 0
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	6c 01       	movw	r12, r24
	WORD dlen, adc0_value;
	BYTE temp_value;
	BYTE generic_buf[64];

	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n" ), 0 );
    1340:	6b e8       	ldi	r22, 0x8B	; 139
    1342:	74 e0       	ldi	r23, 0x04	; 4
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    134c:	ac 01       	movw	r20, r24
	

	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "{\"l1\":\"" ), dlen );
    134e:	c6 01       	movw	r24, r12
    1350:	63 e8       	ldi	r22, 0x83	; 131
    1352:	74 e0       	ldi	r23, 0x04	; 4
    1354:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1358:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN1 )) )
    135a:	af 9b       	sbis	0x15, 7	; 21
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <http_api+0x4a>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\"" ), dlen );
    135e:	c6 01       	movw	r24, r12
    1360:	60 e8       	ldi	r22, 0x80	; 128
    1362:	74 e0       	ldi	r23, 0x04	; 4
    1364:	03 c0       	rjmp	.+6      	; 0x136c <http_api+0x50>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\"" ), dlen );
    1366:	c6 01       	movw	r24, r12
    1368:	6d e7       	ldi	r22, 0x7D	; 125
    136a:	74 e0       	ldi	r23, 0x04	; 4
    136c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1370:	ac 01       	movw	r20, r24
		
	
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"l2\":\"" ), dlen );
    1372:	c6 01       	movw	r24, r12
    1374:	65 e7       	ldi	r22, 0x75	; 117
    1376:	74 e0       	ldi	r23, 0x04	; 4
    1378:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    137c:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN2 )) )
    137e:	ae 9b       	sbis	0x15, 6	; 21
    1380:	04 c0       	rjmp	.+8      	; 0x138a <http_api+0x6e>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\"" ), dlen );
    1382:	c6 01       	movw	r24, r12
    1384:	62 e7       	ldi	r22, 0x72	; 114
    1386:	74 e0       	ldi	r23, 0x04	; 4
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <http_api+0x74>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\"" ), dlen );
    138a:	c6 01       	movw	r24, r12
    138c:	6f e6       	ldi	r22, 0x6F	; 111
    138e:	74 e0       	ldi	r23, 0x04	; 4
    1390:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1394:	ac 01       	movw	r20, r24
	

	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"l3\":\"" ), dlen );
    1396:	c6 01       	movw	r24, r12
    1398:	67 e6       	ldi	r22, 0x67	; 103
    139a:	74 e0       	ldi	r23, 0x04	; 4
    139c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    13a0:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN3 )) )
    13a2:	ad 9b       	sbis	0x15, 5	; 21
    13a4:	04 c0       	rjmp	.+8      	; 0x13ae <http_api+0x92>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\"" ), dlen );
    13a6:	c6 01       	movw	r24, r12
    13a8:	64 e6       	ldi	r22, 0x64	; 100
    13aa:	74 e0       	ldi	r23, 0x04	; 4
    13ac:	03 c0       	rjmp	.+6      	; 0x13b4 <http_api+0x98>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\"" ), dlen );
    13ae:	c6 01       	movw	r24, r12
    13b0:	61 e6       	ldi	r22, 0x61	; 97
    13b2:	74 e0       	ldi	r23, 0x04	; 4
    13b4:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    13b8:	ac 01       	movw	r20, r24
	
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"l4\":\"" ), dlen );
    13ba:	c6 01       	movw	r24, r12
    13bc:	69 e5       	ldi	r22, 0x59	; 89
    13be:	74 e0       	ldi	r23, 0x04	; 4
    13c0:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    13c4:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN4 )) )
    13c6:	ac 9b       	sbis	0x15, 4	; 21
    13c8:	04 c0       	rjmp	.+8      	; 0x13d2 <http_api+0xb6>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\"" ), dlen );
    13ca:	c6 01       	movw	r24, r12
    13cc:	66 e5       	ldi	r22, 0x56	; 86
    13ce:	74 e0       	ldi	r23, 0x04	; 4
    13d0:	03 c0       	rjmp	.+6      	; 0x13d8 <http_api+0xbc>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\"" ), dlen );
    13d2:	c6 01       	movw	r24, r12
    13d4:	63 e5       	ldi	r22, 0x53	; 83
    13d6:	74 e0       	ldi	r23, 0x04	; 4
    13d8:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    13dc:	ac 01       	movw	r20, r24
	
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"l5\":\"" ), dlen );
    13de:	c6 01       	movw	r24, r12
    13e0:	6b e4       	ldi	r22, 0x4B	; 75
    13e2:	74 e0       	ldi	r23, 0x04	; 4
    13e4:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    13e8:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN5 )) )
    13ea:	ab 9b       	sbis	0x15, 3	; 21
    13ec:	04 c0       	rjmp	.+8      	; 0x13f6 <http_api+0xda>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\"" ), dlen );
    13ee:	c6 01       	movw	r24, r12
    13f0:	68 e4       	ldi	r22, 0x48	; 72
    13f2:	74 e0       	ldi	r23, 0x04	; 4
    13f4:	03 c0       	rjmp	.+6      	; 0x13fc <http_api+0xe0>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\"" ), dlen );
    13f6:	c6 01       	movw	r24, r12
    13f8:	65 e4       	ldi	r22, 0x45	; 69
    13fa:	74 e0       	ldi	r23, 0x04	; 4
    13fc:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1400:	ac 01       	movw	r20, r24


	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"l6\":\"" ), dlen );
    1402:	c6 01       	movw	r24, r12
    1404:	6d e3       	ldi	r22, 0x3D	; 61
    1406:	74 e0       	ldi	r23, 0x04	; 4
    1408:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    140c:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN6 )) )
    140e:	aa 9b       	sbis	0x15, 2	; 21
    1410:	04 c0       	rjmp	.+8      	; 0x141a <http_api+0xfe>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\"" ), dlen );
    1412:	c6 01       	movw	r24, r12
    1414:	6a e3       	ldi	r22, 0x3A	; 58
    1416:	74 e0       	ldi	r23, 0x04	; 4
    1418:	03 c0       	rjmp	.+6      	; 0x1420 <http_api+0x104>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\"" ), dlen );
    141a:	c6 01       	movw	r24, r12
    141c:	67 e3       	ldi	r22, 0x37	; 55
    141e:	74 e0       	ldi	r23, 0x04	; 4
    1420:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1424:	ac 01       	movw	r20, r24

	
	// read adc0
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"ACD0\":\"" ), dlen );
    1426:	c6 01       	movw	r24, r12
    1428:	6d e2       	ldi	r22, 0x2D	; 45
    142a:	74 e0       	ldi	r23, 0x04	; 4
    142c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1430:	7c 01       	movw	r14, r24
	adc0_value = adc_read ( 0 );
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <adc_read>
    1438:	ac 01       	movw	r20, r24
	print_decimal ( generic_buf, 4, adc0_value );
    143a:	8e 01       	movw	r16, r28
    143c:	0f 5f       	subi	r16, 0xFF	; 255
    143e:	1f 4f       	sbci	r17, 0xFF	; 255
    1440:	c8 01       	movw	r24, r16
    1442:	64 e0       	ldi	r22, 0x04	; 4
    1444:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <print_decimal>
	generic_buf[ 4 ] = '\0';
    1448:	1d 82       	std	Y+5, r1	; 0x05
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    144a:	c6 01       	movw	r24, r12
    144c:	b8 01       	movw	r22, r16
    144e:	a7 01       	movw	r20, r14
    1450:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <tcp_puts_data>
    1454:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "\"" ), dlen );
    1456:	c6 01       	movw	r24, r12
    1458:	6b e2       	ldi	r22, 0x2B	; 43
    145a:	74 e0       	ldi	r23, 0x04	; 4
    145c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1460:	ac 01       	movw	r20, r24

	// read temp
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"temp\":\"" ), dlen );
    1462:	c6 01       	movw	r24, r12
    1464:	61 e2       	ldi	r22, 0x21	; 33
    1466:	74 e0       	ldi	r23, 0x04	; 4
    1468:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    146c:	7c 01       	movw	r14, r24
	temp_value = adc_read_temp();
    146e:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <adc_read_temp>
    1472:	48 2f       	mov	r20, r24
	print_decimal ( generic_buf, 2, temp_value );
    1474:	c8 01       	movw	r24, r16
    1476:	62 e0       	ldi	r22, 0x02	; 2
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <print_decimal>
	generic_buf[ 2 ] = '\0';
    147e:	1b 82       	std	Y+3, r1	; 0x03
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    1480:	c6 01       	movw	r24, r12
    1482:	b8 01       	movw	r22, r16
    1484:	a7 01       	movw	r20, r14
    1486:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <tcp_puts_data>
    148a:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "\"" ), dlen );
    148c:	c6 01       	movw	r24, r12
    148e:	6f e1       	ldi	r22, 0x1F	; 31
    1490:	74 e0       	ldi	r23, 0x04	; 4
    1492:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    1496:	ac 01       	movw	r20, r24
	
	// AVR IP address
	
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"aip\":\"" ), dlen );
    1498:	c6 01       	movw	r24, r12
    149a:	66 e1       	ldi	r22, 0x16	; 22
    149c:	74 e0       	ldi	r23, 0x04	; 4
    149e:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    14a2:	7c 01       	movw	r14, r24
	print_ip ( generic_buf, (BYTE*)&avr_ip, 0 );
    14a4:	c8 01       	movw	r24, r16
    14a6:	60 e3       	ldi	r22, 0x30	; 48
    14a8:	71 e0       	ldi	r23, 0x01	; 1
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <print_ip>
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    14b0:	c6 01       	movw	r24, r12
    14b2:	b8 01       	movw	r22, r16
    14b4:	a7 01       	movw	r20, r14
    14b6:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <tcp_puts_data>
    14ba:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "\"" ), dlen );
    14bc:	c6 01       	movw	r24, r12
    14be:	64 e1       	ldi	r22, 0x14	; 20
    14c0:	74 e0       	ldi	r23, 0x04	; 4
    14c2:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    14c6:	ac 01       	movw	r20, r24
	
	// Server IP address
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( ",\"sip\":\"" ), dlen );
    14c8:	c6 01       	movw	r24, r12
    14ca:	6b e0       	ldi	r22, 0x0B	; 11
    14cc:	74 e0       	ldi	r23, 0x04	; 4
    14ce:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
    14d2:	7c 01       	movw	r14, r24
	print_ip ( generic_buf, (BYTE*)&server_ip, 0 );
    14d4:	c8 01       	movw	r24, r16
    14d6:	6c e2       	ldi	r22, 0x2C	; 44
    14d8:	71 e0       	ldi	r23, 0x01	; 1
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <print_ip>
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    14e0:	c6 01       	movw	r24, r12
    14e2:	b8 01       	movw	r22, r16
    14e4:	a7 01       	movw	r20, r14
    14e6:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <tcp_puts_data>
    14ea:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "\"}" ), dlen );
    14ec:	c6 01       	movw	r24, r12
    14ee:	68 e0       	ldi	r22, 0x08	; 8
    14f0:	74 e0       	ldi	r23, 0x04	; 4
    14f2:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <tcp_puts_data_p>
	
	

	return(dlen);
}
    14f6:	c0 5c       	subi	r28, 0xC0	; 192
    14f8:	df 4f       	sbci	r29, 0xFF	; 255
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	df 90       	pop	r13
    1512:	cf 90       	pop	r12
    1514:	08 95       	ret

00001516 <http_get_variable>:
//		when you call http_get_variable with val_key="pwd", then function stored "123456"
//		to dest buffer.
//
//********************************************************************************************
BYTE http_get_variable ( BYTE *rxtx_buffer, WORD dlength, PGM_P val_key, BYTE *dest )
{
    1516:	cf 92       	push	r12
    1518:	df 92       	push	r13
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	ec 01       	movw	r28, r24
    1528:	8b 01       	movw	r16, r22
    152a:	6a 01       	movw	r12, r20
    152c:	79 01       	movw	r14, r18
	BYTE match=0, temp;

	key = val_key;
	
	// get data position
	data_p = tcp_get_hlength( rxtx_buffer ) + sizeof(ETH_HEADER) + sizeof(IP_HEADER);
    152e:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <tcp_get_hlength>
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	2e 5d       	subi	r18, 0xDE	; 222
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	fe 01       	movw	r30, r28
    153c:	e2 0f       	add	r30, r18
    153e:	f3 1f       	adc	r31, r19
    1540:	05 c0       	rjmp	.+10     	; 0x154c <http_get_variable+0x36>

	// Find '?' in rx buffer, if found '?' in rx buffer then let's find variable key (val_key)
	for ( ; data_p<dlength; data_p++ )
	{
		if ( rxtx_buffer [ data_p ] == '?' )
    1542:	81 91       	ld	r24, Z+
    1544:	8f 33       	cpi	r24, 0x3F	; 63
    1546:	29 f0       	breq	.+10     	; 0x1552 <http_get_variable+0x3c>
	
	// get data position
	data_p = tcp_get_hlength( rxtx_buffer ) + sizeof(ETH_HEADER) + sizeof(IP_HEADER);

	// Find '?' in rx buffer, if found '?' in rx buffer then let's find variable key (val_key)
	for ( ; data_p<dlength; data_p++ )
    1548:	2f 5f       	subi	r18, 0xFF	; 255
    154a:	3f 4f       	sbci	r19, 0xFF	; 255
    154c:	20 17       	cp	r18, r16
    154e:	31 07       	cpc	r19, r17
    1550:	c0 f3       	brcs	.-16     	; 0x1542 <http_get_variable+0x2c>
	{
		if ( rxtx_buffer [ data_p ] == '?' )
			break;
	}
	// not found '?' in buffer
	if ( data_p == dlength )
    1552:	20 17       	cp	r18, r16
    1554:	31 07       	cpc	r19, r17
    1556:	a9 f1       	breq	.+106    	; 0x15c2 <http_get_variable+0xac>
    1558:	de 01       	movw	r26, r28
    155a:	a2 0f       	add	r26, r18
    155c:	b3 1f       	adc	r27, r19
    155e:	f6 01       	movw	r30, r12
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	15 c0       	rjmp	.+42     	; 0x158e <http_get_variable+0x78>
		return 0;
	
	// find variable key in buffer 
	for ( ; data_p<dlength; data_p++ )
	{
		temp = pgm_read_byte ( key );
    1564:	44 91       	lpm	r20, Z+

		// end of variable keyword
		if ( rxtx_buffer [ data_p ] == '=' && match != 0 )
    1566:	9c 91       	ld	r25, X
    1568:	9d 33       	cpi	r25, 0x3D	; 61
    156a:	39 f4       	brne	.+14     	; 0x157a <http_get_variable+0x64>
    156c:	88 23       	and	r24, r24
    156e:	29 f0       	breq	.+10     	; 0x157a <http_get_variable+0x64>
		{
			if ( temp == '\0' )
    1570:	44 23       	and	r20, r20
    1572:	19 f4       	brne	.+6      	; 0x157a <http_get_variable+0x64>
			{
				data_p++;
    1574:	2f 5f       	subi	r18, 0xFF	; 255
    1576:	3f 4f       	sbci	r19, 0xFF	; 255
    1578:	0f c0       	rjmp	.+30     	; 0x1598 <http_get_variable+0x82>
				break;
			}
		}
		// variable keyword match with rx buffer
		if ( rxtx_buffer [ data_p ] == temp )
    157a:	94 17       	cp	r25, r20
    157c:	19 f0       	breq	.+6      	; 0x1584 <http_get_variable+0x6e>
    157e:	f6 01       	movw	r30, r12
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <http_get_variable+0x72>
		{
			key++;
    1584:	31 96       	adiw	r30, 0x01	; 1
			match++;
    1586:	8f 5f       	subi	r24, 0xFF	; 255
	// not found '?' in buffer
	if ( data_p == dlength )
		return 0;
	
	// find variable key in buffer 
	for ( ; data_p<dlength; data_p++ )
    1588:	2f 5f       	subi	r18, 0xFF	; 255
    158a:	3f 4f       	sbci	r19, 0xFF	; 255
    158c:	11 96       	adiw	r26, 0x01	; 1
    158e:	20 17       	cp	r18, r16
    1590:	31 07       	cpc	r19, r17
    1592:	40 f3       	brcs	.-48     	; 0x1564 <http_get_variable+0x4e>
			match = 0;
		}
	}
	
	// if found variable keyword, then store variable value in destination buffer ( dest )
	if ( match != 0 )
    1594:	88 23       	and	r24, r24
    1596:	b1 f0       	breq	.+44     	; 0x15c4 <http_get_variable+0xae>
    1598:	de 01       	movw	r26, r28
    159a:	a2 0f       	add	r26, r18
    159c:	b3 1f       	adc	r27, r19
    159e:	80 e0       	ldi	r24, 0x00	; 0
		match = 0;

		for ( ;; )
		{
			// end of variable value break from loop
			if ( rxtx_buffer [ data_p ] == '&' || rxtx_buffer [ data_p ] == ' ' )
    15a0:	9c 91       	ld	r25, X
    15a2:	96 32       	cpi	r25, 0x26	; 38
    15a4:	19 f0       	breq	.+6      	; 0x15ac <http_get_variable+0x96>
    15a6:	11 96       	adiw	r26, 0x01	; 1
    15a8:	90 32       	cpi	r25, 0x20	; 32
    15aa:	29 f4       	brne	.+10     	; 0x15b6 <http_get_variable+0xa0>
			{
				dest [ match ] = '\0';
    15ac:	e8 0e       	add	r14, r24
    15ae:	f1 1c       	adc	r15, r1
    15b0:	f7 01       	movw	r30, r14
    15b2:	10 82       	st	Z, r1
    15b4:	07 c0       	rjmp	.+14     	; 0x15c4 <http_get_variable+0xae>
				break;
			}
			dest [ match ] = rxtx_buffer [ data_p ];
    15b6:	f7 01       	movw	r30, r14
    15b8:	e8 0f       	add	r30, r24
    15ba:	f1 1d       	adc	r31, r1
    15bc:	90 83       	st	Z, r25
			match++;
    15be:	8f 5f       	subi	r24, 0xFF	; 255
    15c0:	ef cf       	rjmp	.-34     	; 0x15a0 <http_get_variable+0x8a>
			data_p++;
		}
    15c2:	80 e0       	ldi	r24, 0x00	; 0
	}

	// return with variable value length
	return match;
}
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	1f 91       	pop	r17
    15ca:	0f 91       	pop	r16
    15cc:	ff 90       	pop	r15
    15ce:	ef 90       	pop	r14
    15d0:	df 90       	pop	r13
    15d2:	cf 90       	pop	r12
    15d4:	08 95       	ret

000015d6 <http_webserver_process>:
// Function : http_webserver_process
// Description : Initial connection to web server
//
//********************************************************************************************
void http_webserver_process ( BYTE *rxtx_buffer, BYTE *dest_mac, BYTE *dest_ip )
{
    15d6:	2f 92       	push	r2
    15d8:	3f 92       	push	r3
    15da:	4f 92       	push	r4
    15dc:	5f 92       	push	r5
    15de:	6f 92       	push	r6
    15e0:	7f 92       	push	r7
    15e2:	8f 92       	push	r8
    15e4:	9f 92       	push	r9
    15e6:	af 92       	push	r10
    15e8:	bf 92       	push	r11
    15ea:	cf 92       	push	r12
    15ec:	df 92       	push	r13
    15ee:	ef 92       	push	r14
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	c7 54       	subi	r28, 0x47	; 71
    15fe:	d0 40       	sbci	r29, 0x00	; 0
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	3c 01       	movw	r6, r24
    160c:	26 96       	adiw	r28, 0x06	; 6
    160e:	7f af       	std	Y+63, r23	; 0x3f
    1610:	6e af       	std	Y+62, r22	; 0x3e
    1612:	26 97       	sbiw	r28, 0x06	; 6
    1614:	28 96       	adiw	r28, 0x08	; 8
    1616:	5f af       	std	Y+63, r21	; 0x3f
    1618:	4e af       	std	Y+62, r20	; 0x3e
    161a:	28 97       	sbiw	r28, 0x08	; 8
	WORD dlength, dest_port;
	BYTE count_time_temp[3];
	BYTE generic_buf[64];
	
	dest_port = (rxtx_buffer[TCP_SRC_PORT_H_P]<<8)|rxtx_buffer[TCP_SRC_PORT_L_P];
    161c:	fc 01       	movw	r30, r24
    161e:	22 a1       	ldd	r18, Z+34	; 0x22
    1620:	63 a1       	ldd	r22, Z+35	; 0x23
	// tcp port 80 start for web server
	if ( rxtx_buffer [ IP_PROTO_P ] == IP_PROTO_TCP_V && rxtx_buffer[ TCP_DST_PORT_H_P ] == 0 && rxtx_buffer[ TCP_DST_PORT_L_P ] == 80 )
    1622:	87 89       	ldd	r24, Z+23	; 0x17
    1624:	86 30       	cpi	r24, 0x06	; 6
    1626:	09 f0       	breq	.+2      	; 0x162a <http_webserver_process+0x54>
    1628:	e6 c1       	rjmp	.+972    	; 0x19f6 <http_webserver_process+0x420>
    162a:	84 a1       	ldd	r24, Z+36	; 0x24
    162c:	88 23       	and	r24, r24
    162e:	09 f0       	breq	.+2      	; 0x1632 <http_webserver_process+0x5c>
    1630:	e2 c1       	rjmp	.+964    	; 0x19f6 <http_webserver_process+0x420>
    1632:	85 a1       	ldd	r24, Z+37	; 0x25
    1634:	80 35       	cpi	r24, 0x50	; 80
    1636:	09 f0       	breq	.+2      	; 0x163a <http_webserver_process+0x64>
    1638:	de c1       	rjmp	.+956    	; 0x19f6 <http_webserver_process+0x420>
{
	WORD dlength, dest_port;
	BYTE count_time_temp[3];
	BYTE generic_buf[64];
	
	dest_port = (rxtx_buffer[TCP_SRC_PORT_H_P]<<8)|rxtx_buffer[TCP_SRC_PORT_L_P];
    163a:	92 2f       	mov	r25, r18
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	26 2e       	mov	r2, r22
    1640:	33 24       	eor	r3, r3
    1642:	28 2a       	or	r2, r24
    1644:	39 2a       	or	r3, r25
	// tcp port 80 start for web server
	if ( rxtx_buffer [ IP_PROTO_P ] == IP_PROTO_TCP_V && rxtx_buffer[ TCP_DST_PORT_H_P ] == 0 && rxtx_buffer[ TCP_DST_PORT_L_P ] == 80 )
	{
		// received packet with flags "SYN", let's send "SYNACK"
		if ( (rxtx_buffer[ TCP_FLAGS_P ] & TCP_FLAG_SYN_V) )
    1646:	87 a5       	ldd	r24, Z+47	; 0x2f
    1648:	81 ff       	sbrs	r24, 1
    164a:	1b c0       	rjmp	.+54     	; 0x1682 <http_webserver_process+0xac>
		{
//			tcp_send_synack ( rxtx_buffer, dest_mac, dest_ip );
			tcp_send_packet (
    164c:	00 d0       	rcall	.+0      	; 0x164e <http_webserver_process+0x78>
    164e:	ed b7       	in	r30, 0x3d	; 61
    1650:	fe b7       	in	r31, 0x3e	; 62
    1652:	52 83       	std	Z+2, r21	; 0x02
    1654:	41 83       	std	Z+1, r20	; 0x01
    1656:	c3 01       	movw	r24, r6
    1658:	b1 01       	movw	r22, r2
    165a:	40 e5       	ldi	r20, 0x50	; 80
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	22 e1       	ldi	r18, 0x12	; 18
    1660:	01 e0       	ldi	r16, 0x01	; 1
    1662:	ee 24       	eor	r14, r14
    1664:	f1 e0       	ldi	r31, 0x01	; 1
    1666:	cf 2e       	mov	r12, r31
    1668:	d1 2c       	mov	r13, r1
    166a:	aa 24       	eor	r10, r10
    166c:	bb 24       	eor	r11, r11
    166e:	26 96       	adiw	r28, 0x06	; 6
    1670:	8e ac       	ldd	r8, Y+62	; 0x3e
    1672:	9f ac       	ldd	r9, Y+63	; 0x3f
    1674:	26 97       	sbiw	r28, 0x06	; 6
    1676:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <tcp_send_packet>
				0,						// (bool)clear sequence ack number
				1,						// (bool)calculate new seq and seqack number
				0,						// tcp data length
				dest_mac,		// server mac address
				dest_ip );		// server ip address
			flag1.bits.syn_is_received = 1;
    167a:	80 91 25 01 	lds	r24, 0x0125
    167e:	80 64       	ori	r24, 0x40	; 64
    1680:	b6 c1       	rjmp	.+876    	; 0x19ee <http_webserver_process+0x418>
			return;
		}

		if ( (rxtx_buffer [ TCP_FLAGS_P ] & TCP_FLAG_ACK_V) )
    1682:	84 ff       	sbrs	r24, 4
    1684:	b8 c1       	rjmp	.+880    	; 0x19f6 <http_webserver_process+0x420>
		{
			// get tcp data length
			dlength = tcp_get_dlength( rxtx_buffer );
    1686:	c3 01       	movw	r24, r6
    1688:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <tcp_get_dlength>
    168c:	2c 01       	movw	r4, r24
			if ( dlength == 0 )
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	01 f5       	brne	.+64     	; 0x16d2 <http_webserver_process+0xfc>
			{
				// finack, answer with ack
				if ( (rxtx_buffer[TCP_FLAGS_P] & TCP_FLAG_FIN_V) )
    1692:	f3 01       	movw	r30, r6
    1694:	87 a5       	ldd	r24, Z+47	; 0x2f
    1696:	80 ff       	sbrs	r24, 0
    1698:	ae c1       	rjmp	.+860    	; 0x19f6 <http_webserver_process+0x420>
				{
//					tcp_send_ack ( rxtx_buffer, dest_mac, dest_ip );
					tcp_send_packet (
    169a:	00 d0       	rcall	.+0      	; 0x169c <http_webserver_process+0xc6>
    169c:	28 96       	adiw	r28, 0x08	; 8
    169e:	8e ad       	ldd	r24, Y+62	; 0x3e
    16a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    16a2:	28 97       	sbiw	r28, 0x08	; 8
    16a4:	ed b7       	in	r30, 0x3d	; 61
    16a6:	fe b7       	in	r31, 0x3e	; 62
    16a8:	92 83       	std	Z+2, r25	; 0x02
    16aa:	81 83       	std	Z+1, r24	; 0x01
    16ac:	c3 01       	movw	r24, r6
    16ae:	b1 01       	movw	r22, r2
    16b0:	40 e5       	ldi	r20, 0x50	; 80
    16b2:	50 e0       	ldi	r21, 0x00	; 0
    16b4:	20 e1       	ldi	r18, 0x10	; 16
    16b6:	00 e0       	ldi	r16, 0x00	; 0
    16b8:	ee 24       	eor	r14, r14
    16ba:	e1 e0       	ldi	r30, 0x01	; 1
    16bc:	ce 2e       	mov	r12, r30
    16be:	d1 2c       	mov	r13, r1
    16c0:	aa 24       	eor	r10, r10
    16c2:	bb 24       	eor	r11, r11
    16c4:	26 96       	adiw	r28, 0x06	; 6
    16c6:	8e ac       	ldd	r8, Y+62	; 0x3e
    16c8:	9f ac       	ldd	r9, Y+63	; 0x3f
    16ca:	26 97       	sbiw	r28, 0x06	; 6
    16cc:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <tcp_send_packet>
    16d0:	90 c1       	rjmp	.+800    	; 0x19f2 <http_webserver_process+0x41c>
						dest_ip );		// server ip address
				}
				return;
			}
			// get avr ip address from request and set to new avr ip address
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "aip" ), generic_buf ) )
    16d2:	8e 01       	movw	r16, r28
    16d4:	0c 5f       	subi	r16, 0xFC	; 252
    16d6:	1f 4f       	sbci	r17, 0xFF	; 255
    16d8:	c3 01       	movw	r24, r6
    16da:	b2 01       	movw	r22, r4
    16dc:	4b ec       	ldi	r20, 0xCB	; 203
    16de:	55 e0       	ldi	r21, 0x05	; 5
    16e0:	98 01       	movw	r18, r16
    16e2:	0e 94 8b 0a 	call	0x1516	; 0x1516 <http_get_variable>
    16e6:	88 23       	and	r24, r24
    16e8:	b9 f0       	breq	.+46     	; 0x1718 <http_webserver_process+0x142>
			{
				if ( http_get_ip ( generic_buf, (BYTE*)&avr_ip ) == 4 )
    16ea:	c8 01       	movw	r24, r16
    16ec:	60 e3       	ldi	r22, 0x30	; 48
    16ee:	71 e0       	ldi	r23, 0x01	; 1
    16f0:	0e 94 57 07 	call	0xeae	; 0xeae <http_get_ip>
    16f4:	84 30       	cpi	r24, 0x04	; 4
    16f6:	41 f4       	brne	.+16     	; 0x1708 <http_webserver_process+0x132>
					eeprom_write_block ( &avr_ip, ee_avr_ip, 4 );
    16f8:	80 e3       	ldi	r24, 0x30	; 48
    16fa:	91 e0       	ldi	r25, 0x01	; 1
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	44 e0       	ldi	r20, 0x04	; 4
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <__eewr_block_m32>
				eeprom_read_block ( &avr_ip, ee_avr_ip, 4 );
    1708:	80 e3       	ldi	r24, 0x30	; 48
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	44 e0       	ldi	r20, 0x04	; 4
    1712:	50 e0       	ldi	r21, 0x00	; 0
    1714:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__eerd_block_m32>
			}
			// get server ip address from request and set to new server ip address
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "sip" ), generic_buf ) )
    1718:	8e 01       	movw	r16, r28
    171a:	0c 5f       	subi	r16, 0xFC	; 252
    171c:	1f 4f       	sbci	r17, 0xFF	; 255
    171e:	c3 01       	movw	r24, r6
    1720:	b2 01       	movw	r22, r4
    1722:	47 ec       	ldi	r20, 0xC7	; 199
    1724:	55 e0       	ldi	r21, 0x05	; 5
    1726:	98 01       	movw	r18, r16
    1728:	0e 94 8b 0a 	call	0x1516	; 0x1516 <http_get_variable>
    172c:	88 23       	and	r24, r24
    172e:	b9 f0       	breq	.+46     	; 0x175e <http_webserver_process+0x188>
			{
				if ( http_get_ip ( generic_buf, (BYTE*)&server_ip ) == 4 )
    1730:	c8 01       	movw	r24, r16
    1732:	6c e2       	ldi	r22, 0x2C	; 44
    1734:	71 e0       	ldi	r23, 0x01	; 1
    1736:	0e 94 57 07 	call	0xeae	; 0xeae <http_get_ip>
    173a:	84 30       	cpi	r24, 0x04	; 4
    173c:	41 f4       	brne	.+16     	; 0x174e <http_webserver_process+0x178>
					eeprom_write_block ( &server_ip, ee_server_ip, 4 );
    173e:	8c e2       	ldi	r24, 0x2C	; 44
    1740:	91 e0       	ldi	r25, 0x01	; 1
    1742:	64 e0       	ldi	r22, 0x04	; 4
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	44 e0       	ldi	r20, 0x04	; 4
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <__eewr_block_m32>
				eeprom_read_block ( &server_ip, ee_server_ip, 4 );
    174e:	8c e2       	ldi	r24, 0x2C	; 44
    1750:	91 e0       	ldi	r25, 0x01	; 1
    1752:	64 e0       	ldi	r22, 0x04	; 4
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	44 e0       	ldi	r20, 0x04	; 4
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__eerd_block_m32>
			}
			// get LED1 on/of command
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "l1" ), generic_buf ) )
    175e:	c3 01       	movw	r24, r6
    1760:	b2 01       	movw	r22, r4
    1762:	44 ec       	ldi	r20, 0xC4	; 196
    1764:	55 e0       	ldi	r21, 0x05	; 5
    1766:	9e 01       	movw	r18, r28
    1768:	2c 5f       	subi	r18, 0xFC	; 252
    176a:	3f 4f       	sbci	r19, 0xFF	; 255
    176c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <http_get_variable>
    1770:	88 23       	and	r24, r24
    1772:	31 f0       	breq	.+12     	; 0x1780 <http_webserver_process+0x1aa>
			{
				if ( generic_buf[0] == '0' )
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	80 33       	cpi	r24, 0x30	; 48
    1778:	11 f4       	brne	.+4      	; 0x177e <http_webserver_process+0x1a8>
					LED_PORT &= ~_BV ( LED_PIN1 );
    177a:	af 98       	cbi	0x15, 7	; 21
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <http_webserver_process+0x1aa>
				else
					LED_PORT |= _BV ( LED_PIN1 );
    177e:	af 9a       	sbi	0x15, 7	; 21
					
			}
			// get LED2 on/of command
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "l2" ), generic_buf ) )
    1780:	c3 01       	movw	r24, r6
    1782:	b2 01       	movw	r22, r4
    1784:	41 ec       	ldi	r20, 0xC1	; 193
    1786:	55 e0       	ldi	r21, 0x05	; 5
    1788:	9e 01       	movw	r18, r28
    178a:	2c 5f       	subi	r18, 0xFC	; 252
    178c:	3f 4f       	sbci	r19, 0xFF	; 255
    178e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <http_get_variable>
    1792:	88 23       	and	r24, r24
    1794:	31 f0       	breq	.+12     	; 0x17a2 <http_webserver_process+0x1cc>
			{
				if ( generic_buf[0] == '0' )
    1796:	8c 81       	ldd	r24, Y+4	; 0x04
    1798:	80 33       	cpi	r24, 0x30	; 48
    179a:	11 f4       	brne	.+4      	; 0x17a0 <http_webserver_process+0x1ca>
					LED_PORT &= ~_BV ( LED_PIN2 );
    179c:	ae 98       	cbi	0x15, 6	; 21
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <http_webserver_process+0x1cc>
				else
					LED_PORT |= _BV ( LED_PIN2 );
    17a0:	ae 9a       	sbi	0x15, 6	; 21
			}

			// get LED3 on/of command
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "l3" ), generic_buf ) )
    17a2:	c3 01       	movw	r24, r6
    17a4:	b2 01       	movw	r22, r4
    17a6:	4e eb       	ldi	r20, 0xBE	; 190
    17a8:	55 e0       	ldi	r21, 0x05	; 5
    17aa:	9e 01       	movw	r18, r28
    17ac:	2c 5f       	subi	r18, 0xFC	; 252
    17ae:	3f 4f       	sbci	r19, 0xFF	; 255
    17b0:	0e 94 8b 0a 	call	0x1516	; 0x1516 <http_get_variable>
    17b4:	88 23       	and	r24, r24
    17b6:	31 f0       	breq	.+12     	; 0x17c4 <http_webserver_process+0x1ee>
			{
				if ( generic_buf[0] == '0' )
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	80 33       	cpi	r24, 0x30	; 48
    17bc:	11 f4       	brne	.+4      	; 0x17c2 <http_webserver_process+0x1ec>
					LED_PORT &= ~_BV ( LED_PIN3 );
    17be:	ad 98       	cbi	0x15, 5	; 21
    17c0:	01 c0       	rjmp	.+2      	; 0x17c4 <http_webserver_process+0x1ee>
				else
					LED_PORT |= _BV ( LED_PIN3 );
    17c2:	ad 9a       	sbi	0x15, 5	; 21
					
			}


			// get LED4 on/of command
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "l4" ), generic_buf ) )
    17c4:	c3 01       	movw	r24, r6
    17c6:	b2 01       	movw	r22, r4
    17c8:	4b eb       	ldi	r20, 0xBB	; 187
    17ca:	55 e0       	ldi	r21, 0x05	; 5
    17cc:	9e 01       	movw	r18, r28
    17ce:	2c 5f       	subi	r18, 0xFC	; 252
    17d0:	3f 4f       	sbci	r19, 0xFF	; 255
    17d2:	0e 94 8b 0a 	call	0x1516	; 0x1516 <http_get_variable>
    17d6:	88 23       	and	r24, r24
    17d8:	31 f0       	breq	.+12     	; 0x17e6 <http_webserver_process+0x210>
			{
				if ( generic_buf[0] == '0' )
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	80 33       	cpi	r24, 0x30	; 48
    17de:	11 f4       	brne	.+4      	; 0x17e4 <http_webserver_process+0x20e>
					LED_PORT &= ~_BV ( LED_PIN4 );
    17e0:	ac 98       	cbi	0x15, 4	; 21
    17e2:	01 c0       	rjmp	.+2      	; 0x17e6 <http_webserver_process+0x210>
				else
					LED_PORT |= _BV ( LED_PIN4 );
    17e4:	ac 9a       	sbi	0x15, 4	; 21
			}

			// get LED5 on/of command
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "l5" ), generic_buf ) )
    17e6:	c3 01       	movw	r24, r6
    17e8:	b2 01       	movw	r22, r4
    17ea:	48 eb       	ldi	r20, 0xB8	; 184
    17ec:	55 e0       	ldi	r21, 0x05	; 5
    17ee:	9e 01       	movw	r18, r28
    17f0:	2c 5f       	subi	r18, 0xFC	; 252
    17f2:	3f 4f       	sbci	r19, 0xFF	; 255
    17f4:	0e 94 8b 0a 	call	0x1516	; 0x1516 <http_get_variable>
    17f8:	88 23       	and	r24, r24
    17fa:	31 f0       	breq	.+12     	; 0x1808 <http_webserver_process+0x232>
			{
				if ( generic_buf[0] == '0' )
    17fc:	8c 81       	ldd	r24, Y+4	; 0x04
    17fe:	80 33       	cpi	r24, 0x30	; 48
    1800:	11 f4       	brne	.+4      	; 0x1806 <http_webserver_process+0x230>
					LED_PORT &= ~_BV ( LED_PIN5 );
    1802:	ab 98       	cbi	0x15, 3	; 21
    1804:	01 c0       	rjmp	.+2      	; 0x1808 <http_webserver_process+0x232>
				else
					LED_PORT |= _BV ( LED_PIN5 );
    1806:	ab 9a       	sbi	0x15, 3	; 21
					
			}

			// get LED6 on/of command
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "l6" ), generic_buf ) )
    1808:	c3 01       	movw	r24, r6
    180a:	b2 01       	movw	r22, r4
    180c:	45 eb       	ldi	r20, 0xB5	; 181
    180e:	55 e0       	ldi	r21, 0x05	; 5
    1810:	9e 01       	movw	r18, r28
    1812:	2c 5f       	subi	r18, 0xFC	; 252
    1814:	3f 4f       	sbci	r19, 0xFF	; 255
    1816:	0e 94 8b 0a 	call	0x1516	; 0x1516 <http_get_variable>
    181a:	88 23       	and	r24, r24
    181c:	31 f0       	breq	.+12     	; 0x182a <http_webserver_process+0x254>
			{
				if ( generic_buf[0] == '0' )
    181e:	8c 81       	ldd	r24, Y+4	; 0x04
    1820:	80 33       	cpi	r24, 0x30	; 48
    1822:	11 f4       	brne	.+4      	; 0x1828 <http_webserver_process+0x252>
					LED_PORT &= ~_BV ( LED_PIN6 );
    1824:	aa 98       	cbi	0x15, 2	; 21
    1826:	01 c0       	rjmp	.+2      	; 0x182a <http_webserver_process+0x254>
				else
					LED_PORT |= _BV ( LED_PIN6 );
    1828:	aa 9a       	sbi	0x15, 2	; 21
					
			}
			// get LCD string and show on first line
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "lcd1" ), generic_buf ) )
    182a:	8e 01       	movw	r16, r28
    182c:	0c 5f       	subi	r16, 0xFC	; 252
    182e:	1f 4f       	sbci	r17, 0xFF	; 255
    1830:	c3 01       	movw	r24, r6
    1832:	b2 01       	movw	r22, r4
    1834:	40 eb       	ldi	r20, 0xB0	; 176
    1836:	55 e0       	ldi	r21, 0x05	; 5
    1838:	98 01       	movw	r18, r16
    183a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <http_get_variable>
    183e:	88 23       	and	r24, r24
    1840:	79 f0       	breq	.+30     	; 0x1860 <http_webserver_process+0x28a>
			{
				urldecode ( generic_buf );
    1842:	c8 01       	movw	r24, r16
    1844:	0e 94 8b 07 	call	0xf16	; 0xf16 <urldecode>
				lcd_putc ( '\f' );
    1848:	8c e0       	ldi	r24, 0x0C	; 12
    184a:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <lcd_putc>
				lcd_print ( generic_buf );
    184e:	c8 01       	movw	r24, r16
    1850:	0e 94 14 15 	call	0x2a28	; 0x2a28 <lcd_print>
				flag1.bits.lcd_busy = 1;
    1854:	80 91 25 01 	lds	r24, 0x0125
    1858:	84 60       	ori	r24, 0x04	; 4
    185a:	80 93 25 01 	sts	0x0125, r24
				LCD_BL_PORT |= _BV( LCD_BL_PIN );
    185e:	c3 9a       	sbi	0x18, 3	; 24
			}
			// get LCD string and show on second line
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "lcd2" ), generic_buf ) )
    1860:	8e 01       	movw	r16, r28
    1862:	0c 5f       	subi	r16, 0xFC	; 252
    1864:	1f 4f       	sbci	r17, 0xFF	; 255
    1866:	c3 01       	movw	r24, r6
    1868:	b2 01       	movw	r22, r4
    186a:	4b ea       	ldi	r20, 0xAB	; 171
    186c:	55 e0       	ldi	r21, 0x05	; 5
    186e:	98 01       	movw	r18, r16
    1870:	0e 94 8b 0a 	call	0x1516	; 0x1516 <http_get_variable>
    1874:	88 23       	and	r24, r24
    1876:	79 f0       	breq	.+30     	; 0x1896 <http_webserver_process+0x2c0>
			{
				urldecode ( generic_buf );
    1878:	c8 01       	movw	r24, r16
    187a:	0e 94 8b 07 	call	0xf16	; 0xf16 <urldecode>
				lcd_putc ( '\n' );
    187e:	8a e0       	ldi	r24, 0x0A	; 10
    1880:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <lcd_putc>
				lcd_print ( generic_buf );
    1884:	c8 01       	movw	r24, r16
    1886:	0e 94 14 15 	call	0x2a28	; 0x2a28 <lcd_print>
				flag1.bits.lcd_busy = 1;
    188a:	80 91 25 01 	lds	r24, 0x0125
    188e:	84 60       	ori	r24, 0x04	; 4
    1890:	80 93 25 01 	sts	0x0125, r24
				LCD_BL_PORT |= _BV( LCD_BL_PIN );
    1894:	c3 9a       	sbi	0x18, 3	; 24
			}
			// get send temparature to server configuration
			if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "tc" ), generic_buf ) )
    1896:	8e 01       	movw	r16, r28
    1898:	0c 5f       	subi	r16, 0xFC	; 252
    189a:	1f 4f       	sbci	r17, 0xFF	; 255
    189c:	c3 01       	movw	r24, r6
    189e:	b2 01       	movw	r22, r4
    18a0:	48 ea       	ldi	r20, 0xA8	; 168
    18a2:	55 e0       	ldi	r21, 0x05	; 5
    18a4:	98 01       	movw	r18, r16
    18a6:	0e 94 8b 0a 	call	0x1516	; 0x1516 <http_get_variable>
    18aa:	88 23       	and	r24, r24
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <http_webserver_process+0x2da>
    18ae:	47 c0       	rjmp	.+142    	; 0x193e <http_webserver_process+0x368>
			{
				// enable or disable send temparature
				if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "en" ), generic_buf ) )
    18b0:	c3 01       	movw	r24, r6
    18b2:	b2 01       	movw	r22, r4
    18b4:	45 ea       	ldi	r20, 0xA5	; 165
    18b6:	55 e0       	ldi	r21, 0x05	; 5
    18b8:	98 01       	movw	r18, r16
    18ba:	0e 94 8b 0a 	call	0x1516	; 0x1516 <http_get_variable>
    18be:	88 23       	and	r24, r24
    18c0:	19 f0       	breq	.+6      	; 0x18c8 <http_webserver_process+0x2f2>
					count_time_temp[0] = 1;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <http_webserver_process+0x2f4>
				else
					count_time_temp[0] = 0;
    18c8:	19 82       	std	Y+1, r1	; 0x01
				// get hour
				if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "h" ), generic_buf ) )
    18ca:	c3 01       	movw	r24, r6
    18cc:	b2 01       	movw	r22, r4
    18ce:	43 ea       	ldi	r20, 0xA3	; 163
    18d0:	55 e0       	ldi	r21, 0x05	; 5
    18d2:	9e 01       	movw	r18, r28
    18d4:	2c 5f       	subi	r18, 0xFC	; 252
    18d6:	3f 4f       	sbci	r19, 0xFF	; 255
    18d8:	0e 94 8b 0a 	call	0x1516	; 0x1516 <http_get_variable>
    18dc:	88 23       	and	r24, r24
    18de:	49 f0       	breq	.+18     	; 0x18f2 <http_webserver_process+0x31c>
				{
					count_time_temp[1] = (generic_buf[0] - '0') * 10;
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	2a e0       	ldi	r18, 0x0A	; 10
    18e4:	82 9f       	mul	r24, r18
    18e6:	c0 01       	movw	r24, r0
    18e8:	11 24       	eor	r1, r1
					count_time_temp[1] = count_time_temp[1] + (generic_buf[1] - '0');
    18ea:	2d 81       	ldd	r18, Y+5	; 0x05
    18ec:	28 0f       	add	r18, r24
    18ee:	20 51       	subi	r18, 0x10	; 16
    18f0:	2a 83       	std	Y+2, r18	; 0x02
				}
				// get minute
				if ( http_get_variable ( rxtx_buffer, dlength, PSTR( "m" ), generic_buf ) )
    18f2:	c3 01       	movw	r24, r6
    18f4:	b2 01       	movw	r22, r4
    18f6:	41 ea       	ldi	r20, 0xA1	; 161
    18f8:	55 e0       	ldi	r21, 0x05	; 5
    18fa:	9e 01       	movw	r18, r28
    18fc:	2c 5f       	subi	r18, 0xFC	; 252
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	0e 94 8b 0a 	call	0x1516	; 0x1516 <http_get_variable>
    1904:	88 23       	and	r24, r24
    1906:	49 f0       	breq	.+18     	; 0x191a <http_webserver_process+0x344>
				{
					count_time_temp[2] = (generic_buf[0] - '0') * 10;
    1908:	8c 81       	ldd	r24, Y+4	; 0x04
    190a:	2a e0       	ldi	r18, 0x0A	; 10
    190c:	82 9f       	mul	r24, r18
    190e:	c0 01       	movw	r24, r0
    1910:	11 24       	eor	r1, r1
					count_time_temp[2] = count_time_temp[2] + (generic_buf[1] - '0');
    1912:	2d 81       	ldd	r18, Y+5	; 0x05
    1914:	28 0f       	add	r18, r24
    1916:	20 51       	subi	r18, 0x10	; 16
    1918:	2b 83       	std	Y+3, r18	; 0x03
				}
				// write config to eeprom
				eeprom_write_block ( count_time_temp, ee_count_time, 3 );
    191a:	ce 01       	movw	r24, r28
    191c:	01 96       	adiw	r24, 0x01	; 1
    191e:	68 e0       	ldi	r22, 0x08	; 8
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	43 e0       	ldi	r20, 0x03	; 3
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <__eewr_block_m32>
				eeprom_read_block ( count_time, ee_count_time, 3 );
    192a:	8a e3       	ldi	r24, 0x3A	; 58
    192c:	91 e0       	ldi	r25, 0x01	; 1
    192e:	68 e0       	ldi	r22, 0x08	; 8
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	43 e0       	ldi	r20, 0x03	; 3
    1934:	50 e0       	ldi	r21, 0x00	; 0
    1936:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__eerd_block_m32>
				count_time[3] = 0;
    193a:	10 92 3d 01 	sts	0x013D, r1
			}

			// print webpage
			
			if(http_get_variable ( rxtx_buffer, dlength, PSTR( "api" ), generic_buf ) ){
    193e:	8e 01       	movw	r16, r28
    1940:	0c 5f       	subi	r16, 0xFC	; 252
    1942:	1f 4f       	sbci	r17, 0xFF	; 255
    1944:	c3 01       	movw	r24, r6
    1946:	b2 01       	movw	r22, r4
    1948:	4d e9       	ldi	r20, 0x9D	; 157
    194a:	55 e0       	ldi	r21, 0x05	; 5
    194c:	98 01       	movw	r18, r16
    194e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <http_get_variable>
    1952:	88 23       	and	r24, r24
    1954:	39 f0       	breq	.+14     	; 0x1964 <http_webserver_process+0x38e>
				if(generic_buf[0] == 'o'){
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	8f 36       	cpi	r24, 0x6F	; 111
    195a:	a9 f4       	brne	.+42     	; 0x1986 <http_webserver_process+0x3b0>
					dlength = http_api( rxtx_buffer );
    195c:	c3 01       	movw	r24, r6
    195e:	0e 94 8e 09 	call	0x131c	; 0x131c <http_api>
    1962:	10 c0       	rjmp	.+32     	; 0x1984 <http_webserver_process+0x3ae>
				}
			}else if(http_get_variable ( rxtx_buffer, dlength, PSTR( "status" ), generic_buf) ){
    1964:	c3 01       	movw	r24, r6
    1966:	b2 01       	movw	r22, r4
    1968:	46 e9       	ldi	r20, 0x96	; 150
    196a:	55 e0       	ldi	r21, 0x05	; 5
    196c:	98 01       	movw	r18, r16
    196e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <http_get_variable>
    1972:	88 23       	and	r24, r24
    1974:	21 f0       	breq	.+8      	; 0x197e <http_webserver_process+0x3a8>
				dlength = http_status(rxtx_buffer);
    1976:	c3 01       	movw	r24, r6
    1978:	0e 94 be 07 	call	0xf7c	; 0xf7c <http_status>
    197c:	03 c0       	rjmp	.+6      	; 0x1984 <http_webserver_process+0x3ae>
			}else {
				dlength = http_home( rxtx_buffer );
    197e:	c3 01       	movw	r24, r6
    1980:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <http_home>
    1984:	2c 01       	movw	r4, r24
				
			}
			// send ack before send data
//			tcp_send_ack ( rxtx_buffer, dest_mac, dest_ip );
			tcp_send_packet (
    1986:	00 d0       	rcall	.+0      	; 0x1988 <http_webserver_process+0x3b2>
    1988:	28 96       	adiw	r28, 0x08	; 8
    198a:	8e ad       	ldd	r24, Y+62	; 0x3e
    198c:	9f ad       	ldd	r25, Y+63	; 0x3f
    198e:	28 97       	sbiw	r28, 0x08	; 8
    1990:	ed b7       	in	r30, 0x3d	; 61
    1992:	fe b7       	in	r31, 0x3e	; 62
    1994:	92 83       	std	Z+2, r25	; 0x02
    1996:	81 83       	std	Z+1, r24	; 0x01
    1998:	c3 01       	movw	r24, r6
    199a:	b1 01       	movw	r22, r2
    199c:	40 e5       	ldi	r20, 0x50	; 80
    199e:	50 e0       	ldi	r21, 0x00	; 0
    19a0:	20 e1       	ldi	r18, 0x10	; 16
    19a2:	00 e0       	ldi	r16, 0x00	; 0
    19a4:	ee 24       	eor	r14, r14
    19a6:	31 e0       	ldi	r19, 0x01	; 1
    19a8:	c3 2e       	mov	r12, r19
    19aa:	d1 2c       	mov	r13, r1
    19ac:	aa 24       	eor	r10, r10
    19ae:	bb 24       	eor	r11, r11
    19b0:	26 96       	adiw	r28, 0x06	; 6
    19b2:	8e ac       	ldd	r8, Y+62	; 0x3e
    19b4:	9f ac       	ldd	r9, Y+63	; 0x3f
    19b6:	26 97       	sbiw	r28, 0x06	; 6
    19b8:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <tcp_send_packet>
						0,						// tcp data length
						dest_mac,		// server mac address
						dest_ip );		// server ip address
			// send tcp data
//			tcp_send_data ( rxtx_buffer, dest_mac, dest_ip, dlength );
			tcp_send_packet (
    19bc:	28 96       	adiw	r28, 0x08	; 8
    19be:	8e ad       	ldd	r24, Y+62	; 0x3e
    19c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    19c2:	28 97       	sbiw	r28, 0x08	; 8
    19c4:	ed b7       	in	r30, 0x3d	; 61
    19c6:	fe b7       	in	r31, 0x3e	; 62
    19c8:	92 83       	std	Z+2, r25	; 0x02
    19ca:	81 83       	std	Z+1, r24	; 0x01
    19cc:	c3 01       	movw	r24, r6
    19ce:	b1 01       	movw	r22, r2
    19d0:	40 e5       	ldi	r20, 0x50	; 80
    19d2:	50 e0       	ldi	r21, 0x00	; 0
    19d4:	29 e1       	ldi	r18, 0x19	; 25
    19d6:	cc 24       	eor	r12, r12
    19d8:	dd 24       	eor	r13, r13
    19da:	52 01       	movw	r10, r4
    19dc:	26 96       	adiw	r28, 0x06	; 6
    19de:	8e ac       	ldd	r8, Y+62	; 0x3e
    19e0:	9f ac       	ldd	r9, Y+63	; 0x3f
    19e2:	26 97       	sbiw	r28, 0x06	; 6
    19e4:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <tcp_send_packet>
						0,						// (bool)clear sequence ack number
						0,						// (bool)calculate new seq and seqack number
						dlength,				// tcp data length
						dest_mac,		// server mac address
						dest_ip );		// server ip address
			flag1.bits.syn_is_received = 0;
    19e8:	80 91 25 01 	lds	r24, 0x0125
    19ec:	8f 7b       	andi	r24, 0xBF	; 191
    19ee:	80 93 25 01 	sts	0x0125, r24
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
		}		
	}
}
    19f6:	c9 5b       	subi	r28, 0xB9	; 185
    19f8:	df 4f       	sbci	r29, 0xFF	; 255
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	ef 90       	pop	r14
    1a0e:	df 90       	pop	r13
    1a10:	cf 90       	pop	r12
    1a12:	bf 90       	pop	r11
    1a14:	af 90       	pop	r10
    1a16:	9f 90       	pop	r9
    1a18:	8f 90       	pop	r8
    1a1a:	7f 90       	pop	r7
    1a1c:	6f 90       	pop	r6
    1a1e:	5f 90       	pop	r5
    1a20:	4f 90       	pop	r4
    1a22:	3f 90       	pop	r3
    1a24:	2f 90       	pop	r2
    1a26:	08 95       	ret

00001a28 <arp_generate_packet>:
// Function : arp_generate_packet
// Description : generate arp packet
//
//********************************************************************************************
void arp_generate_packet ( BYTE *rxtx_buffer, BYTE *dest_mac, BYTE *dest_ip )
{
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	dc 01       	movw	r26, r24
	unsigned char i;
	
	// setup hardware type to ethernet 0x0001
	rxtx_buffer[ ARP_HARDWARE_TYPE_H_P ] = ARP_HARDWARE_TYPE_H_V;
    1a2e:	1e 96       	adiw	r26, 0x0e	; 14
    1a30:	1c 92       	st	X, r1
    1a32:	1e 97       	sbiw	r26, 0x0e	; 14
	rxtx_buffer[ ARP_HARDWARE_TYPE_L_P ] = ARP_HARDWARE_TYPE_L_V;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	1f 96       	adiw	r26, 0x0f	; 15
    1a38:	8c 93       	st	X, r24
    1a3a:	1f 97       	sbiw	r26, 0x0f	; 15
	
	// setup protocol type to ip 0x0800
	rxtx_buffer[ ARP_PROTOCOL_H_P ] = ARP_PROTOCOL_H_V;
    1a3c:	88 e0       	ldi	r24, 0x08	; 8
    1a3e:	50 96       	adiw	r26, 0x10	; 16
    1a40:	8c 93       	st	X, r24
    1a42:	50 97       	sbiw	r26, 0x10	; 16
	rxtx_buffer[ ARP_PROTOCOL_L_P ] = ARP_PROTOCOL_L_V;
    1a44:	51 96       	adiw	r26, 0x11	; 17
    1a46:	1c 92       	st	X, r1
    1a48:	51 97       	sbiw	r26, 0x11	; 17

	// setup hardware length to 0x06
	rxtx_buffer[ ARP_HARDWARE_SIZE_P ] = ARP_HARDWARE_SIZE_V;
    1a4a:	86 e0       	ldi	r24, 0x06	; 6
    1a4c:	52 96       	adiw	r26, 0x12	; 18
    1a4e:	8c 93       	st	X, r24
    1a50:	52 97       	sbiw	r26, 0x12	; 18

	// setup protocol length to 0x04
	rxtx_buffer[ ARP_PROTOCOL_SIZE_P ] = ARP_PROTOCOL_SIZE_V;
    1a52:	84 e0       	ldi	r24, 0x04	; 4
    1a54:	53 96       	adiw	r26, 0x13	; 19
    1a56:	8c 93       	st	X, r24
    1a58:	53 97       	sbiw	r26, 0x13	; 19
    1a5a:	ed 01       	movw	r28, r26
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0

	// setup arp destination and source mac address
	for ( i=0; i<sizeof(MAC_ADDR); i++)
	{
		rxtx_buffer[ ARP_DST_MAC_P + i ] = dest_mac[i];
    1a60:	fb 01       	movw	r30, r22
    1a62:	e2 0f       	add	r30, r18
    1a64:	f3 1f       	adc	r31, r19
    1a66:	80 81       	ld	r24, Z
    1a68:	88 a3       	std	Y+32, r24	; 0x20
		rxtx_buffer[ ARP_SRC_MAC_P + i ] = avr_mac.byte[i];
    1a6a:	f9 01       	movw	r30, r18
    1a6c:	ea 5d       	subi	r30, 0xDA	; 218
    1a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a70:	80 81       	ld	r24, Z
    1a72:	8e 8b       	std	Y+22, r24	; 0x16
    1a74:	2f 5f       	subi	r18, 0xFF	; 255
    1a76:	3f 4f       	sbci	r19, 0xFF	; 255
    1a78:	21 96       	adiw	r28, 0x01	; 1

	// setup protocol length to 0x04
	rxtx_buffer[ ARP_PROTOCOL_SIZE_P ] = ARP_PROTOCOL_SIZE_V;

	// setup arp destination and source mac address
	for ( i=0; i<sizeof(MAC_ADDR); i++)
    1a7a:	26 30       	cpi	r18, 0x06	; 6
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	81 f7       	brne	.-32     	; 0x1a60 <arp_generate_packet+0x38>
    1a80:	5c 96       	adiw	r26, 0x1c	; 28
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	// setup arp destination and source ip address
	for ( i=0; i<sizeof(IP_ADDR); i++)
	{
		rxtx_buffer[ ARP_DST_IP_P + i ] = dest_ip[i];
    1a86:	fa 01       	movw	r30, r20
    1a88:	e2 0f       	add	r30, r18
    1a8a:	f3 1f       	adc	r31, r19
    1a8c:	80 81       	ld	r24, Z
    1a8e:	1a 96       	adiw	r26, 0x0a	; 10
    1a90:	8c 93       	st	X, r24
    1a92:	1a 97       	sbiw	r26, 0x0a	; 10
		rxtx_buffer[ ARP_SRC_IP_P + i ] = avr_ip.byte[i];
    1a94:	f9 01       	movw	r30, r18
    1a96:	e0 5d       	subi	r30, 0xD0	; 208
    1a98:	fe 4f       	sbci	r31, 0xFE	; 254
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8d 93       	st	X+, r24
    1a9e:	2f 5f       	subi	r18, 0xFF	; 255
    1aa0:	3f 4f       	sbci	r19, 0xFF	; 255
		rxtx_buffer[ ARP_DST_MAC_P + i ] = dest_mac[i];
		rxtx_buffer[ ARP_SRC_MAC_P + i ] = avr_mac.byte[i];
	}
	
	// setup arp destination and source ip address
	for ( i=0; i<sizeof(IP_ADDR); i++)
    1aa2:	24 30       	cpi	r18, 0x04	; 4
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	79 f7       	brne	.-34     	; 0x1a86 <arp_generate_packet+0x5e>
	{
		rxtx_buffer[ ARP_DST_IP_P + i ] = dest_ip[i];
		rxtx_buffer[ ARP_SRC_IP_P + i ] = avr_ip.byte[i];
	}
}
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	08 95       	ret

00001aae <arp_packet_is_arp>:
// Function : arp_packet_is_arp
// Description : check received packet, that packet is match with arp and avr ip or not?
//
//*******************************************************************************************
BYTE arp_packet_is_arp ( BYTE *rxtx_buffer, WORD_BYTES opcode )
{
    1aae:	fc 01       	movw	r30, r24
	BYTE i;

	// if packet type is not arp packet exit from function
	if( rxtx_buffer[ ETH_TYPE_H_P ] != ETH_TYPE_ARP_H_V || rxtx_buffer[ ETH_TYPE_L_P ] != ETH_TYPE_ARP_L_V)
    1ab0:	84 85       	ldd	r24, Z+12	; 0x0c
    1ab2:	88 30       	cpi	r24, 0x08	; 8
    1ab4:	c9 f4       	brne	.+50     	; 0x1ae8 <arp_packet_is_arp+0x3a>
    1ab6:	85 85       	ldd	r24, Z+13	; 0x0d
    1ab8:	86 30       	cpi	r24, 0x06	; 6
    1aba:	b1 f4       	brne	.+44     	; 0x1ae8 <arp_packet_is_arp+0x3a>
		return 0;
	// check arp request opcode
	if ( rxtx_buffer[ ARP_OPCODE_H_P ] != opcode.byte.high || rxtx_buffer[ ARP_OPCODE_L_P ] != opcode.byte.low )
    1abc:	84 89       	ldd	r24, Z+20	; 0x14
    1abe:	87 17       	cp	r24, r23
    1ac0:	99 f4       	brne	.+38     	; 0x1ae8 <arp_packet_is_arp+0x3a>
    1ac2:	85 89       	ldd	r24, Z+21	; 0x15
    1ac4:	86 17       	cp	r24, r22
    1ac6:	81 f4       	brne	.+32     	; 0x1ae8 <arp_packet_is_arp+0x3a>
    1ac8:	df 01       	movw	r26, r30
    1aca:	96 96       	adiw	r26, 0x26	; 38
    1acc:	e0 e3       	ldi	r30, 0x30	; 48
    1ace:	f1 e0       	ldi	r31, 0x01	; 1
		return 0;
	// if destination ip address in arp packet not match with avr ip address
	for ( i=0; i<sizeof(IP_ADDR); i++ )
	{
		if ( rxtx_buffer[ ARP_DST_IP_P + i] != avr_ip.byte[i] )
    1ad0:	9c 91       	ld	r25, X
    1ad2:	80 81       	ld	r24, Z
    1ad4:	98 17       	cp	r25, r24
    1ad6:	41 f4       	brne	.+16     	; 0x1ae8 <arp_packet_is_arp+0x3a>
    1ad8:	11 96       	adiw	r26, 0x01	; 1
    1ada:	31 96       	adiw	r30, 0x01	; 1
		return 0;
	// check arp request opcode
	if ( rxtx_buffer[ ARP_OPCODE_H_P ] != opcode.byte.high || rxtx_buffer[ ARP_OPCODE_L_P ] != opcode.byte.low )
		return 0;
	// if destination ip address in arp packet not match with avr ip address
	for ( i=0; i<sizeof(IP_ADDR); i++ )
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	e4 33       	cpi	r30, 0x34	; 52
    1ae0:	f8 07       	cpc	r31, r24
    1ae2:	b1 f7       	brne	.-20     	; 0x1ad0 <arp_packet_is_arp+0x22>
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	08 95       	ret
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
	{
		if ( rxtx_buffer[ ARP_DST_IP_P + i] != avr_ip.byte[i] )
			return 0;
	}
	return 1;
}
    1aea:	08 95       	ret

00001aec <arp_send_reply>:
// Function : arp_send_reply
// Description : Send reply if recieved packet is ARP and IP address is match with avr_ip
//
//*******************************************************************************************
void arp_send_reply ( BYTE *rxtx_buffer, BYTE *dest_mac )
{
    1aec:	ef 92       	push	r14
    1aee:	ff 92       	push	r15
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	8c 01       	movw	r16, r24
    1af6:	7b 01       	movw	r14, r22
	// generate ethernet header
	eth_generate_header ( rxtx_buffer, (WORD_BYTES){ETH_TYPE_ARP_V}, dest_mac );
    1af8:	66 e0       	ldi	r22, 0x06	; 6
    1afa:	78 e0       	ldi	r23, 0x08	; 8
    1afc:	a7 01       	movw	r20, r14
    1afe:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <eth_generate_header>

	// change packet type to echo reply
	rxtx_buffer[ ARP_OPCODE_H_P ] = ARP_OPCODE_REPLY_H_V;
    1b02:	f8 01       	movw	r30, r16
    1b04:	14 8a       	std	Z+20, r1	; 0x14
	rxtx_buffer[ ARP_OPCODE_L_P ] = ARP_OPCODE_REPLY_L_V;
    1b06:	82 e0       	ldi	r24, 0x02	; 2
    1b08:	85 8b       	std	Z+21, r24	; 0x15
	arp_generate_packet ( rxtx_buffer, dest_mac, &rxtx_buffer[ ARP_SRC_IP_P ] );
    1b0a:	a8 01       	movw	r20, r16
    1b0c:	44 5e       	subi	r20, 0xE4	; 228
    1b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b10:	c8 01       	movw	r24, r16
    1b12:	b7 01       	movw	r22, r14
    1b14:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <arp_generate_packet>
	
	// send arp packet
	enc28j60_packet_send ( rxtx_buffer, sizeof(ETH_HEADER) + sizeof(ARP_PACKET) );
    1b18:	c8 01       	movw	r24, r16
    1b1a:	6a e2       	ldi	r22, 0x2A	; 42
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <enc28j60_packet_send>
}
    1b22:	1f 91       	pop	r17
    1b24:	0f 91       	pop	r16
    1b26:	ff 90       	pop	r15
    1b28:	ef 90       	pop	r14
    1b2a:	08 95       	ret

00001b2c <arp_send_request>:
// Function : arp_send_request
// Description : send arp request packet (who is?) to network.
//
//********************************************************************************************
void arp_send_request ( BYTE *rxtx_buffer, BYTE *dest_ip )
{
    1b2c:	cf 92       	push	r12
    1b2e:	df 92       	push	r13
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <arp_send_request+0x12>
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <arp_send_request+0x14>
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <arp_send_request+0x16>
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	8c 01       	movw	r16, r24
    1b48:	6b 01       	movw	r12, r22
	unsigned char i;
	MAC_ADDR dest_mac;

	// generate ethernet header
	for ( i=0; i<sizeof(MAC_ADDR); i++)
		dest_mac.byte[i] = 0xff;
    1b4a:	8f ef       	ldi	r24, 0xFF	; 255
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	8a 83       	std	Y+2, r24	; 0x02
    1b50:	8b 83       	std	Y+3, r24	; 0x03
    1b52:	8c 83       	std	Y+4, r24	; 0x04
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	8e 83       	std	Y+6, r24	; 0x06
	eth_generate_header ( rxtx_buffer, (WORD_BYTES){ETH_TYPE_ARP_V}, (BYTE*)&dest_mac );
    1b58:	c8 01       	movw	r24, r16
    1b5a:	66 e0       	ldi	r22, 0x06	; 6
    1b5c:	78 e0       	ldi	r23, 0x08	; 8
    1b5e:	7e 01       	movw	r14, r28
    1b60:	08 94       	sec
    1b62:	e1 1c       	adc	r14, r1
    1b64:	f1 1c       	adc	r15, r1
    1b66:	a7 01       	movw	r20, r14
    1b68:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <eth_generate_header>

	// generate arp packet
	for ( i=0; i<sizeof(MAC_ADDR); i++)
		dest_mac.byte[i] = 0x00;
    1b6c:	19 82       	std	Y+1, r1	; 0x01
    1b6e:	1a 82       	std	Y+2, r1	; 0x02
    1b70:	1b 82       	std	Y+3, r1	; 0x03
    1b72:	1c 82       	std	Y+4, r1	; 0x04
    1b74:	1d 82       	std	Y+5, r1	; 0x05
    1b76:	1e 82       	std	Y+6, r1	; 0x06
	
	// set arp opcode is request
	rxtx_buffer[ ARP_OPCODE_H_P ] = ARP_OPCODE_REQUEST_H_V;
    1b78:	f8 01       	movw	r30, r16
    1b7a:	14 8a       	std	Z+20, r1	; 0x14
	rxtx_buffer[ ARP_OPCODE_L_P ] = ARP_OPCODE_REQUEST_L_V;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	85 8b       	std	Z+21, r24	; 0x15
	arp_generate_packet ( rxtx_buffer, (BYTE*)&dest_mac, dest_ip );
    1b80:	c8 01       	movw	r24, r16
    1b82:	b7 01       	movw	r22, r14
    1b84:	a6 01       	movw	r20, r12
    1b86:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <arp_generate_packet>
	
	// send arp packet to network
	enc28j60_packet_send ( rxtx_buffer, sizeof(ETH_HEADER) + sizeof(ARP_PACKET) );
    1b8a:	c8 01       	movw	r24, r16
    1b8c:	6a e2       	ldi	r22, 0x2A	; 42
    1b8e:	70 e0       	ldi	r23, 0x00	; 0
    1b90:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <enc28j60_packet_send>
}
    1b94:	26 96       	adiw	r28, 0x06	; 6
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	ff 90       	pop	r15
    1baa:	ef 90       	pop	r14
    1bac:	df 90       	pop	r13
    1bae:	cf 90       	pop	r12
    1bb0:	08 95       	ret

00001bb2 <arp_who_is>:
// Description : send arp request to destination ip, and save destination mac to dest_mac.
// call this function to find the destination mac address before send other packet.
//
//*******************************************************************************************
BYTE arp_who_is ( BYTE *rxtx_buffer, BYTE *dest_mac, BYTE *dest_ip )
{
    1bb2:	df 92       	push	r13
    1bb4:	ef 92       	push	r14
    1bb6:	ff 92       	push	r15
    1bb8:	0f 93       	push	r16
    1bba:	1f 93       	push	r17
    1bbc:	cf 93       	push	r28
    1bbe:	df 93       	push	r29
    1bc0:	ec 01       	movw	r28, r24
    1bc2:	06 2f       	mov	r16, r22
    1bc4:	d7 2e       	mov	r13, r23
	BYTE i;
	WORD dlength;

	// send arp request packet to network
	arp_send_request ( rxtx_buffer, dest_ip );
    1bc6:	ba 01       	movw	r22, r20
    1bc8:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <arp_send_request>
    1bcc:	10 e0       	ldi	r17, 0x00	; 0
    1bce:	80 e4       	ldi	r24, 0x40	; 64
    1bd0:	e8 2e       	mov	r14, r24
    1bd2:	8c e9       	ldi	r24, 0x9C	; 156
    1bd4:	f8 2e       	mov	r15, r24
    1bd6:	c7 01       	movw	r24, r14
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <arp_who_is+0x26>

	for ( i=0; i<10; i++ )
	{
		// Time out 10x10ms = 100ms
		_delay_ms ( 10 );
		dlength = enc28j60_packet_receive( rxtx_buffer, MAX_RXTX_BUFFER );
    1bdc:	ce 01       	movw	r24, r28
    1bde:	6e ee       	ldi	r22, 0xEE	; 238
    1be0:	75 e0       	ldi	r23, 0x05	; 5
    1be2:	0e 94 25 05 	call	0xa4a	; 0xa4a <enc28j60_packet_receive>

		// destination ip address was found on network
		if ( dlength )
    1be6:	89 2b       	or	r24, r25
    1be8:	a1 f0       	breq	.+40     	; 0x1c12 <arp_who_is+0x60>
		{
			if ( arp_packet_is_arp ( rxtx_buffer, (WORD_BYTES){ARP_OPCODE_REPLY_V} ) )
    1bea:	ce 01       	movw	r24, r28
    1bec:	62 e0       	ldi	r22, 0x02	; 2
    1bee:	70 e0       	ldi	r23, 0x00	; 0
    1bf0:	0e 94 57 0d 	call	0x1aae	; 0x1aae <arp_packet_is_arp>
    1bf4:	88 23       	and	r24, r24
    1bf6:	69 f0       	breq	.+26     	; 0x1c12 <arp_who_is+0x60>
			{
				// copy destination mac address from arp reply packet to destination mac address
				memcpy ( dest_mac, &rxtx_buffer[ ETH_SRC_MAC_P ], sizeof(MAC_ADDR) );
    1bf8:	80 2f       	mov	r24, r16
    1bfa:	9d 2d       	mov	r25, r13
    1bfc:	9c 01       	movw	r18, r24
    1bfe:	d9 01       	movw	r26, r18
    1c00:	fe 01       	movw	r30, r28
    1c02:	36 96       	adiw	r30, 0x06	; 6
    1c04:	86 e0       	ldi	r24, 0x06	; 6
    1c06:	01 90       	ld	r0, Z+
    1c08:	0d 92       	st	X+, r0
    1c0a:	81 50       	subi	r24, 0x01	; 1
    1c0c:	e1 f7       	brne	.-8      	; 0x1c06 <arp_who_is+0x54>
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	04 c0       	rjmp	.+8      	; 0x1c1a <arp_who_is+0x68>
	WORD dlength;

	// send arp request packet to network
	arp_send_request ( rxtx_buffer, dest_ip );

	for ( i=0; i<10; i++ )
    1c12:	1f 5f       	subi	r17, 0xFF	; 255
    1c14:	1a 30       	cpi	r17, 0x0A	; 10
    1c16:	f9 f6       	brne	.-66     	; 0x1bd6 <arp_who_is+0x24>
    1c18:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	// destination ip was not found on network
	return 0;
}
    1c1a:	df 91       	pop	r29
    1c1c:	cf 91       	pop	r28
    1c1e:	1f 91       	pop	r17
    1c20:	0f 91       	pop	r16
    1c22:	ff 90       	pop	r15
    1c24:	ef 90       	pop	r14
    1c26:	df 90       	pop	r13
    1c28:	08 95       	ret

00001c2a <tcp_get_dlength>:
// Function : tcp_get_dlength
// Description : claculate tcp received data length
//
//*****************************************************************************************
WORD tcp_get_dlength ( BYTE *rxtx_buffer )
{
    1c2a:	fc 01       	movw	r30, r24
	int dlength, hlength;

	dlength = ( rxtx_buffer[ IP_TOTLEN_H_P ] <<8 ) | ( rxtx_buffer[ IP_TOTLEN_L_P ] );
	dlength -= sizeof(IP_HEADER);
    1c2c:	90 89       	ldd	r25, Z+16	; 0x10
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	21 89       	ldd	r18, Z+17	; 0x11
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	28 2b       	or	r18, r24
    1c36:	39 2b       	or	r19, r25
    1c38:	24 51       	subi	r18, 0x14	; 20
    1c3a:	30 40       	sbci	r19, 0x00	; 0
	hlength = (rxtx_buffer[ TCP_HEADER_LEN_P ]>>4) * 4; // generate len in bytes;
	dlength -= hlength;
    1c3c:	86 a5       	ldd	r24, Z+46	; 0x2e
    1c3e:	82 95       	swap	r24
    1c40:	8f 70       	andi	r24, 0x0F	; 15
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	28 1b       	sub	r18, r24
    1c4e:	39 0b       	sbc	r19, r25
    1c50:	37 ff       	sbrs	r19, 7
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <tcp_get_dlength+0x2e>
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
	if ( dlength <= 0 )
		dlength=0;
	
	return ((WORD)dlength);
}
    1c58:	c9 01       	movw	r24, r18
    1c5a:	08 95       	ret

00001c5c <tcp_get_hlength>:
// Function : tcp_get_hlength
// Description : claculate tcp received header length
//
//*****************************************************************************************
BYTE tcp_get_hlength ( BYTE *rxtx_buffer )
{
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1c60:	82 95       	swap	r24
    1c62:	8f 70       	andi	r24, 0x0F	; 15
	return ((rxtx_buffer[ TCP_HEADER_LEN_P ]>>4) * 4); // generate len in bytes;
}
    1c64:	88 0f       	add	r24, r24
    1c66:	88 0f       	add	r24, r24
    1c68:	08 95       	ret

00001c6a <tcp_puts_data_p>:
// Function : tcp_puts_data_p
// Description : puts data from program memory to tx buffer
//
//********************************************************************************************
WORD tcp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
    1c6a:	4a 5c       	subi	r20, 0xCA	; 202
    1c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6e:	dc 01       	movw	r26, r24
    1c70:	a4 0f       	add	r26, r20
    1c72:	b5 1f       	adc	r27, r21
    1c74:	46 53       	subi	r20, 0x36	; 54
    1c76:	50 40       	sbci	r21, 0x00	; 0
    1c78:	03 c0       	rjmp	.+6      	; 0x1c80 <tcp_puts_data_p+0x16>
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ TCP_DATA_P + offset ] = ch;
    1c7a:	8d 93       	st	X+, r24
		offset++;
    1c7c:	4f 5f       	subi	r20, 0xFF	; 255
    1c7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c80:	fb 01       	movw	r30, r22
//********************************************************************************************
WORD tcp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
    1c82:	6f 5f       	subi	r22, 0xFF	; 255
    1c84:	7f 4f       	sbci	r23, 0xFF	; 255
    1c86:	84 91       	lpm	r24, Z+
    1c88:	88 23       	and	r24, r24
    1c8a:	b9 f7       	brne	.-18     	; 0x1c7a <tcp_puts_data_p+0x10>
		rxtx_buffer[ TCP_DATA_P + offset ] = ch;
		offset++;
	}

	return offset;
}
    1c8c:	ca 01       	movw	r24, r20
    1c8e:	08 95       	ret

00001c90 <tcp_puts_data>:
// Function : tcp_puts_data
// Description : puts data from RAM to tx buffer
//
//********************************************************************************************
WORD tcp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
    1c90:	fb 01       	movw	r30, r22
    1c92:	4a 5c       	subi	r20, 0xCA	; 202
    1c94:	5f 4f       	sbci	r21, 0xFF	; 255
    1c96:	dc 01       	movw	r26, r24
    1c98:	a4 0f       	add	r26, r20
    1c9a:	b5 1f       	adc	r27, r21
    1c9c:	46 53       	subi	r20, 0x36	; 54
    1c9e:	50 40       	sbci	r21, 0x00	; 0
    1ca0:	04 c0       	rjmp	.+8      	; 0x1caa <tcp_puts_data+0x1a>
	while( *data )
	{
		rxtx_buffer[ TCP_DATA_P + offset ] = *data++;
    1ca2:	8d 93       	st	X+, r24
    1ca4:	31 96       	adiw	r30, 0x01	; 1
		offset++;
    1ca6:	4f 5f       	subi	r20, 0xFF	; 255
    1ca8:	5f 4f       	sbci	r21, 0xFF	; 255
// Description : puts data from RAM to tx buffer
//
//********************************************************************************************
WORD tcp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
	while( *data )
    1caa:	80 81       	ld	r24, Z
    1cac:	88 23       	and	r24, r24
    1cae:	c9 f7       	brne	.-14     	; 0x1ca2 <tcp_puts_data+0x12>
		rxtx_buffer[ TCP_DATA_P + offset ] = *data++;
		offset++;
	}

	return offset;
}
    1cb0:	ca 01       	movw	r24, r20
    1cb2:	08 95       	ret

00001cb4 <tcp_send_packet>:
	BYTE clear_seqack,
	WORD next_ack_num,
	WORD dlength,
	BYTE *dest_mac,
	BYTE *dest_ip )
{
    1cb4:	2f 92       	push	r2
    1cb6:	3f 92       	push	r3
    1cb8:	4f 92       	push	r4
    1cba:	5f 92       	push	r5
    1cbc:	6f 92       	push	r6
    1cbe:	7f 92       	push	r7
    1cc0:	8f 92       	push	r8
    1cc2:	9f 92       	push	r9
    1cc4:	af 92       	push	r10
    1cc6:	bf 92       	push	r11
    1cc8:	cf 92       	push	r12
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	0f 92       	push	r0
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	3c 01       	movw	r6, r24
    1ce0:	26 2e       	mov	r2, r22
    1ce2:	47 2e       	mov	r4, r23
    1ce4:	49 83       	std	Y+1, r20	; 0x01
    1ce6:	35 2e       	mov	r3, r21
    1ce8:	52 2e       	mov	r5, r18
    1cea:	f0 2e       	mov	r15, r16
    1cec:	85 01       	movw	r16, r10
    1cee:	a4 01       	movw	r20, r8
	BYTE i, tseq;
	WORD_BYTES ck;
	
	// generate ethernet header
	eth_generate_header ( rxtx_buffer, (WORD_BYTES){ETH_TYPE_IP_V}, dest_mac );		
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	78 e0       	ldi	r23, 0x08	; 8
    1cf4:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <eth_generate_header>

	// sequence numbers:
	// add the rel ack num to SEQACK
	if ( next_ack_num )
    1cf8:	c1 14       	cp	r12, r1
    1cfa:	d1 04       	cpc	r13, r1
    1cfc:	89 f0       	breq	.+34     	; 0x1d20 <tcp_send_packet+0x6c>
    1cfe:	f3 01       	movw	r30, r6
    1d00:	b9 96       	adiw	r30, 0x29	; 41
    1d02:	34 e0       	ldi	r19, 0x04	; 4
	{
		for( i=4; i>0; i-- )
		{
			next_ack_num = rxtx_buffer [ TCP_SEQ_P + i - 1] + next_ack_num;
    1d04:	80 81       	ld	r24, Z
    1d06:	a6 01       	movw	r20, r12
    1d08:	48 0f       	add	r20, r24
    1d0a:	51 1d       	adc	r21, r1
    1d0c:	ca 01       	movw	r24, r20
			tseq = rxtx_buffer [ TCP_SEQACK_P + i - 1];
    1d0e:	24 81       	ldd	r18, Z+4	; 0x04
			rxtx_buffer [ TCP_SEQACK_P + i - 1] = 0xff & next_ack_num;
    1d10:	44 83       	std	Z+4, r20	; 0x04

			// copy the acknum sent to us into the sequence number
			rxtx_buffer[ TCP_SEQ_P + i - 1 ] = tseq;
    1d12:	20 83       	st	Z, r18

			next_ack_num >>= 8;
    1d14:	c9 2e       	mov	r12, r25
    1d16:	dd 24       	eor	r13, r13

	// sequence numbers:
	// add the rel ack num to SEQACK
	if ( next_ack_num )
	{
		for( i=4; i>0; i-- )
    1d18:	31 50       	subi	r19, 0x01	; 1
    1d1a:	31 97       	sbiw	r30, 0x01	; 1
    1d1c:	33 23       	and	r19, r19
    1d1e:	91 f7       	brne	.-28     	; 0x1d04 <tcp_send_packet+0x50>
	}
	
	// initial tcp sequence number
	// setup maximum segment size
	// require to setup first packet is receive or transmit only
	if ( max_segment_size )
    1d20:	ff 20       	and	r15, r15
    1d22:	b9 f0       	breq	.+46     	; 0x1d52 <tcp_send_packet+0x9e>
	{
		// initial sequence number
		rxtx_buffer[ TCP_SEQ_P + 0 ] = 0;
    1d24:	f3 01       	movw	r30, r6
    1d26:	16 a2       	std	Z+38, r1	; 0x26
		rxtx_buffer[ TCP_SEQ_P + 1 ] = 0;
    1d28:	17 a2       	std	Z+39, r1	; 0x27
		rxtx_buffer[ TCP_SEQ_P + 2 ] = seqnum;
    1d2a:	80 91 60 00 	lds	r24, 0x0060
    1d2e:	80 a7       	std	Z+40, r24	; 0x28
		rxtx_buffer[ TCP_SEQ_P + 3 ] = 0;
    1d30:	11 a6       	std	Z+41, r1	; 0x29
		seqnum += 2;
    1d32:	8e 5f       	subi	r24, 0xFE	; 254
    1d34:	80 93 60 00 	sts	0x0060, r24

		// setup maximum segment size
		rxtx_buffer[ TCP_OPTIONS_P + 0 ] = 2;
    1d38:	82 e0       	ldi	r24, 0x02	; 2
    1d3a:	86 ab       	std	Z+54, r24	; 0x36
		rxtx_buffer[ TCP_OPTIONS_P + 1 ] = 4;
    1d3c:	84 e0       	ldi	r24, 0x04	; 4
    1d3e:	87 ab       	std	Z+55, r24	; 0x37
		rxtx_buffer[ TCP_OPTIONS_P + 2 ] = HIGH(1408);
    1d40:	85 e0       	ldi	r24, 0x05	; 5
    1d42:	80 af       	std	Z+56, r24	; 0x38
		rxtx_buffer[ TCP_OPTIONS_P + 3 ] = LOW(1408);
    1d44:	80 e8       	ldi	r24, 0x80	; 128
    1d46:	81 af       	std	Z+57, r24	; 0x39
		// setup tcp header length 24 bytes: 6*32/8 = 24
		rxtx_buffer[ TCP_HEADER_LEN_P ] = 0x60;
    1d48:	80 e6       	ldi	r24, 0x60	; 96
    1d4a:	86 a7       	std	Z+46, r24	; 0x2e
		dlength += 4;
    1d4c:	0c 5f       	subi	r16, 0xFC	; 252
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	03 c0       	rjmp	.+6      	; 0x1d58 <tcp_send_packet+0xa4>
	}
	else
	{
		// no options: 20 bytes: 5*32/8 = 20
		rxtx_buffer[ TCP_HEADER_LEN_P ] = 0x50;
    1d52:	80 e5       	ldi	r24, 0x50	; 80
    1d54:	f3 01       	movw	r30, r6
    1d56:	86 a7       	std	Z+46, r24	; 0x2e
	}

	// generate ip header and checksum
	ip_generate_header ( rxtx_buffer, (WORD_BYTES){(sizeof(IP_HEADER) + sizeof(TCP_HEADER) + dlength)}, IP_PROTO_TCP_V, dest_ip );
    1d58:	b8 01       	movw	r22, r16
    1d5a:	68 5d       	subi	r22, 0xD8	; 216
    1d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5e:	c3 01       	movw	r24, r6
    1d60:	46 e0       	ldi	r20, 0x06	; 6
    1d62:	2e 89       	ldd	r18, Y+22	; 0x16
    1d64:	3f 89       	ldd	r19, Y+23	; 0x17
    1d66:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <ip_generate_header>
	
	// clear sequence ack number before send tcp SYN packet
	if ( clear_seqack )
    1d6a:	ee 20       	and	r14, r14
    1d6c:	29 f0       	breq	.+10     	; 0x1d78 <tcp_send_packet+0xc4>
	{
		rxtx_buffer[ TCP_SEQACK_P + 0 ] = 0;
    1d6e:	f3 01       	movw	r30, r6
    1d70:	12 a6       	std	Z+42, r1	; 0x2a
		rxtx_buffer[ TCP_SEQACK_P + 1 ] = 0;
    1d72:	13 a6       	std	Z+43, r1	; 0x2b
		rxtx_buffer[ TCP_SEQACK_P + 2 ] = 0;
    1d74:	14 a6       	std	Z+44, r1	; 0x2c
		rxtx_buffer[ TCP_SEQACK_P + 3 ] = 0;
    1d76:	15 a6       	std	Z+45, r1	; 0x2d
	}
		
	// setup tcp flags
	rxtx_buffer [ TCP_FLAGS_P ] = flags;
    1d78:	f3 01       	movw	r30, r6
    1d7a:	57 a6       	std	Z+47, r5	; 0x2f
	
	// setup destination port
	rxtx_buffer [ TCP_DST_PORT_H_P ] = dest_port.byte.high;
    1d7c:	44 a2       	std	Z+36, r4	; 0x24
	rxtx_buffer [ TCP_DST_PORT_L_P ] = dest_port.byte.low;
    1d7e:	25 a2       	std	Z+37, r2	; 0x25

	// setup source port
	rxtx_buffer [ TCP_SRC_PORT_H_P ] = src_port.byte.high;
    1d80:	32 a2       	std	Z+34, r3	; 0x22
	rxtx_buffer [ TCP_SRC_PORT_L_P ] = src_port.byte.low;
    1d82:	49 81       	ldd	r20, Y+1	; 0x01
    1d84:	43 a3       	std	Z+35, r20	; 0x23

	// setup maximum windows size
	rxtx_buffer [ TCP_WINDOWSIZE_H_P ] = HIGH((MAX_RX_BUFFER-sizeof(IP_HEADER)-sizeof(ETH_HEADER)));
    1d86:	85 e0       	ldi	r24, 0x05	; 5
    1d88:	80 ab       	std	Z+48, r24	; 0x30
	rxtx_buffer [ TCP_WINDOWSIZE_L_P ] = LOW((MAX_RX_BUFFER-sizeof(IP_HEADER)-sizeof(ETH_HEADER)));
    1d8a:	8a eb       	ldi	r24, 0xBA	; 186
    1d8c:	81 ab       	std	Z+49, r24	; 0x31
	
	// setup urgend pointer (not used -> 0)
	rxtx_buffer[ TCP_URGENT_PTR_H_P ] = 0;
    1d8e:	14 aa       	std	Z+52, r1	; 0x34
	rxtx_buffer[ TCP_URGENT_PTR_L_P ] = 0;
    1d90:	15 aa       	std	Z+53, r1	; 0x35

	// clear old checksum and calculate new checksum
	rxtx_buffer[ TCP_CHECKSUM_H_P ] = 0;
    1d92:	12 aa       	std	Z+50, r1	; 0x32
	rxtx_buffer[ TCP_CHECKSUM_L_P ] = 0;
    1d94:	13 aa       	std	Z+51, r1	; 0x33
	// +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	// +                                     Destination IP address                                    +
	// +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	// +           0           +      IP Protocol      +                    Total length               +
	// +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	ck.word = software_checksum( &rxtx_buffer[IP_SRC_IP_P], sizeof(TCP_HEADER)+dlength+8, IP_PROTO_TCP_V + sizeof(TCP_HEADER) + dlength );
    1d96:	06 5e       	subi	r16, 0xE6	; 230
    1d98:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9a:	98 01       	movw	r18, r16
    1d9c:	40 e0       	ldi	r20, 0x00	; 0
    1d9e:	50 e0       	ldi	r21, 0x00	; 0
    1da0:	c3 01       	movw	r24, r6
    1da2:	4a 96       	adiw	r24, 0x1a	; 26
    1da4:	0e 5f       	subi	r16, 0xFE	; 254
    1da6:	1f 4f       	sbci	r17, 0xFF	; 255
    1da8:	b8 01       	movw	r22, r16
    1daa:	0e 94 75 0f 	call	0x1eea	; 0x1eea <software_checksum>
	rxtx_buffer[ TCP_CHECKSUM_H_P ] = ck.byte.high;
    1dae:	f3 01       	movw	r30, r6
    1db0:	92 ab       	std	Z+50, r25	; 0x32
	rxtx_buffer[ TCP_CHECKSUM_L_P ] = ck.byte.low;
    1db2:	83 ab       	std	Z+51, r24	; 0x33

	// send packet to ethernet media
	enc28j60_packet_send ( rxtx_buffer, sizeof(ETH_HEADER)+sizeof(IP_HEADER)+sizeof(TCP_HEADER)+dlength );
    1db4:	06 5e       	subi	r16, 0xE6	; 230
    1db6:	1f 4f       	sbci	r17, 0xFF	; 255
    1db8:	c3 01       	movw	r24, r6
    1dba:	b8 01       	movw	r22, r16
    1dbc:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <enc28j60_packet_send>
}
    1dc0:	0f 90       	pop	r0
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	1f 91       	pop	r17
    1dc8:	0f 91       	pop	r16
    1dca:	ff 90       	pop	r15
    1dcc:	ef 90       	pop	r14
    1dce:	df 90       	pop	r13
    1dd0:	cf 90       	pop	r12
    1dd2:	bf 90       	pop	r11
    1dd4:	af 90       	pop	r10
    1dd6:	9f 90       	pop	r9
    1dd8:	8f 90       	pop	r8
    1dda:	7f 90       	pop	r7
    1ddc:	6f 90       	pop	r6
    1dde:	5f 90       	pop	r5
    1de0:	4f 90       	pop	r4
    1de2:	3f 90       	pop	r3
    1de4:	2f 90       	pop	r2
    1de6:	08 95       	ret

00001de8 <ip_packet_is_ip>:
// Function : ip_check_ip
// Description : Check incoming packet
//
//********************************************************************************************
BYTE ip_packet_is_ip ( BYTE *rxtx_buffer )
{
    1de8:	fc 01       	movw	r30, r24
	unsigned char i;
	
	// if ethernet type is not ip
	if ( rxtx_buffer[ ETH_TYPE_H_P ] != ETH_TYPE_IP_H_V || rxtx_buffer[ ETH_TYPE_L_P ] != ETH_TYPE_IP_L_V)
    1dea:	84 85       	ldd	r24, Z+12	; 0x0c
    1dec:	88 30       	cpi	r24, 0x08	; 8
    1dee:	a1 f4       	brne	.+40     	; 0x1e18 <ip_packet_is_ip+0x30>
    1df0:	85 85       	ldd	r24, Z+13	; 0x0d
    1df2:	88 23       	and	r24, r24
    1df4:	89 f4       	brne	.+34     	; 0x1e18 <ip_packet_is_ip+0x30>
    1df6:	df 01       	movw	r26, r30
    1df8:	e0 e3       	ldi	r30, 0x30	; 48
    1dfa:	f1 e0       	ldi	r31, 0x01	; 1
		return 0;
	
	// if ip packet not send to avr
	for ( i=0; i<sizeof(IP_ADDR); i++ )
	{
		if ( rxtx_buffer[ IP_DST_IP_P + i ] != avr_ip.byte[i] )
    1dfc:	5e 96       	adiw	r26, 0x1e	; 30
    1dfe:	9c 91       	ld	r25, X
    1e00:	5e 97       	sbiw	r26, 0x1e	; 30
    1e02:	80 81       	ld	r24, Z
    1e04:	98 17       	cp	r25, r24
    1e06:	41 f4       	brne	.+16     	; 0x1e18 <ip_packet_is_ip+0x30>
    1e08:	11 96       	adiw	r26, 0x01	; 1
    1e0a:	31 96       	adiw	r30, 0x01	; 1
	// if ethernet type is not ip
	if ( rxtx_buffer[ ETH_TYPE_H_P ] != ETH_TYPE_IP_H_V || rxtx_buffer[ ETH_TYPE_L_P ] != ETH_TYPE_IP_L_V)
		return 0;
	
	// if ip packet not send to avr
	for ( i=0; i<sizeof(IP_ADDR); i++ )
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	e4 33       	cpi	r30, 0x34	; 52
    1e10:	f8 07       	cpc	r31, r24
    1e12:	a1 f7       	brne	.-24     	; 0x1dfc <ip_packet_is_ip+0x14>
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	08 95       	ret
    1e18:	80 e0       	ldi	r24, 0x00	; 0
			return 0;
	}
	
	// destination ip address match with avr ip address
	return 1;
}
    1e1a:	08 95       	ret

00001e1c <ip_generate_header>:
// Function : ip_generate_packet
// Description : generate all ip header
//
//********************************************************************************************
void ip_generate_header ( BYTE *rxtx_buffer, WORD_BYTES total_length, BYTE protocol, BYTE *dest_ip )
{
    1e1c:	0f 93       	push	r16
    1e1e:	1f 93       	push	r17
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	ec 01       	movw	r28, r24
	BYTE i;
	WORD_BYTES ck;
	
	// set ipv4 and header length
	rxtx_buffer[ IP_P ] = IP_V4_V | IP_HEADER_LENGTH_V;
    1e26:	8c 01       	movw	r16, r24
    1e28:	02 5f       	subi	r16, 0xF2	; 242
    1e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2c:	85 e4       	ldi	r24, 0x45	; 69
    1e2e:	8e 87       	std	Y+14, r24	; 0x0e

	// set TOS to default 0x00
	rxtx_buffer[ IP_TOS_P ] = 0x00;
    1e30:	1f 86       	std	Y+15, r1	; 0x0f

	// set total length
	rxtx_buffer [ IP_TOTLEN_H_P ] = total_length.byte.high;
    1e32:	78 8b       	std	Y+16, r23	; 0x10
	rxtx_buffer [ IP_TOTLEN_L_P ] = total_length.byte.low;
    1e34:	69 8b       	std	Y+17, r22	; 0x11
	
	// set packet identification
	rxtx_buffer [ IP_ID_H_P ] = ip_identfier.byte.high;
    1e36:	80 91 62 00 	lds	r24, 0x0062
    1e3a:	8a 8b       	std	Y+18, r24	; 0x12
	rxtx_buffer [ IP_ID_L_P ] = ip_identfier.byte.low;
    1e3c:	80 91 61 00 	lds	r24, 0x0061
    1e40:	8b 8b       	std	Y+19, r24	; 0x13
	ip_identfier.word++;
    1e42:	80 91 61 00 	lds	r24, 0x0061
    1e46:	90 91 62 00 	lds	r25, 0x0062
    1e4a:	01 96       	adiw	r24, 0x01	; 1
    1e4c:	90 93 62 00 	sts	0x0062, r25
    1e50:	80 93 61 00 	sts	0x0061, r24
	
	// set fragment flags	
	rxtx_buffer [ IP_FLAGS_H_P ] = 0x00;
    1e54:	1c 8a       	std	Y+20, r1	; 0x14
	rxtx_buffer [ IP_FLAGS_L_P ] = 0x00;
    1e56:	1d 8a       	std	Y+21, r1	; 0x15
	
	// set Time To Live
	rxtx_buffer [ IP_TTL_P ] = 128;
    1e58:	80 e8       	ldi	r24, 0x80	; 128
    1e5a:	8e 8b       	std	Y+22, r24	; 0x16
	
	// set ip packettype to tcp/udp/icmp...
	rxtx_buffer [ IP_PROTO_P ] = protocol;
    1e5c:	4f 8b       	std	Y+23, r20	; 0x17
    1e5e:	de 01       	movw	r26, r28
    1e60:	40 e0       	ldi	r20, 0x00	; 0
    1e62:	50 e0       	ldi	r21, 0x00	; 0
	
	// set source and destination ip address
	for ( i=0; i<4; i++ )
	{
		rxtx_buffer[ IP_DST_IP_P + i ] = dest_ip[i];
    1e64:	f9 01       	movw	r30, r18
    1e66:	e4 0f       	add	r30, r20
    1e68:	f5 1f       	adc	r31, r21
    1e6a:	80 81       	ld	r24, Z
    1e6c:	5e 96       	adiw	r26, 0x1e	; 30
    1e6e:	8c 93       	st	X, r24
    1e70:	5e 97       	sbiw	r26, 0x1e	; 30
		rxtx_buffer[ IP_SRC_IP_P + i ] = avr_ip.byte[ i ];
    1e72:	fa 01       	movw	r30, r20
    1e74:	e0 5d       	subi	r30, 0xD0	; 208
    1e76:	fe 4f       	sbci	r31, 0xFE	; 254
    1e78:	80 81       	ld	r24, Z
    1e7a:	5a 96       	adiw	r26, 0x1a	; 26
    1e7c:	8c 93       	st	X, r24
    1e7e:	5a 97       	sbiw	r26, 0x1a	; 26
    1e80:	4f 5f       	subi	r20, 0xFF	; 255
    1e82:	5f 4f       	sbci	r21, 0xFF	; 255
    1e84:	11 96       	adiw	r26, 0x01	; 1
	
	// set ip packettype to tcp/udp/icmp...
	rxtx_buffer [ IP_PROTO_P ] = protocol;
	
	// set source and destination ip address
	for ( i=0; i<4; i++ )
    1e86:	44 30       	cpi	r20, 0x04	; 4
    1e88:	51 05       	cpc	r21, r1
    1e8a:	61 f7       	brne	.-40     	; 0x1e64 <ip_generate_header+0x48>
		rxtx_buffer[ IP_DST_IP_P + i ] = dest_ip[i];
		rxtx_buffer[ IP_SRC_IP_P + i ] = avr_ip.byte[ i ];
	}
	
	// clear the 2 byte checksum
	rxtx_buffer[ IP_CHECKSUM_H_P ] = 0;
    1e8c:	18 8e       	std	Y+24, r1	; 0x18
	rxtx_buffer[ IP_CHECKSUM_L_P ] = 0;
    1e8e:	19 8e       	std	Y+25, r1	; 0x19

	// fill checksum value
	// calculate the checksum:
	ck.word = software_checksum ( &rxtx_buffer[ IP_P ], sizeof(IP_HEADER), 0 );
    1e90:	c8 01       	movw	r24, r16
    1e92:	64 e1       	ldi	r22, 0x14	; 20
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	0e 94 75 0f 	call	0x1eea	; 0x1eea <software_checksum>
	rxtx_buffer[ IP_CHECKSUM_H_P ] = ck.byte.high;
    1ea2:	98 8f       	std	Y+24, r25	; 0x18
	rxtx_buffer[ IP_CHECKSUM_L_P ] = ck.byte.low;
    1ea4:	89 8f       	std	Y+25, r24	; 0x19
}
    1ea6:	df 91       	pop	r29
    1ea8:	cf 91       	pop	r28
    1eaa:	1f 91       	pop	r17
    1eac:	0f 91       	pop	r16
    1eae:	08 95       	ret

00001eb0 <eth_generate_header>:
// Description : generarete ethernet header, contain destination and source MAC address,
// ethernet type.
//
//********************************************************************************************
void eth_generate_header ( BYTE *rxtx_buffer, WORD_BYTES type, BYTE *dest_mac )
{
    1eb0:	cf 93       	push	r28
    1eb2:	df 93       	push	r29
    1eb4:	ec 01       	movw	r28, r24
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
	BYTE i;
	//copy the destination mac from the source and fill my mac into src
	for ( i=0; i<sizeof(MAC_ADDR); i++)
	{
		rxtx_buffer[ ETH_DST_MAC_P + i ] = dest_mac[i];
    1ebc:	fa 01       	movw	r30, r20
    1ebe:	e2 0f       	add	r30, r18
    1ec0:	f3 1f       	adc	r31, r19
    1ec2:	80 81       	ld	r24, Z
    1ec4:	8c 93       	st	X, r24
		rxtx_buffer[ ETH_SRC_MAC_P + i ] = avr_mac.byte[i];
    1ec6:	f9 01       	movw	r30, r18
    1ec8:	ea 5d       	subi	r30, 0xDA	; 218
    1eca:	fe 4f       	sbci	r31, 0xFE	; 254
    1ecc:	80 81       	ld	r24, Z
    1ece:	16 96       	adiw	r26, 0x06	; 6
    1ed0:	8c 93       	st	X, r24
    1ed2:	16 97       	sbiw	r26, 0x06	; 6
    1ed4:	2f 5f       	subi	r18, 0xFF	; 255
    1ed6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed8:	11 96       	adiw	r26, 0x01	; 1
//********************************************************************************************
void eth_generate_header ( BYTE *rxtx_buffer, WORD_BYTES type, BYTE *dest_mac )
{
	BYTE i;
	//copy the destination mac from the source and fill my mac into src
	for ( i=0; i<sizeof(MAC_ADDR); i++)
    1eda:	26 30       	cpi	r18, 0x06	; 6
    1edc:	31 05       	cpc	r19, r1
    1ede:	71 f7       	brne	.-36     	; 0x1ebc <eth_generate_header+0xc>
	{
		rxtx_buffer[ ETH_DST_MAC_P + i ] = dest_mac[i];
		rxtx_buffer[ ETH_SRC_MAC_P + i ] = avr_mac.byte[i];
	}
	rxtx_buffer[ ETH_TYPE_H_P ] = type.byte.high;//HIGH(type);
    1ee0:	7c 87       	std	Y+12, r23	; 0x0c
	rxtx_buffer[ ETH_TYPE_L_P ] = type.byte.low;//LOW(type);
    1ee2:	6d 87       	std	Y+13, r22	; 0x0d
}
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	08 95       	ret

00001eea <software_checksum>:
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
//
//********************************************************************************************
WORD software_checksum(BYTE *rxtx_buffer, WORD len, DWORD sum)
{
    1eea:	ef 92       	push	r14
    1eec:	ff 92       	push	r15
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	7c 01       	movw	r14, r24
    1ef8:	8b 01       	movw	r16, r22
    1efa:	ec 01       	movw	r28, r24
    1efc:	0f c0       	rjmp	.+30     	; 0x1f1c <software_checksum+0x32>
	// build the sum of 16bit words
	while(len>1)
	{
		sum += 0xFFFF & (*rxtx_buffer<<8|*(rxtx_buffer+1));
    1efe:	f8 81       	ld	r31, Y
    1f00:	e0 e0       	ldi	r30, 0x00	; 0
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	8e 2b       	or	r24, r30
    1f08:	9f 2b       	or	r25, r31
    1f0a:	a0 e0       	ldi	r26, 0x00	; 0
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	28 0f       	add	r18, r24
    1f10:	39 1f       	adc	r19, r25
    1f12:	4a 1f       	adc	r20, r26
    1f14:	5b 1f       	adc	r21, r27
		rxtx_buffer+=2;
    1f16:	22 96       	adiw	r28, 0x02	; 2
		len-=2;
    1f18:	62 50       	subi	r22, 0x02	; 2
    1f1a:	70 40       	sbci	r23, 0x00	; 0
//
//********************************************************************************************
WORD software_checksum(BYTE *rxtx_buffer, WORD len, DWORD sum)
{
	// build the sum of 16bit words
	while(len>1)
    1f1c:	62 30       	cpi	r22, 0x02	; 2
    1f1e:	71 05       	cpc	r23, r1
    1f20:	70 f7       	brcc	.-36     	; 0x1efe <software_checksum+0x14>
    1f22:	f8 01       	movw	r30, r16
    1f24:	ee 7f       	andi	r30, 0xFE	; 254
    1f26:	ee 0d       	add	r30, r14
    1f28:	ff 1d       	adc	r31, r15
		sum += 0xFFFF & (*rxtx_buffer<<8|*(rxtx_buffer+1));
		rxtx_buffer+=2;
		len-=2;
	}
	// if there is a byte left then add it (padded with zero)
	if (len)
    1f2a:	00 ff       	sbrs	r16, 0
    1f2c:	0b c0       	rjmp	.+22     	; 0x1f44 <software_checksum+0x5a>
	{
		sum += 0xFFFF & (*rxtx_buffer<<8);
    1f2e:	90 81       	ld	r25, Z
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	a0 e0       	ldi	r26, 0x00	; 0
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <software_checksum+0x52>
	}
	// now calculate the sum over the bytes in the sum
	// until the result is only 16bit long
	while (sum>>16)
	{
		sum = (sum & 0xFFFF)+(sum >> 16);
    1f38:	40 70       	andi	r20, 0x00	; 0
    1f3a:	50 70       	andi	r21, 0x00	; 0
    1f3c:	28 0f       	add	r18, r24
    1f3e:	39 1f       	adc	r19, r25
    1f40:	4a 1f       	adc	r20, r26
    1f42:	5b 1f       	adc	r21, r27
	{
		sum += 0xFFFF & (*rxtx_buffer<<8);
	}
	// now calculate the sum over the bytes in the sum
	// until the result is only 16bit long
	while (sum>>16)
    1f44:	ca 01       	movw	r24, r20
    1f46:	aa 27       	eor	r26, r26
    1f48:	bb 27       	eor	r27, r27
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	a1 05       	cpc	r26, r1
    1f4e:	b1 05       	cpc	r27, r1
    1f50:	99 f7       	brne	.-26     	; 0x1f38 <software_checksum+0x4e>
    1f52:	20 95       	com	r18
    1f54:	30 95       	com	r19
	{
		sum = (sum & 0xFFFF)+(sum >> 16);
	}
	// build 1's complement:
	return( (WORD) sum ^ 0xFFFF);
}
    1f56:	c9 01       	movw	r24, r18
    1f58:	df 91       	pop	r29
    1f5a:	cf 91       	pop	r28
    1f5c:	1f 91       	pop	r17
    1f5e:	0f 91       	pop	r16
    1f60:	ff 90       	pop	r15
    1f62:	ef 90       	pop	r14
    1f64:	08 95       	ret

00001f66 <my_strcpy>:
// Description : copy string (end '\0') from program memory to ram and return pointer
// to end of string
//
//*****************************************************************************************
BYTE *my_strcpy ( BYTE *dest, PGM_P src )
{
    1f66:	dc 01       	movw	r26, r24
    1f68:	01 c0       	rjmp	.+2      	; 0x1f6c <my_strcpy+0x6>
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
	{
		*dest++ = ch;
    1f6a:	8d 93       	st	X+, r24
    1f6c:	fb 01       	movw	r30, r22
//*****************************************************************************************
BYTE *my_strcpy ( BYTE *dest, PGM_P src )
{
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
    1f6e:	6f 5f       	subi	r22, 0xFF	; 255
    1f70:	7f 4f       	sbci	r23, 0xFF	; 255
    1f72:	84 91       	lpm	r24, Z+
    1f74:	88 23       	and	r24, r24
    1f76:	c9 f7       	brne	.-14     	; 0x1f6a <my_strcpy+0x4>
	{
		*dest++ = ch;
	}
	return dest;
}
    1f78:	cd 01       	movw	r24, r26
    1f7a:	08 95       	ret

00001f7c <print_decimal>:
// Function : print_decimal
// Description : Print decimal to buffer, up to 5 digits
//
//*****************************************************************************************
BYTE * print_decimal ( BYTE *ptr, BYTE digit, WORD dec )
{
    1f7c:	1f 93       	push	r17
    1f7e:	fc 01       	movw	r30, r24
    1f80:	16 2f       	mov	r17, r22
    1f82:	9a 01       	movw	r18, r20
	if ( digit >= 5 )
    1f84:	65 30       	cpi	r22, 0x05	; 5
    1f86:	38 f0       	brcs	.+14     	; 0x1f96 <print_decimal+0x1a>
		*ptr++ = ( (dec/10000) + '0' );
    1f88:	ca 01       	movw	r24, r20
    1f8a:	60 e1       	ldi	r22, 0x10	; 16
    1f8c:	77 e2       	ldi	r23, 0x27	; 39
    1f8e:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodhi4>
    1f92:	60 5d       	subi	r22, 0xD0	; 208
    1f94:	61 93       	st	Z+, r22
	if ( digit >= 4 )
    1f96:	14 30       	cpi	r17, 0x04	; 4
    1f98:	58 f0       	brcs	.+22     	; 0x1fb0 <print_decimal+0x34>
		*ptr++ = ( ((dec%10000)/1000) + '0' );
    1f9a:	c9 01       	movw	r24, r18
    1f9c:	60 e1       	ldi	r22, 0x10	; 16
    1f9e:	77 e2       	ldi	r23, 0x27	; 39
    1fa0:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodhi4>
    1fa4:	68 ee       	ldi	r22, 0xE8	; 232
    1fa6:	73 e0       	ldi	r23, 0x03	; 3
    1fa8:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodhi4>
    1fac:	60 5d       	subi	r22, 0xD0	; 208
    1fae:	61 93       	st	Z+, r22
	if ( digit >= 3 )
    1fb0:	13 30       	cpi	r17, 0x03	; 3
    1fb2:	58 f0       	brcs	.+22     	; 0x1fca <print_decimal+0x4e>
		*ptr++ = ( ((dec%1000)/100) + '0' );
    1fb4:	c9 01       	movw	r24, r18
    1fb6:	68 ee       	ldi	r22, 0xE8	; 232
    1fb8:	73 e0       	ldi	r23, 0x03	; 3
    1fba:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodhi4>
    1fbe:	64 e6       	ldi	r22, 0x64	; 100
    1fc0:	70 e0       	ldi	r23, 0x00	; 0
    1fc2:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodhi4>
    1fc6:	60 5d       	subi	r22, 0xD0	; 208
    1fc8:	61 93       	st	Z+, r22
	if ( digit >= 2 )
    1fca:	12 30       	cpi	r17, 0x02	; 2
    1fcc:	58 f0       	brcs	.+22     	; 0x1fe4 <print_decimal+0x68>
		*ptr++ = ( ((dec%100)/10) + '0' );
    1fce:	c9 01       	movw	r24, r18
    1fd0:	64 e6       	ldi	r22, 0x64	; 100
    1fd2:	70 e0       	ldi	r23, 0x00	; 0
    1fd4:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodhi4>
    1fd8:	6a e0       	ldi	r22, 0x0A	; 10
    1fda:	70 e0       	ldi	r23, 0x00	; 0
    1fdc:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodhi4>
    1fe0:	60 5d       	subi	r22, 0xD0	; 208
    1fe2:	61 93       	st	Z+, r22
	*ptr++ = ( ((dec%10)) + '0' );
    1fe4:	c9 01       	movw	r24, r18
    1fe6:	6a e0       	ldi	r22, 0x0A	; 10
    1fe8:	70 e0       	ldi	r23, 0x00	; 0
    1fea:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodhi4>
    1fee:	80 5d       	subi	r24, 0xD0	; 208
    1ff0:	81 93       	st	Z+, r24

	return ptr;
}
    1ff2:	cf 01       	movw	r24, r30
    1ff4:	1f 91       	pop	r17
    1ff6:	08 95       	ret

00001ff8 <print_ip>:
// Function : print_ip
// Description : Print ip address format to buffer e.g. 10.1.1.1
//
//*****************************************************************************************
void print_ip ( BYTE *ptr, BYTE *ip, BYTE cursor )
{
    1ff8:	cf 92       	push	r12
    1ffa:	df 92       	push	r13
    1ffc:	ef 92       	push	r14
    1ffe:	ff 92       	push	r15
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
    2008:	dc 01       	movw	r26, r24
    200a:	7b 01       	movw	r14, r22
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
		else if ( temp > 9 )
			digit = 2;
		else
			digit = 1;
		
		if ( (i+1) == cursor )
    2010:	04 2f       	mov	r16, r20
    2012:	10 e0       	ldi	r17, 0x00	; 0
			*ptr = ASCII_CURSOR;
			ptr++;
		}
		else if ( i > 0 )
		{
			*ptr = '.';
    2014:	3e e2       	ldi	r19, 0x2E	; 46
    2016:	c3 2e       	mov	r12, r19
		else
			digit = 1;
		
		if ( (i+1) == cursor )
		{
			*ptr = ASCII_CURSOR;
    2018:	2e e7       	ldi	r18, 0x7E	; 126
    201a:	d2 2e       	mov	r13, r18
{
	BYTE i, digit, temp;

	for ( i=0; i<4; i++ )
	{
		temp = ip [ i ];
    201c:	f7 01       	movw	r30, r14
    201e:	e8 0f       	add	r30, r24
    2020:	f9 1f       	adc	r31, r25
    2022:	40 81       	ld	r20, Z
		if ( temp > 99 )
    2024:	44 36       	cpi	r20, 0x64	; 100
    2026:	10 f0       	brcs	.+4      	; 0x202c <print_ip+0x34>
    2028:	63 e0       	ldi	r22, 0x03	; 3
    202a:	05 c0       	rjmp	.+10     	; 0x2036 <print_ip+0x3e>
			digit = 3;
		else if ( temp > 9 )
    202c:	4a 30       	cpi	r20, 0x0A	; 10
    202e:	10 f4       	brcc	.+4      	; 0x2034 <print_ip+0x3c>
    2030:	61 e0       	ldi	r22, 0x01	; 1
    2032:	01 c0       	rjmp	.+2      	; 0x2036 <print_ip+0x3e>
    2034:	62 e0       	ldi	r22, 0x02	; 2
// Function : print_ip
// Description : Print ip address format to buffer e.g. 10.1.1.1
//
//*****************************************************************************************
void print_ip ( BYTE *ptr, BYTE *ip, BYTE cursor )
{
    2036:	ec 01       	movw	r28, r24
    2038:	21 96       	adiw	r28, 0x01	; 1
		else if ( temp > 9 )
			digit = 2;
		else
			digit = 1;
		
		if ( (i+1) == cursor )
    203a:	c0 17       	cp	r28, r16
    203c:	d1 07       	cpc	r29, r17
    203e:	11 f4       	brne	.+4      	; 0x2044 <print_ip+0x4c>
		{
			*ptr = ASCII_CURSOR;
    2040:	dd 92       	st	X+, r13
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <print_ip+0x50>
			ptr++;
		}
		else if ( i > 0 )
    2044:	81 11       	cpse	r24, r1
		{
			*ptr = '.';
    2046:	cd 92       	st	X+, r12
			ptr++;
		}
		ptr = print_decimal ( ptr, digit, temp );
    2048:	cd 01       	movw	r24, r26
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <print_decimal>
    2050:	dc 01       	movw	r26, r24
//*****************************************************************************************
void print_ip ( BYTE *ptr, BYTE *ip, BYTE cursor )
{
	BYTE i, digit, temp;

	for ( i=0; i<4; i++ )
    2052:	c4 30       	cpi	r28, 0x04	; 4
    2054:	d1 05       	cpc	r29, r1
    2056:	11 f0       	breq	.+4      	; 0x205c <print_ip+0x64>
    2058:	ce 01       	movw	r24, r28
    205a:	e0 cf       	rjmp	.-64     	; 0x201c <print_ip+0x24>
			ptr++;
		}
		ptr = print_decimal ( ptr, digit, temp );

	}
	*ptr = '\0';
    205c:	1c 92       	st	X, r1
}//*****************************************************************************************
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	ff 90       	pop	r15
    2068:	ef 90       	pop	r14
    206a:	df 90       	pop	r13
    206c:	cf 90       	pop	r12
    206e:	08 95       	ret

00002070 <turn_devices>:
// Description : Print devices format to buffer e.g. 10.1.1.1
//
//*****************************************************************************************
void turn_devices (  BYTE cursor)
{	
	if(cursor==0){
    2070:	88 23       	and	r24, r24
    2072:	31 f4       	brne	.+12     	; 0x2080 <turn_devices+0x10>
		if( (LED_PORT & _BV ( LED_PIN1 ))){
    2074:	af 9b       	sbis	0x15, 7	; 21
    2076:	02 c0       	rjmp	.+4      	; 0x207c <turn_devices+0xc>
			LED_PORT &= ~_BV ( LED_PIN1 );
    2078:	af 98       	cbi	0x15, 7	; 21
    207a:	08 95       	ret
		}else{
			LED_PORT |= _BV ( LED_PIN1 );
    207c:	af 9a       	sbi	0x15, 7	; 21
    207e:	08 95       	ret
		}	

	}else if(cursor==1){
    2080:	81 30       	cpi	r24, 0x01	; 1
    2082:	31 f4       	brne	.+12     	; 0x2090 <turn_devices+0x20>
		if( (LED_PORT & _BV ( LED_PIN2 ))){
    2084:	ae 9b       	sbis	0x15, 6	; 21
    2086:	02 c0       	rjmp	.+4      	; 0x208c <turn_devices+0x1c>
			LED_PORT &= ~_BV ( LED_PIN2 );
    2088:	ae 98       	cbi	0x15, 6	; 21
    208a:	08 95       	ret
		}else{
			LED_PORT |= _BV ( LED_PIN2 );
    208c:	ae 9a       	sbi	0x15, 6	; 21
    208e:	08 95       	ret
		}
	}else if(cursor==2){
    2090:	82 30       	cpi	r24, 0x02	; 2
    2092:	31 f4       	brne	.+12     	; 0x20a0 <turn_devices+0x30>
		if( (LED_PORT & _BV ( LED_PIN3 ))){
    2094:	ad 9b       	sbis	0x15, 5	; 21
    2096:	02 c0       	rjmp	.+4      	; 0x209c <turn_devices+0x2c>
			LED_PORT &= ~_BV ( LED_PIN3 );
    2098:	ad 98       	cbi	0x15, 5	; 21
    209a:	08 95       	ret
		}else{
			LED_PORT |= _BV ( LED_PIN3 );
    209c:	ad 9a       	sbi	0x15, 5	; 21
    209e:	08 95       	ret
		}
	}else if(cursor==3){
    20a0:	83 30       	cpi	r24, 0x03	; 3
    20a2:	31 f4       	brne	.+12     	; 0x20b0 <turn_devices+0x40>
		if( (LED_PORT & _BV ( LED_PIN4 ))){
    20a4:	ac 9b       	sbis	0x15, 4	; 21
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <turn_devices+0x3c>
			LED_PORT &= ~_BV ( LED_PIN4 );
    20a8:	ac 98       	cbi	0x15, 4	; 21
    20aa:	08 95       	ret
		}else{
			LED_PORT |= _BV ( LED_PIN4 );
    20ac:	ac 9a       	sbi	0x15, 4	; 21
    20ae:	08 95       	ret
		}
	}else if(cursor==4){
    20b0:	84 30       	cpi	r24, 0x04	; 4
    20b2:	31 f4       	brne	.+12     	; 0x20c0 <turn_devices+0x50>
		if( (LED_PORT & _BV ( LED_PIN5 ))){
    20b4:	ab 9b       	sbis	0x15, 3	; 21
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <turn_devices+0x4c>
			LED_PORT &= ~_BV ( LED_PIN5 );
    20b8:	ab 98       	cbi	0x15, 3	; 21
    20ba:	08 95       	ret
		}else{
			LED_PORT |= _BV ( LED_PIN5 );
    20bc:	ab 9a       	sbi	0x15, 3	; 21
    20be:	08 95       	ret
		}
	}else if(cursor==5){
    20c0:	85 30       	cpi	r24, 0x05	; 5
    20c2:	29 f4       	brne	.+10     	; 0x20ce <turn_devices+0x5e>
		if( (LED_PORT & _BV ( LED_PIN6 ))){
    20c4:	aa 9b       	sbis	0x15, 2	; 21
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <turn_devices+0x5c>
			LED_PORT &= ~_BV ( LED_PIN6 );
    20c8:	aa 98       	cbi	0x15, 2	; 21
    20ca:	08 95       	ret
		}else{
			LED_PORT |= _BV ( LED_PIN6 );
    20cc:	aa 9a       	sbi	0x15, 2	; 21
    20ce:	08 95       	ret

000020d0 <print_devices>:
// Function : print_devices
//
//
//*****************************************************************************************
void print_devices ( BYTE *ptr, BYTE cursor)
{	BYTE i;
    20d0:	dc 01       	movw	r26, r24
    20d2:	20 e0       	ldi	r18, 0x00	; 0
				*ptr++ ='F';
		}else if(i==5){
			if ( (LED_PORT & _BV ( LED_PIN6 )) )
				*ptr++ ='0';
			else
				*ptr++ ='F';
    20d4:	46 e4       	ldi	r20, 0x46	; 70
				*ptr++ ='0';
			else
				*ptr++ ='F';
		}else if(i==5){
			if ( (LED_PORT & _BV ( LED_PIN6 )) )
				*ptr++ ='0';
    20d6:	30 e3       	ldi	r19, 0x30	; 48
		}else if ( (i == cursor)&&(i!=0) ){
			*ptr++ = ' ';
			*ptr++ = ASCII_CURSOR;
		}else if(i!=0){
		
			*ptr++ = ' ';
    20d8:	50 e2       	ldi	r21, 0x20	; 32
			*ptr++ = ASCII_CURSOR;
		}else if ( ( cursor==0)&&(i==1) ){
			*ptr++ = ' ';
		}else if ( (i == cursor)&&(i!=0) ){
			*ptr++ = ' ';
			*ptr++ = ASCII_CURSOR;
    20da:	7e e7       	ldi	r23, 0x7E	; 126
//*****************************************************************************************
void print_devices ( BYTE *ptr, BYTE cursor)
{	BYTE i;
	for ( i=0; i<6; i++ )
	{
		if ( (i == cursor)&&(i==0) ){
    20dc:	26 17       	cp	r18, r22
    20de:	39 f4       	brne	.+14     	; 0x20ee <print_devices+0x1e>
    20e0:	cd 01       	movw	r24, r26
    20e2:	01 96       	adiw	r24, 0x01	; 1
    20e4:	22 23       	and	r18, r18
    20e6:	51 f4       	brne	.+20     	; 0x20fc <print_devices+0x2c>
			*ptr++ = ASCII_CURSOR;
    20e8:	7c 93       	st	X, r23
    20ea:	dc 01       	movw	r26, r24
    20ec:	16 c0       	rjmp	.+44     	; 0x211a <print_devices+0x4a>
		}else if ( ( cursor==0)&&(i==1) ){
    20ee:	66 23       	and	r22, r22
    20f0:	51 f4       	brne	.+20     	; 0x2106 <print_devices+0x36>
    20f2:	21 30       	cpi	r18, 0x01	; 1
    20f4:	41 f4       	brne	.+16     	; 0x2106 <print_devices+0x36>
			*ptr++ = ' ';
    20f6:	fd 01       	movw	r30, r26
    20f8:	51 93       	st	Z+, r21
    20fa:	17 c0       	rjmp	.+46     	; 0x212a <print_devices+0x5a>
		}else if ( (i == cursor)&&(i!=0) ){
			*ptr++ = ' ';
    20fc:	5c 93       	st	X, r21
			*ptr++ = ASCII_CURSOR;
    20fe:	11 96       	adiw	r26, 0x01	; 1
    2100:	7c 93       	st	X, r23
    2102:	fc 01       	movw	r30, r24
    2104:	06 c0       	rjmp	.+12     	; 0x2112 <print_devices+0x42>
		}else if(i!=0){
    2106:	22 23       	and	r18, r18
    2108:	41 f0       	breq	.+16     	; 0x211a <print_devices+0x4a>
		
			*ptr++ = ' ';
    210a:	fd 01       	movw	r30, r26
    210c:	51 93       	st	Z+, r21
			*ptr++ = ' ';
    210e:	11 96       	adiw	r26, 0x01	; 1
    2110:	5c 93       	st	X, r21
    2112:	31 96       	adiw	r30, 0x01	; 1
		if(i==0){
			if ( (LED_PORT & _BV ( LED_PIN1 )) )
				*ptr++ ='0';
			else
				*ptr++ ='F';
		}else if(i==1){
    2114:	21 30       	cpi	r18, 0x01	; 1
    2116:	71 f4       	brne	.+28     	; 0x2134 <print_devices+0x64>
    2118:	08 c0       	rjmp	.+16     	; 0x212a <print_devices+0x5a>
    211a:	cd 01       	movw	r24, r26
    211c:	01 96       	adiw	r24, 0x01	; 1
		
			*ptr++ = ' ';
			*ptr++ = ' ';
		}
		if(i==0){
			if ( (LED_PORT & _BV ( LED_PIN1 )) )
    211e:	af 9b       	sbis	0x15, 7	; 21
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <print_devices+0x56>
				*ptr++ ='0';
    2122:	3c 93       	st	X, r19
    2124:	23 c0       	rjmp	.+70     	; 0x216c <print_devices+0x9c>
			else
				*ptr++ ='F';
    2126:	4c 93       	st	X, r20
    2128:	21 c0       	rjmp	.+66     	; 0x216c <print_devices+0x9c>
    212a:	cf 01       	movw	r24, r30
    212c:	01 96       	adiw	r24, 0x01	; 1
		}else if(i==1){
			if ( (LED_PORT & _BV ( LED_PIN2 )) )
    212e:	ae 9b       	sbis	0x15, 6	; 21
    2130:	1c c0       	rjmp	.+56     	; 0x216a <print_devices+0x9a>
    2132:	19 c0       	rjmp	.+50     	; 0x2166 <print_devices+0x96>
				*ptr++ ='0';
			else
				*ptr++ ='F';
		}else if(i==2){
    2134:	22 30       	cpi	r18, 0x02	; 2
    2136:	29 f4       	brne	.+10     	; 0x2142 <print_devices+0x72>
    2138:	cf 01       	movw	r24, r30
    213a:	01 96       	adiw	r24, 0x01	; 1
			if ( (LED_PORT & _BV ( LED_PIN3 )) )
    213c:	ad 9b       	sbis	0x15, 5	; 21
    213e:	15 c0       	rjmp	.+42     	; 0x216a <print_devices+0x9a>
    2140:	12 c0       	rjmp	.+36     	; 0x2166 <print_devices+0x96>
				*ptr++ ='0';
			else
				*ptr++ ='F';
		}else if(i==3){
    2142:	23 30       	cpi	r18, 0x03	; 3
    2144:	29 f4       	brne	.+10     	; 0x2150 <print_devices+0x80>
    2146:	cf 01       	movw	r24, r30
    2148:	01 96       	adiw	r24, 0x01	; 1
			if ( (LED_PORT & _BV ( LED_PIN4 )) )
    214a:	ac 9b       	sbis	0x15, 4	; 21
    214c:	0e c0       	rjmp	.+28     	; 0x216a <print_devices+0x9a>
    214e:	0b c0       	rjmp	.+22     	; 0x2166 <print_devices+0x96>
				*ptr++ ='0';
			else
				*ptr++ ='F';
		}else if(i==4){
    2150:	24 30       	cpi	r18, 0x04	; 4
    2152:	29 f4       	brne	.+10     	; 0x215e <print_devices+0x8e>
    2154:	cf 01       	movw	r24, r30
    2156:	01 96       	adiw	r24, 0x01	; 1
			if ( (LED_PORT & _BV ( LED_PIN5 )) )
    2158:	ab 9b       	sbis	0x15, 3	; 21
    215a:	07 c0       	rjmp	.+14     	; 0x216a <print_devices+0x9a>
    215c:	04 c0       	rjmp	.+8      	; 0x2166 <print_devices+0x96>
    215e:	cf 01       	movw	r24, r30
    2160:	01 96       	adiw	r24, 0x01	; 1
				*ptr++ ='0';
			else
				*ptr++ ='F';
		}else if(i==5){
			if ( (LED_PORT & _BV ( LED_PIN6 )) )
    2162:	aa 9b       	sbis	0x15, 2	; 21
    2164:	02 c0       	rjmp	.+4      	; 0x216a <print_devices+0x9a>
				*ptr++ ='0';
    2166:	30 83       	st	Z, r19
    2168:	01 c0       	rjmp	.+2      	; 0x216c <print_devices+0x9c>
			else
				*ptr++ ='F';
    216a:	40 83       	st	Z, r20
    216c:	dc 01       	movw	r26, r24
//
//
//*****************************************************************************************
void print_devices ( BYTE *ptr, BYTE cursor)
{	BYTE i;
	for ( i=0; i<6; i++ )
    216e:	2f 5f       	subi	r18, 0xFF	; 255
    2170:	26 30       	cpi	r18, 0x06	; 6
    2172:	09 f0       	breq	.+2      	; 0x2176 <print_devices+0xa6>
    2174:	b3 cf       	rjmp	.-154    	; 0x20dc <print_devices+0xc>
				*ptr++ ='F';
		}
		//*ptr++ = ' ';
		//ptr = print_decimal ( ptr, 1, i++ );
	}
	*ptr = '\0';
    2176:	1c 92       	st	X, r1
}
    2178:	08 95       	ret

0000217a <print_timeout>:
// Function : print_timeout
// Description : Print timeout display light
//
//*****************************************************************************************
void print_timeout (BYTE *ptr,  BYTE cursor )
{
    217a:	dc 01       	movw	r26, r24
	BYTE digit;
	if ( screen_timeout > 99 )
    217c:	80 91 63 00 	lds	r24, 0x0063
    2180:	84 36       	cpi	r24, 0x64	; 100
    2182:	10 f0       	brcs	.+4      	; 0x2188 <print_timeout+0xe>
    2184:	63 e0       	ldi	r22, 0x03	; 3
    2186:	05 c0       	rjmp	.+10     	; 0x2192 <print_timeout+0x18>
		digit = 3;
	else if ( screen_timeout > 9 )
    2188:	8a 30       	cpi	r24, 0x0A	; 10
    218a:	10 f4       	brcc	.+4      	; 0x2190 <print_timeout+0x16>
    218c:	61 e0       	ldi	r22, 0x01	; 1
    218e:	01 c0       	rjmp	.+2      	; 0x2192 <print_timeout+0x18>
    2190:	62 e0       	ldi	r22, 0x02	; 2
		digit = 2;
	else
		digit = 1;
	
	*ptr = ASCII_CURSOR;
    2192:	fd 01       	movw	r30, r26
    2194:	8e e7       	ldi	r24, 0x7E	; 126
    2196:	81 93       	st	Z+, r24
	ptr++;
	if(screen_timeout==0){
    2198:	40 91 63 00 	lds	r20, 0x0063
    219c:	44 23       	and	r20, r20
    219e:	a9 f4       	brne	.+42     	; 0x21ca <print_timeout+0x50>
		*ptr++ = 'N';
    21a0:	8e e4       	ldi	r24, 0x4E	; 78
    21a2:	11 96       	adiw	r26, 0x01	; 1
    21a4:	8c 93       	st	X, r24
    21a6:	df 01       	movw	r26, r30
    21a8:	11 96       	adiw	r26, 0x01	; 1
		*ptr++ = 'e';
    21aa:	95 e6       	ldi	r25, 0x65	; 101
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	fd 01       	movw	r30, r26
    21b0:	31 96       	adiw	r30, 0x01	; 1
		*ptr++ = 'v';
    21b2:	86 e7       	ldi	r24, 0x76	; 118
    21b4:	11 96       	adiw	r26, 0x01	; 1
    21b6:	8c 93       	st	X, r24
    21b8:	df 01       	movw	r26, r30
    21ba:	11 96       	adiw	r26, 0x01	; 1
		*ptr++ = 'e';
    21bc:	91 83       	std	Z+1, r25	; 0x01
		*ptr++ = 'r';
    21be:	82 e7       	ldi	r24, 0x72	; 114
    21c0:	11 96       	adiw	r26, 0x01	; 1
    21c2:	8c 93       	st	X, r24
    21c4:	11 97       	sbiw	r26, 0x01	; 1
    21c6:	fd 01       	movw	r30, r26
    21c8:	1f c0       	rjmp	.+62     	; 0x2208 <print_timeout+0x8e>
	
	}else{
		ptr = print_decimal ( ptr, digit, screen_timeout );
    21ca:	cf 01       	movw	r24, r30
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <print_decimal>
    21d2:	dc 01       	movw	r26, r24
		*ptr++ = ' ';
    21d4:	fc 01       	movw	r30, r24
    21d6:	80 e2       	ldi	r24, 0x20	; 32
    21d8:	81 93       	st	Z+, r24
		*ptr++ = 's';
    21da:	83 e7       	ldi	r24, 0x73	; 115
    21dc:	11 96       	adiw	r26, 0x01	; 1
    21de:	8c 93       	st	X, r24
    21e0:	df 01       	movw	r26, r30
    21e2:	11 96       	adiw	r26, 0x01	; 1
		*ptr++ = 'e';
    21e4:	85 e6       	ldi	r24, 0x65	; 101
    21e6:	81 83       	std	Z+1, r24	; 0x01
    21e8:	fd 01       	movw	r30, r26
    21ea:	31 96       	adiw	r30, 0x01	; 1
		*ptr++ = 'c';
    21ec:	83 e6       	ldi	r24, 0x63	; 99
    21ee:	11 96       	adiw	r26, 0x01	; 1
    21f0:	8c 93       	st	X, r24
    21f2:	df 01       	movw	r26, r30
    21f4:	11 96       	adiw	r26, 0x01	; 1
		*ptr++ = 'o';
    21f6:	8f e6       	ldi	r24, 0x6F	; 111
    21f8:	81 83       	std	Z+1, r24	; 0x01
    21fa:	fd 01       	movw	r30, r26
    21fc:	31 96       	adiw	r30, 0x01	; 1
		*ptr++ = 'n';
    21fe:	8e e6       	ldi	r24, 0x6E	; 110
    2200:	11 96       	adiw	r26, 0x01	; 1
    2202:	8c 93       	st	X, r24
		*ptr++ = 'd';
    2204:	84 e6       	ldi	r24, 0x64	; 100
    2206:	81 83       	std	Z+1, r24	; 0x01
    2208:	32 96       	adiw	r30, 0x02	; 2
	}
	*ptr = '\0';
    220a:	10 82       	st	Z, r1
}
    220c:	08 95       	ret

0000220e <print_time>:
// Function : print_time
// Description : Print time format to buffer e.g. 01:23:45
//
//*****************************************************************************************
void print_time ( BYTE *ptr, BYTE *time, BYTE cursor )
{
    220e:	cf 92       	push	r12
    2210:	df 92       	push	r13
    2212:	ef 92       	push	r14
    2214:	ff 92       	push	r15
    2216:	0f 93       	push	r16
    2218:	1f 93       	push	r17
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
    221e:	dc 01       	movw	r26, r24
    2220:	fb 01       	movw	r30, r22
	BYTE i;
	
	// show setting cursor when enter to setting mode
	if ( cursor == 0 )
    2222:	44 23       	and	r20, r20
    2224:	f1 f4       	brne	.+60     	; 0x2262 <print_time+0x54>
	{
		if ( time [ 0 ] )
    2226:	80 81       	ld	r24, Z
    2228:	88 23       	and	r24, r24
    222a:	89 f0       	breq	.+34     	; 0x224e <print_time+0x40>
		{
			time++;
    222c:	eb 01       	movw	r28, r22
    222e:	21 96       	adiw	r28, 0x01	; 1
    2230:	10 e0       	ldi	r17, 0x00	; 0
				{
					*ptr++ = ASCII_CURSOR;
				}
				else if ( i > 0 )
				{
					*ptr++ = ':';
    2232:	0a e3       	ldi	r16, 0x3A	; 58
    2234:	01 c0       	rjmp	.+2      	; 0x2238 <print_time+0x2a>
    2236:	0d 93       	st	X+, r16
				}
				ptr = print_decimal ( ptr, 2, *time++ );
    2238:	49 91       	ld	r20, Y+
    223a:	cd 01       	movw	r24, r26
    223c:	62 e0       	ldi	r22, 0x02	; 2
    223e:	50 e0       	ldi	r21, 0x00	; 0
    2240:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <print_decimal>
    2244:	dc 01       	movw	r26, r24
	if ( cursor == 0 )
	{
		if ( time [ 0 ] )
		{
			time++;
			for ( i=0; i<3; i++ )
    2246:	1f 5f       	subi	r17, 0xFF	; 255
    2248:	13 30       	cpi	r17, 0x03	; 3
    224a:	a9 f7       	brne	.-22     	; 0x2236 <print_time+0x28>
    224c:	44 c0       	rjmp	.+136    	; 0x22d6 <print_time+0xc8>
				ptr = print_decimal ( ptr, 2, *time++ );
			}
		}
		else
		{
			ptr = my_strcpy ( ptr, (PGM_P)str_disable );
    224e:	8d ed       	ldi	r24, 0xDD	; 221
    2250:	95 e0       	ldi	r25, 0x05	; 5
    2252:	01 c0       	rjmp	.+2      	; 0x2256 <print_time+0x48>
{
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
	{
		*dest++ = ch;
    2254:	2d 93       	st	X+, r18
    2256:	fc 01       	movw	r30, r24
//*****************************************************************************************
BYTE *my_strcpy ( BYTE *dest, PGM_P src )
{
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
    2258:	01 96       	adiw	r24, 0x01	; 1
    225a:	24 91       	lpm	r18, Z+
    225c:	22 23       	and	r18, r18
    225e:	d1 f7       	brne	.-12     	; 0x2254 <print_time+0x46>
    2260:	3a c0       	rjmp	.+116    	; 0x22d6 <print_time+0xc8>
			ptr = my_strcpy ( ptr, (PGM_P)str_disable );
		}
	}
	else
	{
		if ( cursor == 1 )
    2262:	41 30       	cpi	r20, 0x01	; 1
    2264:	c9 f4       	brne	.+50     	; 0x2298 <print_time+0x8a>
		{
			*ptr++ = ASCII_CURSOR;
    2266:	8e e7       	ldi	r24, 0x7E	; 126
    2268:	8d 93       	st	X+, r24
			// show Enable/Disable send temparature to server
			if ( time [ 0 ] )
    226a:	80 81       	ld	r24, Z
    226c:	88 23       	and	r24, r24
    226e:	51 f0       	breq	.+20     	; 0x2284 <print_time+0x76>
				ptr = my_strcpy ( ptr, (PGM_P)str_enable );
    2270:	86 ed       	ldi	r24, 0xD6	; 214
    2272:	95 e0       	ldi	r25, 0x05	; 5
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <print_time+0x6a>
{
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
	{
		*dest++ = ch;
    2276:	2d 93       	st	X+, r18
    2278:	fc 01       	movw	r30, r24
//*****************************************************************************************
BYTE *my_strcpy ( BYTE *dest, PGM_P src )
{
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
    227a:	01 96       	adiw	r24, 0x01	; 1
    227c:	24 91       	lpm	r18, Z+
    227e:	22 23       	and	r18, r18
    2280:	d1 f7       	brne	.-12     	; 0x2276 <print_time+0x68>
    2282:	29 c0       	rjmp	.+82     	; 0x22d6 <print_time+0xc8>
			*ptr++ = ASCII_CURSOR;
			// show Enable/Disable send temparature to server
			if ( time [ 0 ] )
				ptr = my_strcpy ( ptr, (PGM_P)str_enable );
			else
				ptr = my_strcpy ( ptr, (PGM_P)str_disable );
    2284:	8d ed       	ldi	r24, 0xDD	; 221
    2286:	95 e0       	ldi	r25, 0x05	; 5
    2288:	01 c0       	rjmp	.+2      	; 0x228c <print_time+0x7e>
{
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
	{
		*dest++ = ch;
    228a:	2d 93       	st	X+, r18
    228c:	fc 01       	movw	r30, r24
//*****************************************************************************************
BYTE *my_strcpy ( BYTE *dest, PGM_P src )
{
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
    228e:	01 96       	adiw	r24, 0x01	; 1
    2290:	24 91       	lpm	r18, Z+
    2292:	22 23       	and	r18, r18
    2294:	d1 f7       	brne	.-12     	; 0x228a <print_time+0x7c>
    2296:	1f c0       	rjmp	.+62     	; 0x22d6 <print_time+0xc8>
    2298:	8b 01       	movw	r16, r22
    229a:	c2 e0       	ldi	r28, 0x02	; 2
    229c:	d0 e0       	ldi	r29, 0x00	; 0
		else
		{
			time++;
			for ( i=0; i<3; i++ )
			{
				if ( (i+2) == cursor )
    229e:	e4 2e       	mov	r14, r20
    22a0:	ff 24       	eor	r15, r15
				{
					*ptr++ = ASCII_CURSOR;
				}
				else if ( i > 0 )
				{
					*ptr++ = ':';
    22a2:	5a e3       	ldi	r21, 0x3A	; 58
    22a4:	c5 2e       	mov	r12, r21
			time++;
			for ( i=0; i<3; i++ )
			{
				if ( (i+2) == cursor )
				{
					*ptr++ = ASCII_CURSOR;
    22a6:	4e e7       	ldi	r20, 0x7E	; 126
    22a8:	d4 2e       	mov	r13, r20
		else
		{
			time++;
			for ( i=0; i<3; i++ )
			{
				if ( (i+2) == cursor )
    22aa:	ce 15       	cp	r28, r14
    22ac:	df 05       	cpc	r29, r15
    22ae:	11 f4       	brne	.+4      	; 0x22b4 <print_time+0xa6>
				{
					*ptr++ = ASCII_CURSOR;
    22b0:	dd 92       	st	X+, r13
    22b2:	03 c0       	rjmp	.+6      	; 0x22ba <print_time+0xac>
				}
				else if ( i > 0 )
    22b4:	c2 30       	cpi	r28, 0x02	; 2
    22b6:	09 f0       	breq	.+2      	; 0x22ba <print_time+0xac>
				{
					*ptr++ = ':';
    22b8:	cd 92       	st	X+, r12
				}
				ptr = print_decimal ( ptr, 2, *time++ );
    22ba:	f8 01       	movw	r30, r16
    22bc:	41 81       	ldd	r20, Z+1	; 0x01
    22be:	cd 01       	movw	r24, r26
    22c0:	62 e0       	ldi	r22, 0x02	; 2
    22c2:	50 e0       	ldi	r21, 0x00	; 0
    22c4:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <print_decimal>
    22c8:	dc 01       	movw	r26, r24
    22ca:	21 96       	adiw	r28, 0x01	; 1
    22cc:	0f 5f       	subi	r16, 0xFF	; 255
    22ce:	1f 4f       	sbci	r17, 0xFF	; 255
				ptr = my_strcpy ( ptr, (PGM_P)str_disable );
		}
		else
		{
			time++;
			for ( i=0; i<3; i++ )
    22d0:	c5 30       	cpi	r28, 0x05	; 5
    22d2:	d1 05       	cpc	r29, r1
    22d4:	51 f7       	brne	.-44     	; 0x22aa <print_time+0x9c>
				ptr = print_decimal ( ptr, 2, *time++ );
			}
		}
	}
	
	*ptr = '\0';
    22d6:	1c 92       	st	X, r1
}
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	1f 91       	pop	r17
    22de:	0f 91       	pop	r16
    22e0:	ff 90       	pop	r15
    22e2:	ef 90       	pop	r14
    22e4:	df 90       	pop	r13
    22e6:	cf 90       	pop	r12
    22e8:	08 95       	ret

000022ea <menu_init>:
//
//*******************************************************************************************
void menu_init ( void )
{	
	// setup countdown initial value
	sec_count = 0;
    22ea:	10 92 41 01 	sts	0x0141, r1
	eeprom_read_block ( count_time, ee_count_time, 3 );
    22ee:	8a e3       	ldi	r24, 0x3A	; 58
    22f0:	91 e0       	ldi	r25, 0x01	; 1
    22f2:	68 e0       	ldi	r22, 0x08	; 8
    22f4:	70 e0       	ldi	r23, 0x00	; 0
    22f6:	43 e0       	ldi	r20, 0x03	; 3
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__eerd_block_m32>
	count_time[3] = 0;
    22fe:	10 92 3d 01 	sts	0x013D, r1

	// setup menu and standby display
	flag1.byte = 0;
    2302:	10 92 25 01 	sts	0x0125, r1
	flag2.byte = 0;
    2306:	10 92 24 01 	sts	0x0124, r1
	menu_index = 0;
    230a:	10 92 3f 01 	sts	0x013F, r1
	submenu_index = 0;
    230e:	10 92 40 01 	sts	0x0140, r1
	menu_stack = 0;
    2312:	10 92 44 01 	sts	0x0144, r1
	submenu_stack = 0;
    2316:	10 92 42 01 	sts	0x0142, r1
	setting_cursor = 0;
    231a:	10 92 43 01 	sts	0x0143, r1
	standby_cursor = 1;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	80 93 3e 01 	sts	0x013E, r24
}
    2324:	08 95       	ret

00002326 <key_dw_process>:
void key_dw_process ( void )
{
	BYTE temp;
	
	// standby display, display board status
	if(menu_index == 0)
    2326:	80 91 3f 01 	lds	r24, 0x013F
    232a:	88 23       	and	r24, r24
    232c:	91 f4       	brne	.+36     	; 0x2352 <key_dw_process+0x2c>
	{
		if(standby_cursor==1){
    232e:	80 91 3e 01 	lds	r24, 0x013E
    2332:	81 30       	cpi	r24, 0x01	; 1
    2334:	29 f4       	brne	.+10     	; 0x2340 <key_dw_process+0x1a>
			turn_devices(ind_device_cur);
    2336:	80 91 0f 01 	lds	r24, 0x010F
    233a:	0e 94 38 10 	call	0x2070	; 0x2070 <turn_devices>
    233e:	08 95       	ret
			return;
		}
		if ( -- standby_cursor == 0 )
    2340:	81 50       	subi	r24, 0x01	; 1
    2342:	80 93 3e 01 	sts	0x013E, r24
			standby_cursor = sizeof(standby_list)/2;
		flag1.bits.update_display = 1;
    2346:	80 91 25 01 	lds	r24, 0x0125
    234a:	82 60       	ori	r24, 0x02	; 2
    234c:	80 93 25 01 	sts	0x0125, r24
    2350:	08 95       	ret
	}
	// main menu
	else if(menu_index == 1)
    2352:	81 30       	cpi	r24, 0x01	; 1
    2354:	61 f4       	brne	.+24     	; 0x236e <key_dw_process+0x48>
	{
		if( --submenu_index == 0 )
    2356:	80 91 40 01 	lds	r24, 0x0140
    235a:	81 50       	subi	r24, 0x01	; 1
    235c:	80 93 40 01 	sts	0x0140, r24
    2360:	88 23       	and	r24, r24
    2362:	09 f0       	breq	.+2      	; 0x2366 <key_dw_process+0x40>
    2364:	4c c0       	rjmp	.+152    	; 0x23fe <key_dw_process+0xd8>
		{
			submenu_index = (sizeof(menu_list)/2)-1;
    2366:	85 e0       	ldi	r24, 0x05	; 5
    2368:	80 93 40 01 	sts	0x0140, r24
    236c:	08 95       	ret
		}
	}
	// setup avr ip
	else if( menu_index == 2 )
    236e:	82 30       	cpi	r24, 0x02	; 2
    2370:	69 f4       	brne	.+26     	; 0x238c <key_dw_process+0x66>
	{
		avr_ip.byte [ setting_cursor ]--;
    2372:	e0 91 43 01 	lds	r30, 0x0143
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	e0 5d       	subi	r30, 0xD0	; 208
    237a:	fe 4f       	sbci	r31, 0xFE	; 254
    237c:	80 81       	ld	r24, Z
    237e:	81 50       	subi	r24, 0x01	; 1
    2380:	80 83       	st	Z, r24
		eeprom_write_block ( &avr_ip, ee_avr_ip, 4 );
    2382:	80 e3       	ldi	r24, 0x30	; 48
    2384:	91 e0       	ldi	r25, 0x01	; 1
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	25 c0       	rjmp	.+74     	; 0x23d6 <key_dw_process+0xb0>
	}
	// setup server ip
	else if( menu_index == 3 )
    238c:	83 30       	cpi	r24, 0x03	; 3
    238e:	69 f4       	brne	.+26     	; 0x23aa <key_dw_process+0x84>
	{
		server_ip.byte [ setting_cursor ]--;
    2390:	e0 91 43 01 	lds	r30, 0x0143
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	e4 5d       	subi	r30, 0xD4	; 212
    2398:	fe 4f       	sbci	r31, 0xFE	; 254
    239a:	80 81       	ld	r24, Z
    239c:	81 50       	subi	r24, 0x01	; 1
    239e:	80 83       	st	Z, r24
		eeprom_write_block ( &server_ip, ee_server_ip, 4 );
    23a0:	8c e2       	ldi	r24, 0x2C	; 44
    23a2:	91 e0       	ldi	r25, 0x01	; 1
    23a4:	64 e0       	ldi	r22, 0x04	; 4
    23a6:	70 e0       	ldi	r23, 0x00	; 0
    23a8:	16 c0       	rjmp	.+44     	; 0x23d6 <key_dw_process+0xb0>
	}
	// setup countdown timer
	else if( menu_index == 4 )
    23aa:	84 30       	cpi	r24, 0x04	; 4
    23ac:	c9 f4       	brne	.+50     	; 0x23e0 <key_dw_process+0xba>
	{
		temp = pgm_read_byte ( (PGM_P)(count_time_max + setting_cursor) );
    23ae:	80 91 43 01 	lds	r24, 0x0143
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	fc 01       	movw	r30, r24
    23b6:	ee 52       	subi	r30, 0x2E	; 46
    23b8:	fa 4f       	sbci	r31, 0xFA	; 250
    23ba:	24 91       	lpm	r18, Z+
		if ( --count_time [ setting_cursor ] == 0xff )
    23bc:	fc 01       	movw	r30, r24
    23be:	e6 5c       	subi	r30, 0xC6	; 198
    23c0:	fe 4f       	sbci	r31, 0xFE	; 254
    23c2:	80 81       	ld	r24, Z
    23c4:	81 50       	subi	r24, 0x01	; 1
    23c6:	80 83       	st	Z, r24
    23c8:	8f 3f       	cpi	r24, 0xFF	; 255
    23ca:	09 f4       	brne	.+2      	; 0x23ce <key_dw_process+0xa8>
			count_time [ setting_cursor ] = temp;
    23cc:	20 83       	st	Z, r18
		eeprom_write_block ( count_time, ee_count_time, 4 );
    23ce:	8a e3       	ldi	r24, 0x3A	; 58
    23d0:	91 e0       	ldi	r25, 0x01	; 1
    23d2:	68 e0       	ldi	r22, 0x08	; 8
    23d4:	70 e0       	ldi	r23, 0x00	; 0
    23d6:	44 e0       	ldi	r20, 0x04	; 4
    23d8:	50 e0       	ldi	r21, 0x00	; 0
    23da:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <__eewr_block_m32>
    23de:	08 95       	ret
	}else if(menu_index == 6){
    23e0:	86 30       	cpi	r24, 0x06	; 6
    23e2:	69 f4       	brne	.+26     	; 0x23fe <key_dw_process+0xd8>
		if(screen_timeout == 0){
    23e4:	80 91 63 00 	lds	r24, 0x0063
    23e8:	88 23       	and	r24, r24
    23ea:	11 f4       	brne	.+4      	; 0x23f0 <key_dw_process+0xca>
			screen_timeout=240;
    23ec:	80 ef       	ldi	r24, 0xF0	; 240
    23ee:	01 c0       	rjmp	.+2      	; 0x23f2 <key_dw_process+0xcc>
		}else{
			screen_timeout--;
    23f0:	81 50       	subi	r24, 0x01	; 1
    23f2:	80 93 63 00 	sts	0x0063, r24
		}
		timeout_cur_screen=screen_timeout;
    23f6:	80 91 63 00 	lds	r24, 0x0063
    23fa:	80 93 64 00 	sts	0x0064, r24
    23fe:	08 95       	ret

00002400 <key_up_process>:
void key_up_process ( void )
{
	BYTE temp;
	
	// standby display, display board status
	if(menu_index == 0)
    2400:	90 91 3f 01 	lds	r25, 0x013F
    2404:	99 23       	and	r25, r25
    2406:	e9 f4       	brne	.+58     	; 0x2442 <key_up_process+0x42>
	{
		if(standby_cursor==1){
    2408:	90 91 3e 01 	lds	r25, 0x013E
    240c:	91 30       	cpi	r25, 0x01	; 1
    240e:	51 f4       	brne	.+20     	; 0x2424 <key_up_process+0x24>
			if(++ind_device_cur !=6){
    2410:	80 91 0f 01 	lds	r24, 0x010F
    2414:	8f 5f       	subi	r24, 0xFF	; 255
    2416:	80 93 0f 01 	sts	0x010F, r24
    241a:	86 30       	cpi	r24, 0x06	; 6
    241c:	09 f0       	breq	.+2      	; 0x2420 <key_up_process+0x20>
    241e:	66 c0       	rjmp	.+204    	; 0x24ec <key_up_process+0xec>
				return;
			}else{
				ind_device_cur=0;
    2420:	10 92 0f 01 	sts	0x010F, r1
			}
		}
		if ( ++ standby_cursor == ((sizeof(standby_list)/2)+1) )
    2424:	89 2f       	mov	r24, r25
    2426:	8f 5f       	subi	r24, 0xFF	; 255
    2428:	80 93 3e 01 	sts	0x013E, r24
    242c:	86 30       	cpi	r24, 0x06	; 6
    242e:	19 f4       	brne	.+6      	; 0x2436 <key_up_process+0x36>
			standby_cursor = 1;
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	80 93 3e 01 	sts	0x013E, r24
		flag1.bits.update_display = 1;
    2436:	80 91 25 01 	lds	r24, 0x0125
    243a:	82 60       	ori	r24, 0x02	; 2
    243c:	80 93 25 01 	sts	0x0125, r24
    2440:	08 95       	ret
	}
	// main menu
	else if(menu_index == 1)
    2442:	91 30       	cpi	r25, 0x01	; 1
    2444:	59 f4       	brne	.+22     	; 0x245c <key_up_process+0x5c>
	{
		if( ++submenu_index == (sizeof(menu_list)/2) )
    2446:	80 91 40 01 	lds	r24, 0x0140
    244a:	8f 5f       	subi	r24, 0xFF	; 255
    244c:	80 93 40 01 	sts	0x0140, r24
    2450:	86 30       	cpi	r24, 0x06	; 6
    2452:	09 f0       	breq	.+2      	; 0x2456 <key_up_process+0x56>
    2454:	4b c0       	rjmp	.+150    	; 0x24ec <key_up_process+0xec>
		{
			submenu_index = 1;
    2456:	90 93 40 01 	sts	0x0140, r25
    245a:	08 95       	ret
		}
	}
	// setup avr ip
	else if( menu_index == 2 )
    245c:	92 30       	cpi	r25, 0x02	; 2
    245e:	69 f4       	brne	.+26     	; 0x247a <key_up_process+0x7a>
	{
		avr_ip.byte [ setting_cursor ]++;
    2460:	e0 91 43 01 	lds	r30, 0x0143
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	e0 5d       	subi	r30, 0xD0	; 208
    2468:	fe 4f       	sbci	r31, 0xFE	; 254
    246a:	80 81       	ld	r24, Z
    246c:	8f 5f       	subi	r24, 0xFF	; 255
    246e:	80 83       	st	Z, r24
		eeprom_write_block ( &avr_ip, ee_avr_ip, 4 );
    2470:	80 e3       	ldi	r24, 0x30	; 48
    2472:	91 e0       	ldi	r25, 0x01	; 1
    2474:	60 e0       	ldi	r22, 0x00	; 0
    2476:	70 e0       	ldi	r23, 0x00	; 0
    2478:	25 c0       	rjmp	.+74     	; 0x24c4 <key_up_process+0xc4>
	}
	// setup server ip
	else if( menu_index == 3 )
    247a:	93 30       	cpi	r25, 0x03	; 3
    247c:	69 f4       	brne	.+26     	; 0x2498 <key_up_process+0x98>
	{
		server_ip.byte [ setting_cursor ]++;
    247e:	e0 91 43 01 	lds	r30, 0x0143
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	e4 5d       	subi	r30, 0xD4	; 212
    2486:	fe 4f       	sbci	r31, 0xFE	; 254
    2488:	80 81       	ld	r24, Z
    248a:	8f 5f       	subi	r24, 0xFF	; 255
    248c:	80 83       	st	Z, r24
		eeprom_write_block ( &server_ip, ee_server_ip, 4 );
    248e:	8c e2       	ldi	r24, 0x2C	; 44
    2490:	91 e0       	ldi	r25, 0x01	; 1
    2492:	64 e0       	ldi	r22, 0x04	; 4
    2494:	70 e0       	ldi	r23, 0x00	; 0
    2496:	16 c0       	rjmp	.+44     	; 0x24c4 <key_up_process+0xc4>
	}
	// setup countdown timer
	else if( menu_index == 4 )
    2498:	94 30       	cpi	r25, 0x04	; 4
    249a:	c9 f4       	brne	.+50     	; 0x24ce <key_up_process+0xce>
	{
		temp = pgm_read_byte ( (PGM_P)(count_time_max + setting_cursor) );
    249c:	80 91 43 01 	lds	r24, 0x0143
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	fc 01       	movw	r30, r24
    24a4:	ee 52       	subi	r30, 0x2E	; 46
    24a6:	fa 4f       	sbci	r31, 0xFA	; 250
    24a8:	e4 91       	lpm	r30, Z+
		if ( ++count_time [ setting_cursor ] == temp )
    24aa:	dc 01       	movw	r26, r24
    24ac:	a6 5c       	subi	r26, 0xC6	; 198
    24ae:	be 4f       	sbci	r27, 0xFE	; 254
    24b0:	8c 91       	ld	r24, X
    24b2:	8f 5f       	subi	r24, 0xFF	; 255
    24b4:	8c 93       	st	X, r24
    24b6:	8e 17       	cp	r24, r30
    24b8:	09 f4       	brne	.+2      	; 0x24bc <key_up_process+0xbc>
			count_time [ setting_cursor ] = 0;
    24ba:	1c 92       	st	X, r1
		eeprom_write_block ( count_time, ee_count_time, 4 );
    24bc:	8a e3       	ldi	r24, 0x3A	; 58
    24be:	91 e0       	ldi	r25, 0x01	; 1
    24c0:	68 e0       	ldi	r22, 0x08	; 8
    24c2:	70 e0       	ldi	r23, 0x00	; 0
    24c4:	44 e0       	ldi	r20, 0x04	; 4
    24c6:	50 e0       	ldi	r21, 0x00	; 0
    24c8:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <__eewr_block_m32>
    24cc:	08 95       	ret
	}else if(menu_index == 6){
    24ce:	96 30       	cpi	r25, 0x06	; 6
    24d0:	69 f4       	brne	.+26     	; 0x24ec <key_up_process+0xec>
		screen_timeout++;
    24d2:	80 91 63 00 	lds	r24, 0x0063
    24d6:	8f 5f       	subi	r24, 0xFF	; 255
    24d8:	80 93 63 00 	sts	0x0063, r24
		if(screen_timeout > 240){
    24dc:	81 3f       	cpi	r24, 0xF1	; 241
    24de:	10 f0       	brcs	.+4      	; 0x24e4 <key_up_process+0xe4>
			screen_timeout=0;
    24e0:	10 92 63 00 	sts	0x0063, r1
		}
		timeout_cur_screen=screen_timeout;
    24e4:	80 91 63 00 	lds	r24, 0x0063
    24e8:	80 93 64 00 	sts	0x0064, r24
    24ec:	08 95       	ret

000024ee <display_menu>:
// Function : display_menu
// Description : display LCD user interface menu on LCD
//
//*******************************************************************************************
void display_menu(void)
{
    24ee:	0f 93       	push	r16
    24f0:	1f 93       	push	r17
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	c0 54       	subi	r28, 0x40	; 64
    24fc:	d0 40       	sbci	r29, 0x00	; 0
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
	BYTE generic_buf[64];

	if( menu_index == 0)
    2508:	80 91 3f 01 	lds	r24, 0x013F
    250c:	88 23       	and	r24, r24
    250e:	09 f4       	brne	.+2      	; 0x2512 <display_menu+0x24>
    2510:	5d c0       	rjmp	.+186    	; 0x25cc <display_menu+0xde>
		return;

	// display menu title on lcd first line
	lcd_putc( '\f' );
    2512:	8c e0       	ldi	r24, 0x0C	; 12
    2514:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <lcd_putc>
	lcd_print ( (BYTE *)menu_list[ menu_index - 1 ] );
    2518:	e0 91 3f 01 	lds	r30, 0x013F
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	ee 0f       	add	r30, r30
    2520:	ff 1f       	adc	r31, r31
    2522:	e8 54       	subi	r30, 0x48	; 72
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	80 81       	ld	r24, Z
    2528:	91 81       	ldd	r25, Z+1	; 0x01
    252a:	0e 94 14 15 	call	0x2a28	; 0x2a28 <lcd_print>
	
	// display menu detail on lcd second line
	lcd_putc( '\n' );
    252e:	8a e0       	ldi	r24, 0x0A	; 10
    2530:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <lcd_putc>
	if( menu_index == 1 )//MENU_MAIN)
    2534:	80 91 3f 01 	lds	r24, 0x013F
    2538:	81 30       	cpi	r24, 0x01	; 1
    253a:	51 f4       	brne	.+20     	; 0x2550 <display_menu+0x62>
	{
		lcd_print( (BYTE *)menu_list[ submenu_index ] );
    253c:	e0 91 40 01 	lds	r30, 0x0140
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	ee 0f       	add	r30, r30
    2544:	ff 1f       	adc	r31, r31
    2546:	e6 54       	subi	r30, 0x46	; 70
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	91 81       	ldd	r25, Z+1	; 0x01
    254e:	3c c0       	rjmp	.+120    	; 0x25c8 <display_menu+0xda>
	}
	// setup avr ip address
	else if( menu_index == 2 )
    2550:	82 30       	cpi	r24, 0x02	; 2
    2552:	51 f4       	brne	.+20     	; 0x2568 <display_menu+0x7a>
	{
		print_ip ( generic_buf, (BYTE*)&avr_ip, setting_cursor+1 );
    2554:	40 91 43 01 	lds	r20, 0x0143
    2558:	4f 5f       	subi	r20, 0xFF	; 255
    255a:	8e 01       	movw	r16, r28
    255c:	0f 5f       	subi	r16, 0xFF	; 255
    255e:	1f 4f       	sbci	r17, 0xFF	; 255
    2560:	c8 01       	movw	r24, r16
    2562:	60 e3       	ldi	r22, 0x30	; 48
    2564:	71 e0       	ldi	r23, 0x01	; 1
    2566:	23 c0       	rjmp	.+70     	; 0x25ae <display_menu+0xc0>
		lcd_print ( generic_buf );
	}
	// setup server ip address
	else if(menu_index == 3 )
    2568:	83 30       	cpi	r24, 0x03	; 3
    256a:	51 f4       	brne	.+20     	; 0x2580 <display_menu+0x92>
	{
		print_ip ( generic_buf, (BYTE*)&server_ip, setting_cursor+1 );
    256c:	40 91 43 01 	lds	r20, 0x0143
    2570:	4f 5f       	subi	r20, 0xFF	; 255
    2572:	8e 01       	movw	r16, r28
    2574:	0f 5f       	subi	r16, 0xFF	; 255
    2576:	1f 4f       	sbci	r17, 0xFF	; 255
    2578:	c8 01       	movw	r24, r16
    257a:	6c e2       	ldi	r22, 0x2C	; 44
    257c:	71 e0       	ldi	r23, 0x01	; 1
    257e:	17 c0       	rjmp	.+46     	; 0x25ae <display_menu+0xc0>
		lcd_print ( generic_buf );
	}
	// setup countdown timer for send temparature
	else if ( menu_index == 4 )
    2580:	84 30       	cpi	r24, 0x04	; 4
    2582:	61 f4       	brne	.+24     	; 0x259c <display_menu+0xae>
	{
		print_time ( generic_buf, count_time, setting_cursor+1 );
    2584:	40 91 43 01 	lds	r20, 0x0143
    2588:	4f 5f       	subi	r20, 0xFF	; 255
    258a:	8e 01       	movw	r16, r28
    258c:	0f 5f       	subi	r16, 0xFF	; 255
    258e:	1f 4f       	sbci	r17, 0xFF	; 255
    2590:	c8 01       	movw	r24, r16
    2592:	6a e3       	ldi	r22, 0x3A	; 58
    2594:	71 e0       	ldi	r23, 0x01	; 1
    2596:	0e 94 07 11 	call	0x220e	; 0x220e <print_time>
    259a:	15 c0       	rjmp	.+42     	; 0x25c6 <display_menu+0xd8>
		lcd_print ( generic_buf );
	}
	// ping server
	else if ( menu_index == 5 )
    259c:	85 30       	cpi	r24, 0x05	; 5
    259e:	51 f4       	brne	.+20     	; 0x25b4 <display_menu+0xc6>
	{
		print_ip ( generic_buf, (BYTE*)&server_ip, 1 );
    25a0:	8e 01       	movw	r16, r28
    25a2:	0f 5f       	subi	r16, 0xFF	; 255
    25a4:	1f 4f       	sbci	r17, 0xFF	; 255
    25a6:	c8 01       	movw	r24, r16
    25a8:	6c e2       	ldi	r22, 0x2C	; 44
    25aa:	71 e0       	ldi	r23, 0x01	; 1
    25ac:	41 e0       	ldi	r20, 0x01	; 1
    25ae:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <print_ip>
    25b2:	09 c0       	rjmp	.+18     	; 0x25c6 <display_menu+0xd8>
		lcd_print ( generic_buf );
	}
	// send temparature now
	else if ( menu_index == 6 )
    25b4:	86 30       	cpi	r24, 0x06	; 6
    25b6:	51 f4       	brne	.+20     	; 0x25cc <display_menu+0xde>
	{
		print_timeout(generic_buf,  1 );
    25b8:	8e 01       	movw	r16, r28
    25ba:	0f 5f       	subi	r16, 0xFF	; 255
    25bc:	1f 4f       	sbci	r17, 0xFF	; 255
    25be:	c8 01       	movw	r24, r16
    25c0:	61 e0       	ldi	r22, 0x01	; 1
    25c2:	0e 94 bd 10 	call	0x217a	; 0x217a <print_timeout>
		lcd_print (generic_buf);
    25c6:	c8 01       	movw	r24, r16
    25c8:	0e 94 14 15 	call	0x2a28	; 0x2a28 <lcd_print>
	}
}
    25cc:	c0 5c       	subi	r28, 0xC0	; 192
    25ce:	df 4f       	sbci	r29, 0xFF	; 255
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	de bf       	out	0x3e, r29	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	cd bf       	out	0x3d, r28	; 61
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	1f 91       	pop	r17
    25e0:	0f 91       	pop	r16
    25e2:	08 95       	ret

000025e4 <menu_process>:
// Function : key_process
// Description : Process all key code from get_key_code function
//
//*******************************************************************************************
void menu_process ( void )
{
    25e4:	1f 93       	push	r17
	static BYTE key_hold_count=0, key_hold_step_delay=0;

	BYTE key_code, temp;
	static BYTE backlight_seccount=250;
	// get switch value from port
	key_code = SW_PIN & ( _BV( SW_DW ) | _BV( SW_UP ) | _BV( SW_EXIT ) | _BV( SW_MENU ) );
    25e6:	19 b3       	in	r17, 0x19	; 25
    25e8:	10 7f       	andi	r17, 0xF0	; 240
    25ea:	90 91 63 00 	lds	r25, 0x0063
	
	// Check key press?
	if ( key_code  == ( _BV( SW_DW ) | _BV( SW_UP ) | _BV( SW_EXIT ) | _BV( SW_MENU ) ) )
    25ee:	10 3f       	cpi	r17, 0xF0	; 240
    25f0:	69 f5       	brne	.+90     	; 0x264c <menu_process+0x68>
	{
		flag1.bits.key_is_executed = 0;
    25f2:	80 91 25 01 	lds	r24, 0x0125
    25f6:	8e 7f       	andi	r24, 0xFE	; 254
    25f8:	80 93 25 01 	sts	0x0125, r24
		flag2.bits.key_hold = 0;
    25fc:	80 91 24 01 	lds	r24, 0x0124
    2600:	8e 7f       	andi	r24, 0xFE	; 254
    2602:	80 93 24 01 	sts	0x0124, r24
		key_hold_count = 0;
    2606:	10 92 11 01 	sts	0x0111, r1
		key_hold_step_delay = 0;
    260a:	10 92 10 01 	sts	0x0110, r1
		if(screen_timeout==0){
    260e:	99 23       	and	r25, r25
    2610:	11 f4       	brne	.+4      	; 0x2616 <menu_process+0x32>
			LCD_BL_PORT |= _BV( LCD_BL_PIN );
    2612:	c3 9a       	sbi	0x18, 3	; 24
    2614:	97 c0       	rjmp	.+302    	; 0x2744 <menu_process+0x160>
			return;
		}
		// lcd backlight control
		// lcd backlight off after key is unpress ( 30 seconds)
		if ( timeout_cur_screen )
    2616:	90 91 64 00 	lds	r25, 0x0064
    261a:	99 23       	and	r25, r25
    261c:	09 f4       	brne	.+2      	; 0x2620 <menu_process+0x3c>
    261e:	92 c0       	rjmp	.+292    	; 0x2744 <menu_process+0x160>
		{
			if ( -- backlight_seccount> 250 )
    2620:	80 91 0b 01 	lds	r24, 0x010B
    2624:	81 50       	subi	r24, 0x01	; 1
    2626:	80 93 0b 01 	sts	0x010B, r24
    262a:	8b 3f       	cpi	r24, 0xFB	; 251
    262c:	08 f4       	brcc	.+2      	; 0x2630 <menu_process+0x4c>
    262e:	8a c0       	rjmp	.+276    	; 0x2744 <menu_process+0x160>
			{
				
				backlight_seccount = 250;
    2630:	8a ef       	ldi	r24, 0xFA	; 250
    2632:	80 93 0b 01 	sts	0x010B, r24
				if ( --timeout_cur_screen == 0 )
    2636:	89 2f       	mov	r24, r25
    2638:	81 50       	subi	r24, 0x01	; 1
    263a:	80 93 64 00 	sts	0x0064, r24
    263e:	88 23       	and	r24, r24
    2640:	09 f0       	breq	.+2      	; 0x2644 <menu_process+0x60>
    2642:	80 c0       	rjmp	.+256    	; 0x2744 <menu_process+0x160>
				{
					timeout_cur_screen = 0;
    2644:	10 92 64 00 	sts	0x0064, r1
					// lcd backlight off
					LCD_BL_PORT &= ~_BV( LCD_BL_PIN );
    2648:	c3 98       	cbi	0x18, 3	; 24
    264a:	7c c0       	rjmp	.+248    	; 0x2744 <menu_process+0x160>
		return;
	}
	
	// lcd backlight on
	// and hold-on as screen_timeout seconds
	timeout_cur_screen = screen_timeout;
    264c:	90 93 64 00 	sts	0x0064, r25
	
	LCD_BL_PORT |= _BV( LCD_BL_PIN );
    2650:	c3 9a       	sbi	0x18, 3	; 24
	// check hold key
	if ( ++key_hold_count == 200 )
    2652:	80 91 11 01 	lds	r24, 0x0111
    2656:	8f 5f       	subi	r24, 0xFF	; 255
    2658:	80 93 11 01 	sts	0x0111, r24
    265c:	88 3c       	cpi	r24, 0xC8	; 200
    265e:	39 f4       	brne	.+14     	; 0x266e <menu_process+0x8a>
	{
		key_hold_count = 0;
    2660:	10 92 11 01 	sts	0x0111, r1
		flag2.bits.key_hold = 1;		
    2664:	80 91 24 01 	lds	r24, 0x0124
    2668:	81 60       	ori	r24, 0x01	; 1
    266a:	80 93 24 01 	sts	0x0124, r24
	}
	
	if ( flag2.bits.key_hold )
    266e:	80 91 24 01 	lds	r24, 0x0124
    2672:	80 ff       	sbrs	r24, 0
    2674:	14 c0       	rjmp	.+40     	; 0x269e <menu_process+0xba>
	{
		if ( ++key_hold_step_delay == 30 )
    2676:	80 91 10 01 	lds	r24, 0x0110
    267a:	8f 5f       	subi	r24, 0xFF	; 255
    267c:	80 93 10 01 	sts	0x0110, r24
    2680:	8e 31       	cpi	r24, 0x1E	; 30
    2682:	69 f4       	brne	.+26     	; 0x269e <menu_process+0xba>
		{
			key_hold_step_delay = 0;
    2684:	10 92 10 01 	sts	0x0110, r1
			if ( key_code == ((~_BV ( SW_UP ) ) & 0xf0) )
    2688:	10 3b       	cpi	r17, 0xB0	; 176
    268a:	19 f4       	brne	.+6      	; 0x2692 <menu_process+0xae>
			{
				key_up_process ();
    268c:	0e 94 00 12 	call	0x2400	; 0x2400 <key_up_process>
    2690:	04 c0       	rjmp	.+8      	; 0x269a <menu_process+0xb6>
			}
			// if down key is pressed
			else if ( key_code == ((~_BV ( SW_DW ) ) & 0xf0) )
    2692:	10 37       	cpi	r17, 0x70	; 112
    2694:	11 f4       	brne	.+4      	; 0x269a <menu_process+0xb6>
			{
				key_dw_process ();
    2696:	0e 94 93 11 	call	0x2326	; 0x2326 <key_dw_process>
			}
			display_menu();
    269a:	0e 94 77 12 	call	0x24ee	; 0x24ee <display_menu>
		}
	}
	// key code already executed
	if ( flag1.bits.key_is_executed )
    269e:	80 91 25 01 	lds	r24, 0x0125
    26a2:	80 fd       	sbrc	r24, 0
    26a4:	4f c0       	rjmp	.+158    	; 0x2744 <menu_process+0x160>
		return;
	// check key code, what is key pressed?
	// if menu key is pressed
	if ( key_code == ((~_BV ( SW_MENU ) ) & 0xf0) )
    26a6:	10 3e       	cpi	r17, 0xE0	; 224
    26a8:	31 f5       	brne	.+76     	; 0x26f6 <menu_process+0x112>
	{
		// enter to main menu
		if( menu_index == 0 )
    26aa:	e0 91 3f 01 	lds	r30, 0x013F
    26ae:	ee 23       	and	r30, r30
    26b0:	31 f4       	brne	.+12     	; 0x26be <menu_process+0xda>
		{
			setting_cursor = 0;
    26b2:	10 92 43 01 	sts	0x0143, r1
			menu_index = 1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	80 93 3f 01 	sts	0x013F, r24
    26bc:	2a c0       	rjmp	.+84     	; 0x2712 <menu_process+0x12e>
			submenu_index = 1;
		}
		// enter to submenu
		else if( menu_index == 1 )
    26be:	e1 30       	cpi	r30, 0x01	; 1
    26c0:	61 f4       	brne	.+24     	; 0x26da <menu_process+0xf6>
		{
			menu_stack = menu_index;
    26c2:	e0 93 44 01 	sts	0x0144, r30
			submenu_stack = submenu_index;
    26c6:	80 91 40 01 	lds	r24, 0x0140
    26ca:	80 93 42 01 	sts	0x0142, r24
			menu_index = submenu_index + menu_index;
    26ce:	8f 5f       	subi	r24, 0xFF	; 255
    26d0:	80 93 3f 01 	sts	0x013F, r24
			submenu_index = 1;
    26d4:	e0 93 40 01 	sts	0x0140, r30
    26d8:	2d c0       	rjmp	.+90     	; 0x2734 <menu_process+0x150>
		}
		// change cursor setting on each menu
		else
		{
			temp = pgm_read_byte ( (PGM_P)(setting_cursor_max + menu_index - 2) );
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	e3 53       	subi	r30, 0x33	; 51
    26de:	fa 4f       	sbci	r31, 0xFA	; 250
    26e0:	e4 91       	lpm	r30, Z+

			if ( ++setting_cursor == temp )
    26e2:	80 91 43 01 	lds	r24, 0x0143
    26e6:	8f 5f       	subi	r24, 0xFF	; 255
    26e8:	80 93 43 01 	sts	0x0143, r24
    26ec:	8e 17       	cp	r24, r30
    26ee:	11 f5       	brne	.+68     	; 0x2734 <menu_process+0x150>
				setting_cursor = 0;
    26f0:	10 92 43 01 	sts	0x0143, r1
    26f4:	1f c0       	rjmp	.+62     	; 0x2734 <menu_process+0x150>
		}
	}
	// if exit key is pressed
	else if ( key_code == ((~_BV ( SW_EXIT ) ) & 0xf0) )
    26f6:	10 3d       	cpi	r17, 0xD0	; 208
    26f8:	a1 f4       	brne	.+40     	; 0x2722 <menu_process+0x13e>
	{
		setting_cursor = 0;
    26fa:	10 92 43 01 	sts	0x0143, r1
		if(menu_index > 1)
    26fe:	80 91 3f 01 	lds	r24, 0x013F
    2702:	82 30       	cpi	r24, 0x02	; 2
    2704:	48 f0       	brcs	.+18     	; 0x2718 <menu_process+0x134>
		{
			menu_index = menu_stack;
    2706:	80 91 44 01 	lds	r24, 0x0144
    270a:	80 93 3f 01 	sts	0x013F, r24
			submenu_index = submenu_stack;
    270e:	80 91 42 01 	lds	r24, 0x0142
    2712:	80 93 40 01 	sts	0x0140, r24
    2716:	0e c0       	rjmp	.+28     	; 0x2734 <menu_process+0x150>
		}
		else
		{
			menu_index = 0;
    2718:	10 92 3f 01 	sts	0x013F, r1
			submenu_index = 0;
    271c:	10 92 40 01 	sts	0x0140, r1
    2720:	09 c0       	rjmp	.+18     	; 0x2734 <menu_process+0x150>
			
		}
	}
	// if up key is pressed
	else if ( key_code == ((~_BV ( SW_UP ) ) & 0xf0) )
    2722:	10 3b       	cpi	r17, 0xB0	; 176
    2724:	19 f4       	brne	.+6      	; 0x272c <menu_process+0x148>
	{
		key_up_process ();
    2726:	0e 94 00 12 	call	0x2400	; 0x2400 <key_up_process>
    272a:	04 c0       	rjmp	.+8      	; 0x2734 <menu_process+0x150>
	}
	// if down key is pressed
	else if ( key_code == ((~_BV ( SW_DW ) ) & 0xf0) )
    272c:	10 37       	cpi	r17, 0x70	; 112
    272e:	11 f4       	brne	.+4      	; 0x2734 <menu_process+0x150>
	{
		key_dw_process ();
    2730:	0e 94 93 11 	call	0x2326	; 0x2326 <key_dw_process>
	}
	// display menu information on LCD
	display_menu();
    2734:	0e 94 77 12 	call	0x24ee	; 0x24ee <display_menu>
	flag1.bits.key_is_executed = 1;
    2738:	80 91 25 01 	lds	r24, 0x0125
    273c:	81 60       	ori	r24, 0x01	; 1
	flag1.bits.lcd_busy = 0;
    273e:	8b 7f       	andi	r24, 0xFB	; 251
    2740:	80 93 25 01 	sts	0x0125, r24
}
    2744:	1f 91       	pop	r17
    2746:	08 95       	ret

00002748 <time_base>:
//*****************************************************************************************
void time_base ( void )
{
	static BYTE send_temp_timeout=0;

	if ( ++sec_count == 250 )
    2748:	80 91 41 01 	lds	r24, 0x0141
    274c:	8f 5f       	subi	r24, 0xFF	; 255
    274e:	80 93 41 01 	sts	0x0141, r24
    2752:	8a 3f       	cpi	r24, 0xFA	; 250
    2754:	09 f0       	breq	.+2      	; 0x2758 <time_base+0x10>
    2756:	4c c0       	rjmp	.+152    	; 0x27f0 <time_base+0xa8>
	{
		sec_count = 0;
    2758:	10 92 41 01 	sts	0x0141, r1

		// update lcd display
		flag1.bits.update_display = 1;
    275c:	90 91 25 01 	lds	r25, 0x0125
    2760:	89 2f       	mov	r24, r25
    2762:	82 60       	ori	r24, 0x02	; 2
    2764:	80 93 25 01 	sts	0x0125, r24
		
		// timeout for send temparature to webserver
		if ( flag1.bits.syn_is_sent )
    2768:	85 ff       	sbrs	r24, 5
    276a:	0c c0       	rjmp	.+24     	; 0x2784 <time_base+0x3c>
		{
			// 5 seconds
			if ( ++send_temp_timeout == 5 )
    276c:	80 91 12 01 	lds	r24, 0x0112
    2770:	8f 5f       	subi	r24, 0xFF	; 255
    2772:	80 93 12 01 	sts	0x0112, r24
    2776:	85 30       	cpi	r24, 0x05	; 5
    2778:	29 f4       	brne	.+10     	; 0x2784 <time_base+0x3c>
			{
				send_temp_timeout = 0;
    277a:	10 92 12 01 	sts	0x0112, r1
				flag1.bits.send_temp_timeout = 1;
    277e:	92 68       	ori	r25, 0x82	; 130
    2780:	90 93 25 01 	sts	0x0125, r25
			}
		}
		// send temparature to server countdown
		if ( count_time[ 0 ] && menu_index!=4 )
    2784:	80 91 3a 01 	lds	r24, 0x013A
    2788:	88 23       	and	r24, r24
    278a:	91 f1       	breq	.+100    	; 0x27f0 <time_base+0xa8>
    278c:	80 91 3f 01 	lds	r24, 0x013F
    2790:	84 30       	cpi	r24, 0x04	; 4
    2792:	71 f1       	breq	.+92     	; 0x27f0 <time_base+0xa8>
		{
			if ( --count_time[ 3 ] > 59 )
    2794:	80 91 3d 01 	lds	r24, 0x013D
    2798:	81 50       	subi	r24, 0x01	; 1
    279a:	80 93 3d 01 	sts	0x013D, r24
    279e:	8c 33       	cpi	r24, 0x3C	; 60
    27a0:	38 f1       	brcs	.+78     	; 0x27f0 <time_base+0xa8>
			{
				//count_time[ 3 ] = 59;
				count_time[ 3 ] = 20;	// debug
    27a2:	84 e1       	ldi	r24, 0x14	; 20
    27a4:	80 93 3d 01 	sts	0x013D, r24
				if ( --count_time[ 2 ] > 59 )
    27a8:	80 91 3c 01 	lds	r24, 0x013C
    27ac:	81 50       	subi	r24, 0x01	; 1
    27ae:	80 93 3c 01 	sts	0x013C, r24
    27b2:	8c 33       	cpi	r24, 0x3C	; 60
    27b4:	e8 f0       	brcs	.+58     	; 0x27f0 <time_base+0xa8>
				{
					count_time[ 2 ] = 59;
    27b6:	8b e3       	ldi	r24, 0x3B	; 59
    27b8:	80 93 3c 01 	sts	0x013C, r24
					if ( --count_time[ 1 ] > 23 )
    27bc:	80 91 3b 01 	lds	r24, 0x013B
    27c0:	81 50       	subi	r24, 0x01	; 1
    27c2:	80 93 3b 01 	sts	0x013B, r24
    27c6:	88 31       	cpi	r24, 0x18	; 24
    27c8:	98 f0       	brcs	.+38     	; 0x27f0 <time_base+0xa8>
					{
						// read hour
						count_time[ 1 ] = eeprom_read_byte( ee_count_time + 1 );
    27ca:	89 e0       	ldi	r24, 0x09	; 9
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__eerd_byte_m32>
    27d2:	80 93 3b 01 	sts	0x013B, r24
						// read minute
						count_time[ 2 ] = eeprom_read_byte( ee_count_time + 2 );
    27d6:	8a e0       	ldi	r24, 0x0A	; 10
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__eerd_byte_m32>
    27de:	80 93 3c 01 	sts	0x013C, r24
						// clear second
						count_time[ 3 ] = 0;
    27e2:	10 92 3d 01 	sts	0x013D, r1
						flag1.bits.send_temp = 1;
    27e6:	80 91 25 01 	lds	r24, 0x0125
    27ea:	80 61       	ori	r24, 0x10	; 16
    27ec:	80 93 25 01 	sts	0x0125, r24
    27f0:	08 95       	ret

000027f2 <print_temp>:
// Function : print_temp
// Description : Print ADC0 and temparature to buffer
//
//*****************************************************************************************
void print_temp ( BYTE *dest )
{
    27f2:	df 92       	push	r13
    27f4:	ef 92       	push	r14
    27f6:	ff 92       	push	r15
    27f8:	0f 93       	push	r16
    27fa:	1f 93       	push	r17
    27fc:	7c 01       	movw	r14, r24
	WORD adc0_value;
	BYTE temp_value;

	adc0_value = adc_read ( 0 );
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <adc_read>
    2804:	8c 01       	movw	r16, r24
	temp_value = adc_read_temp ( );
    2806:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <adc_read_temp>
    280a:	d8 2e       	mov	r13, r24

	dest = print_decimal ( dest, 4, adc0_value );
    280c:	c7 01       	movw	r24, r14
    280e:	64 e0       	ldi	r22, 0x04	; 4
    2810:	a8 01       	movw	r20, r16
    2812:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <print_decimal>
	*dest++ = ',';
    2816:	fc 01       	movw	r30, r24
    2818:	8c e2       	ldi	r24, 0x2C	; 44
    281a:	81 93       	st	Z+, r24
	dest = print_decimal ( dest, 2, temp_value );
    281c:	cf 01       	movw	r24, r30
    281e:	62 e0       	ldi	r22, 0x02	; 2
    2820:	4d 2d       	mov	r20, r13
    2822:	50 e0       	ldi	r21, 0x00	; 0
    2824:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <print_decimal>
    2828:	dc 01       	movw	r26, r24
	*dest++ = ASCII_DEGREE;
    282a:	fc 01       	movw	r30, r24
    282c:	8f ed       	ldi	r24, 0xDF	; 223
    282e:	81 93       	st	Z+, r24
	*dest++ = 'C';
    2830:	83 e4       	ldi	r24, 0x43	; 67
    2832:	11 96       	adiw	r26, 0x01	; 1
    2834:	8c 93       	st	X, r24
	*dest = '\0';
    2836:	11 82       	std	Z+1, r1	; 0x01
}
    2838:	1f 91       	pop	r17
    283a:	0f 91       	pop	r16
    283c:	ff 90       	pop	r15
    283e:	ef 90       	pop	r14
    2840:	df 90       	pop	r13
    2842:	08 95       	ret

00002844 <standby_display>:
// Function : standby_display
// Description : display board status such as AVR ip, server ip, countdown time, temparature
//
//*******************************************************************************************
void standby_display ( void )
{
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
    284c:	c0 54       	subi	r28, 0x40	; 64
    284e:	d0 40       	sbci	r29, 0x00	; 0
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	f8 94       	cli
    2854:	de bf       	out	0x3e, r29	; 62
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	cd bf       	out	0x3d, r28	; 61
	BYTE generic_buf[64];

	// update lcd display flag not set, exit from function
	if ( flag1.bits.update_display == 0 )
    285a:	90 91 25 01 	lds	r25, 0x0125
    285e:	91 ff       	sbrs	r25, 1
    2860:	4d c0       	rjmp	.+154    	; 0x28fc <standby_display+0xb8>
		return;
	flag1.bits.update_display = 0;
    2862:	89 2f       	mov	r24, r25
    2864:	8d 7f       	andi	r24, 0xFD	; 253
    2866:	80 93 25 01 	sts	0x0125, r24
	// lcd display is displaying other information, wait until busy flag clear
	if ( flag1.bits.lcd_busy )
    286a:	92 fd       	sbrc	r25, 2
    286c:	47 c0       	rjmp	.+142    	; 0x28fc <standby_display+0xb8>
		return;
	// now displaying menu information, wait until exit from menu
	if ( menu_index )
    286e:	80 91 3f 01 	lds	r24, 0x013F
    2872:	88 23       	and	r24, r24
    2874:	09 f0       	breq	.+2      	; 0x2878 <standby_display+0x34>
    2876:	42 c0       	rjmp	.+132    	; 0x28fc <standby_display+0xb8>
		return;

	// display status on lcd line 1
	lcd_putc ( '\f' );
    2878:	8c e0       	ldi	r24, 0x0C	; 12
    287a:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <lcd_putc>
	lcd_print ( (BYTE*)standby_list[ standby_cursor - 1 ] );
    287e:	e0 91 3e 01 	lds	r30, 0x013E
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	ee 0f       	add	r30, r30
    2886:	ff 1f       	adc	r31, r31
    2888:	e1 50       	subi	r30, 0x01	; 1
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	80 81       	ld	r24, Z
    288e:	91 81       	ldd	r25, Z+1	; 0x01
    2890:	0e 94 14 15 	call	0x2a28	; 0x2a28 <lcd_print>

	// display status devices on lcd line 2
	lcd_putc ( '\n' );
    2894:	8a e0       	ldi	r24, 0x0A	; 10
    2896:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <lcd_putc>
	if ( standby_cursor == 1 )
    289a:	80 91 3e 01 	lds	r24, 0x013E
    289e:	81 30       	cpi	r24, 0x01	; 1
    28a0:	31 f4       	brne	.+12     	; 0x28ae <standby_display+0x6a>
	{
		print_devices (generic_buf,ind_device_cur);
    28a2:	ce 01       	movw	r24, r28
    28a4:	01 96       	adiw	r24, 0x01	; 1
    28a6:	60 91 0f 01 	lds	r22, 0x010F
    28aa:	0e 94 68 10 	call	0x20d0	; 0x20d0 <print_devices>
		
	}
	// display avr ip
	if ( standby_cursor == 2 )
    28ae:	80 91 3e 01 	lds	r24, 0x013E
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	29 f4       	brne	.+10     	; 0x28c0 <standby_display+0x7c>
	{
		print_ip ( generic_buf, (BYTE*)&avr_ip, 0 );
    28b6:	ce 01       	movw	r24, r28
    28b8:	01 96       	adiw	r24, 0x01	; 1
    28ba:	60 e3       	ldi	r22, 0x30	; 48
    28bc:	71 e0       	ldi	r23, 0x01	; 1
    28be:	06 c0       	rjmp	.+12     	; 0x28cc <standby_display+0x88>
	}
	// display server ip
	else if ( standby_cursor == 3 )
    28c0:	83 30       	cpi	r24, 0x03	; 3
    28c2:	41 f4       	brne	.+16     	; 0x28d4 <standby_display+0x90>
	{
		print_ip ( generic_buf, (BYTE*)&server_ip, 0 );
    28c4:	ce 01       	movw	r24, r28
    28c6:	01 96       	adiw	r24, 0x01	; 1
    28c8:	6c e2       	ldi	r22, 0x2C	; 44
    28ca:	71 e0       	ldi	r23, 0x01	; 1
    28cc:	40 e0       	ldi	r20, 0x00	; 0
    28ce:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <print_ip>
    28d2:	10 c0       	rjmp	.+32     	; 0x28f4 <standby_display+0xb0>
	}
	// display countdown timer
	else if ( standby_cursor == 4 )
    28d4:	84 30       	cpi	r24, 0x04	; 4
    28d6:	41 f4       	brne	.+16     	; 0x28e8 <standby_display+0xa4>
	{
		print_time ( generic_buf, count_time, 0 );
    28d8:	ce 01       	movw	r24, r28
    28da:	01 96       	adiw	r24, 0x01	; 1
    28dc:	6a e3       	ldi	r22, 0x3A	; 58
    28de:	71 e0       	ldi	r23, 0x01	; 1
    28e0:	40 e0       	ldi	r20, 0x00	; 0
    28e2:	0e 94 07 11 	call	0x220e	; 0x220e <print_time>
    28e6:	06 c0       	rjmp	.+12     	; 0x28f4 <standby_display+0xb0>
	}
	// display current temparature
	else if ( standby_cursor == 5 )
    28e8:	85 30       	cpi	r24, 0x05	; 5
    28ea:	21 f4       	brne	.+8      	; 0x28f4 <standby_display+0xb0>
	{
		print_temp ( generic_buf );
    28ec:	ce 01       	movw	r24, r28
    28ee:	01 96       	adiw	r24, 0x01	; 1
    28f0:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <print_temp>
	}
	lcd_print ( generic_buf );
    28f4:	ce 01       	movw	r24, r28
    28f6:	01 96       	adiw	r24, 0x01	; 1
    28f8:	0e 94 14 15 	call	0x2a28	; 0x2a28 <lcd_print>
}
    28fc:	c0 5c       	subi	r28, 0xC0	; 192
    28fe:	df 4f       	sbci	r29, 0xFF	; 255
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <lcd_send_nibble>:
//
//********************************************************************************************
void lcd_send_nibble(unsigned char data)
{
	data &= 0xF0;
	LCD_DATA_PORT &= 0x0F;
    2910:	92 b3       	in	r25, 0x12	; 18
    2912:	9f 70       	andi	r25, 0x0F	; 15
    2914:	92 bb       	out	0x12, r25	; 18
	LCD_DATA_PORT |= data;
    2916:	92 b3       	in	r25, 0x12	; 18
    2918:	80 7f       	andi	r24, 0xF0	; 240
    291a:	89 2b       	or	r24, r25
    291c:	82 bb       	out	0x12, r24	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    291e:	85 e0       	ldi	r24, 0x05	; 5
    2920:	8a 95       	dec	r24
    2922:	f1 f7       	brne	.-4      	; 0x2920 <lcd_send_nibble+0x10>
	_delay_us(1);	// 1us
	LCD_CONTROL_PORT |= _BV(LCD_EN_PIN);
    2924:	c2 9a       	sbi	0x18, 2	; 24
    2926:	8a e0       	ldi	r24, 0x0A	; 10
    2928:	8a 95       	dec	r24
    292a:	f1 f7       	brne	.-4      	; 0x2928 <lcd_send_nibble+0x18>
	_delay_us(2);
	LCD_CONTROL_PORT &= ~_BV(LCD_EN_PIN);
    292c:	c2 98       	cbi	0x18, 2	; 24
}
    292e:	08 95       	ret

00002930 <lcd_send_byte>:
// Function : lcd_send_byte
// Description : Send data (byte) to lcd module
//
//********************************************************************************************
void lcd_send_byte( char data_or_cmd, char data )
{
    2930:	1f 93       	push	r17
    2932:	16 2f       	mov	r17, r22
	LCD_CONTROL_PORT &= ~_BV(LCD_RS_PIN);
    2934:	c0 98       	cbi	0x18, 0	; 24
	if(data_or_cmd)
    2936:	88 23       	and	r24, r24
    2938:	11 f0       	breq	.+4      	; 0x293e <lcd_send_byte+0xe>
		LCD_CONTROL_PORT |= _BV(LCD_RS_PIN);
    293a:	c0 9a       	sbi	0x18, 0	; 24
    293c:	01 c0       	rjmp	.+2      	; 0x2940 <lcd_send_byte+0x10>
	else
		LCD_CONTROL_PORT &= ~_BV(LCD_RS_PIN);
    293e:	c0 98       	cbi	0x18, 0	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2940:	88 ec       	ldi	r24, 0xC8	; 200
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	f1 f7       	brne	.-4      	; 0x2944 <lcd_send_byte+0x14>
	_delay_us(50);		// 1us
	LCD_CONTROL_PORT &= ~_BV(LCD_EN_PIN);
    2948:	c2 98       	cbi	0x18, 2	; 24
	lcd_send_nibble(data & 0xF0);
    294a:	81 2f       	mov	r24, r17
    294c:	80 7f       	andi	r24, 0xF0	; 240
    294e:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_send_nibble>
	lcd_send_nibble(data << 4);
    2952:	81 2f       	mov	r24, r17
    2954:	82 95       	swap	r24
    2956:	80 7f       	andi	r24, 0xF0	; 240
    2958:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_send_nibble>
}
    295c:	1f 91       	pop	r17
    295e:	08 95       	ret

00002960 <lcd_init>:
// Function : lcd_init
// Description : Lcd module initiation.(4-bits mode)
//
//********************************************************************************************
void lcd_init(void)
{
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
	char i;
	LCD_DATA_DDR |= (_BV(LCD_D7) | _BV(LCD_D6) | _BV(LCD_D5) | _BV(LCD_D4));
    2964:	81 b3       	in	r24, 0x11	; 17
    2966:	80 6f       	ori	r24, 0xF0	; 240
    2968:	81 bb       	out	0x11, r24	; 17
	LCD_CONTROL_DDR |= (_BV(LCD_RS_PIN) | _BV(LCD_RW_PIN) | _BV(LCD_EN_PIN));
    296a:	87 b3       	in	r24, 0x17	; 23
    296c:	87 60       	ori	r24, 0x07	; 7
    296e:	87 bb       	out	0x17, r24	; 23

	LCD_DATA_PORT &= ~(_BV(LCD_D7) | _BV(LCD_D6) | _BV(LCD_D5) | _BV(LCD_D4));
    2970:	82 b3       	in	r24, 0x12	; 18
    2972:	8f 70       	andi	r24, 0x0F	; 15
    2974:	82 bb       	out	0x12, r24	; 18
	LCD_CONTROL_PORT &= ~(_BV(LCD_RS_PIN) | _BV(LCD_RS_PIN) | _BV(LCD_RS_PIN));
    2976:	c0 98       	cbi	0x18, 0	; 24
    2978:	80 e6       	ldi	r24, 0x60	; 96
    297a:	9a ee       	ldi	r25, 0xEA	; 234
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	f1 f7       	brne	.-4      	; 0x297c <lcd_init+0x1c>
	
	_delay_ms(15);		// 15 ms
	for(i=1;i<=3;++i)
	{
       lcd_send_nibble(0x30);
    2980:	80 e3       	ldi	r24, 0x30	; 48
    2982:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_send_nibble>
    2986:	00 e2       	ldi	r16, 0x20	; 32
    2988:	1e e4       	ldi	r17, 0x4E	; 78
    298a:	c8 01       	movw	r24, r16
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	f1 f7       	brne	.-4      	; 0x298c <lcd_init+0x2c>
    2990:	80 e3       	ldi	r24, 0x30	; 48
    2992:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_send_nibble>
    2996:	c8 01       	movw	r24, r16
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <lcd_init+0x38>
    299c:	80 e3       	ldi	r24, 0x30	; 48
    299e:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_send_nibble>
    29a2:	c8 01       	movw	r24, r16
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <lcd_init+0x44>
       _delay_ms(5);	// 5 ms
    }
    lcd_send_nibble(0x20);
    29a8:	80 e2       	ldi	r24, 0x20	; 32
    29aa:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_send_nibble>
	lcd_send_byte(WRITE_COMMAND, SET_FUNCTION);
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	68 e2       	ldi	r22, 0x28	; 40
    29b2:	0e 94 98 14 	call	0x2930	; 0x2930 <lcd_send_byte>
	lcd_send_byte(WRITE_COMMAND, DISPLAY_ON);
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	6c e0       	ldi	r22, 0x0C	; 12
    29ba:	0e 94 98 14 	call	0x2930	; 0x2930 <lcd_send_byte>
	lcd_send_byte(WRITE_COMMAND, DISPLAY_CLR);
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	61 e0       	ldi	r22, 0x01	; 1
    29c2:	0e 94 98 14 	call	0x2930	; 0x2930 <lcd_send_byte>
	lcd_send_byte(WRITE_COMMAND, ENTRY_MODE);
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	66 e0       	ldi	r22, 0x06	; 6
    29ca:	0e 94 98 14 	call	0x2930	; 0x2930 <lcd_send_byte>
}
    29ce:	1f 91       	pop	r17
    29d0:	0f 91       	pop	r16
    29d2:	08 95       	ret

000029d4 <lcd_gotoxy>:
// Function : lcd_gotoxy
// Description : Send SET_DDRAM command to lcd module
//
//********************************************************************************************
void lcd_gotoxy( unsigned char x, unsigned char y)
{
    29d4:	98 2f       	mov	r25, r24
	char address=0;

	if(y!=1)
    29d6:	61 30       	cpi	r22, 0x01	; 1
    29d8:	11 f0       	breq	.+4      	; 0x29de <lcd_gotoxy+0xa>
    29da:	80 e4       	ldi	r24, 0x40	; 64
    29dc:	01 c0       	rjmp	.+2      	; 0x29e0 <lcd_gotoxy+0xc>
    29de:	80 e0       	ldi	r24, 0x00	; 0
		address = LCD_LINE_TWO;
	address += x-1;
    29e0:	91 50       	subi	r25, 0x01	; 1
    29e2:	98 0f       	add	r25, r24
	lcd_send_byte(WRITE_COMMAND, SET_DDRAM|address);
    29e4:	90 68       	ori	r25, 0x80	; 128
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	69 2f       	mov	r22, r25
    29ea:	0e 94 98 14 	call	0x2930	; 0x2930 <lcd_send_byte>
}
    29ee:	08 95       	ret

000029f0 <lcd_putc>:
// '\n' is new line (second line) command
// '\b' is cursor back command
//
//********************************************************************************************
void lcd_putc( unsigned char c)
{
    29f0:	68 2f       	mov	r22, r24
	if(c == '\f')
    29f2:	8c 30       	cpi	r24, 0x0C	; 12
    29f4:	49 f4       	brne	.+18     	; 0x2a08 <lcd_putc+0x18>
	{
		lcd_send_byte(WRITE_COMMAND, DISPLAY_CLR);
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	61 e0       	ldi	r22, 0x01	; 1
    29fa:	0e 94 98 14 	call	0x2930	; 0x2930 <lcd_send_byte>
    29fe:	80 e4       	ldi	r24, 0x40	; 64
    2a00:	9f e1       	ldi	r25, 0x1F	; 31
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	f1 f7       	brne	.-4      	; 0x2a02 <lcd_putc+0x12>
    2a06:	08 95       	ret
		_delay_ms(2);	// 2ms
	}
	else if(c == '\n')
    2a08:	8a 30       	cpi	r24, 0x0A	; 10
    2a0a:	29 f4       	brne	.+10     	; 0x2a16 <lcd_putc+0x26>
		lcd_gotoxy(1, 2);
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	62 e0       	ldi	r22, 0x02	; 2
    2a10:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <lcd_gotoxy>
    2a14:	08 95       	ret
	else if(c == '\b')
    2a16:	88 30       	cpi	r24, 0x08	; 8
    2a18:	19 f4       	brne	.+6      	; 0x2a20 <lcd_putc+0x30>
		lcd_send_byte(WRITE_COMMAND, CURSOR_BACK);
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	60 e1       	ldi	r22, 0x10	; 16
    2a1e:	01 c0       	rjmp	.+2      	; 0x2a22 <lcd_putc+0x32>
	else
		lcd_send_byte(WRITE_DATA, c);
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	0e 94 98 14 	call	0x2930	; 0x2930 <lcd_send_byte>
    2a26:	08 95       	ret

00002a28 <lcd_print>:
// Function : lcd_print
// Description : print string from ram to lcd module
//
//********************************************************************************************
void lcd_print( BYTE *ptr )
{
    2a28:	cf 93       	push	r28
    2a2a:	df 93       	push	r29
    2a2c:	ec 01       	movw	r28, r24
    2a2e:	03 c0       	rjmp	.+6      	; 0x2a36 <lcd_print+0xe>

	while( *ptr )
	{
		lcd_putc(*ptr++);
    2a30:	21 96       	adiw	r28, 0x01	; 1
    2a32:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <lcd_putc>
//
//********************************************************************************************
void lcd_print( BYTE *ptr )
{

	while( *ptr )
    2a36:	88 81       	ld	r24, Y
    2a38:	88 23       	and	r24, r24
    2a3a:	d1 f7       	brne	.-12     	; 0x2a30 <lcd_print+0x8>
	{
		lcd_putc(*ptr++);
	}
}
    2a3c:	df 91       	pop	r29
    2a3e:	cf 91       	pop	r28
    2a40:	08 95       	ret

00002a42 <lcd_print_p>:
// Function : lcd_print_p
// Description : print string from program memory to lcd module
//
//********************************************************************************************
void lcd_print_p( PGM_P ptr )
{
    2a42:	cf 93       	push	r28
    2a44:	df 93       	push	r29
    2a46:	ec 01       	movw	r28, r24
    2a48:	02 c0       	rjmp	.+4      	; 0x2a4e <lcd_print_p+0xc>
	unsigned char c;

	while( (c = pgm_read_byte ( ptr++ )) )
	{
		lcd_putc(c);
    2a4a:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <lcd_putc>
    2a4e:	fe 01       	movw	r30, r28
//********************************************************************************************
void lcd_print_p( PGM_P ptr )
{
	unsigned char c;

	while( (c = pgm_read_byte ( ptr++ )) )
    2a50:	21 96       	adiw	r28, 0x01	; 1
    2a52:	84 91       	lpm	r24, Z+
    2a54:	88 23       	and	r24, r24
    2a56:	c9 f7       	brne	.-14     	; 0x2a4a <lcd_print_p+0x8>
	{
		lcd_putc(c);
	}
}
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
    2a5c:	08 95       	ret

00002a5e <adc_read>:
//
//********************************************************************************************
WORD adc_read ( BYTE channel )
{
	// Analog channel selection
	ADMUX = ((ADMUX) & ~0x1f) | (channel & 0x1f);
    2a5e:	97 b1       	in	r25, 0x07	; 7
    2a60:	8f 71       	andi	r24, 0x1F	; 31
    2a62:	90 7e       	andi	r25, 0xE0	; 224
    2a64:	89 2b       	or	r24, r25
    2a66:	87 b9       	out	0x07, r24	; 7
	
	// Start conversion
	ADCSRA |= _BV(ADSC);
    2a68:	36 9a       	sbi	0x06, 6	; 6

	// Wait until conversion complete
	while( bit_is_set(ADCSRA, ADSC) );
    2a6a:	36 99       	sbic	0x06, 6	; 6
    2a6c:	fe cf       	rjmp	.-4      	; 0x2a6a <adc_read+0xc>
	
	// CAUTION: READ ADCL BEFORE ADCH!!!
	return ((ADCL) | ((ADCH)<<8));
    2a6e:	24 b1       	in	r18, 0x04	; 4
    2a70:	45 b1       	in	r20, 0x05	; 5
    2a72:	94 2f       	mov	r25, r20
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	28 2b       	or	r18, r24
    2a7a:	39 2b       	or	r19, r25
}
    2a7c:	c9 01       	movw	r24, r18
    2a7e:	08 95       	ret

00002a80 <adc_init>:
void adc_init ( void )
{
	//BYTE i;

	// ADC enable, Prescaler divide by 128, ADC clock = 16MHz/128 = 125kHz
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
    2a80:	87 e8       	ldi	r24, 0x87	; 135
    2a82:	86 b9       	out	0x06, r24	; 6

	// Select Vref, internal Vref 2.56V and external capacitor
	ADMUX = _BV(REFS1) | _BV(REFS0);
    2a84:	80 ec       	ldi	r24, 0xC0	; 192
    2a86:	87 b9       	out	0x07, r24	; 7
	
	// reading temparature
	//for ( i=0; i<32; i++ )
	//	adc_read_temp ();
}
    2a88:	08 95       	ret

00002a8a <adc_read_temp>:
// Function : adc_read_temp
// Description : read temparature from ADC1 and convert to real temparature
//
//********************************************************************************************
BYTE adc_read_temp ( void )
{
    2a8a:	1f 93       	push	r17
	static BYTE buf_index=0;
	WORD result=0,data;
	BYTE loop;
	
	// Store each sample to buffer
	temp_buf[ buf_index ] = adc_read ( ADC_TEMP_CHANNEL );
    2a8c:	10 91 13 01 	lds	r17, 0x0113
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <adc_read>
    2a96:	e1 2f       	mov	r30, r17
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	ee 0f       	add	r30, r30
    2a9c:	ff 1f       	adc	r31, r31
    2a9e:	ec 5e       	subi	r30, 0xEC	; 236
    2aa0:	fe 4f       	sbci	r31, 0xFE	; 254
    2aa2:	91 83       	std	Z+1, r25	; 0x01
    2aa4:	80 83       	st	Z, r24
    2aa6:	e4 e1       	ldi	r30, 0x14	; 20
    2aa8:	f1 e0       	ldi	r31, 0x01	; 1
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
	
	// Low pass filter 8 samples by default.
	for ( loop=0; loop<ADC_TEMP_BUFFER; loop++ )
	{
		result += temp_buf [ loop ];
    2aae:	81 91       	ld	r24, Z+
    2ab0:	91 91       	ld	r25, Z+
    2ab2:	28 0f       	add	r18, r24
    2ab4:	39 1f       	adc	r19, r25
	
	// Store each sample to buffer
	temp_buf[ buf_index ] = adc_read ( ADC_TEMP_CHANNEL );
	
	// Low pass filter 8 samples by default.
	for ( loop=0; loop<ADC_TEMP_BUFFER; loop++ )
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	e4 32       	cpi	r30, 0x24	; 36
    2aba:	f8 07       	cpc	r31, r24
    2abc:	c1 f7       	brne	.-16     	; 0x2aae <adc_read_temp+0x24>
	{
		result += temp_buf [ loop ];
	}
	// reset index
	if( ++buf_index == ADC_TEMP_BUFFER )
    2abe:	81 2f       	mov	r24, r17
    2ac0:	8f 5f       	subi	r24, 0xFF	; 255
    2ac2:	80 93 13 01 	sts	0x0113, r24
    2ac6:	88 30       	cpi	r24, 0x08	; 8
    2ac8:	11 f4       	brne	.+4      	; 0x2ace <adc_read_temp+0x44>
	{
		buf_index = 0;
    2aca:	10 92 13 01 	sts	0x0113, r1
	}
	
	// average result
	result = result / ADC_TEMP_BUFFER;
    2ace:	b9 01       	movw	r22, r18
    2ad0:	83 e0       	ldi	r24, 0x03	; 3
    2ad2:	76 95       	lsr	r23
    2ad4:	67 95       	ror	r22
    2ad6:	8a 95       	dec	r24
    2ad8:	e1 f7       	brne	.-8      	; 0x2ad2 <adc_read_temp+0x48>
    2ada:	25 ee       	ldi	r18, 0xE5	; 229
    2adc:	35 e0       	ldi	r19, 0x05	; 5
    2ade:	40 e0       	ldi	r20, 0x00	; 0
	
	// look-up for temparature, convert to real temparature
	for ( loop=0; loop<100; loop++ )
	{
		data = pgm_read_word ( temp_list + loop );
    2ae0:	f9 01       	movw	r30, r18
    2ae2:	85 91       	lpm	r24, Z+
    2ae4:	94 91       	lpm	r25, Z+
		if( result <= data)
    2ae6:	86 17       	cp	r24, r22
    2ae8:	97 07       	cpc	r25, r23
    2aea:	28 f4       	brcc	.+10     	; 0x2af6 <adc_read_temp+0x6c>
	
	// average result
	result = result / ADC_TEMP_BUFFER;
	
	// look-up for temparature, convert to real temparature
	for ( loop=0; loop<100; loop++ )
    2aec:	4f 5f       	subi	r20, 0xFF	; 255
    2aee:	2e 5f       	subi	r18, 0xFE	; 254
    2af0:	3f 4f       	sbci	r19, 0xFF	; 255
    2af2:	44 36       	cpi	r20, 0x64	; 100
    2af4:	a9 f7       	brne	.-22     	; 0x2ae0 <adc_read_temp+0x56>
		if( result <= data)
			break;
	}

	return loop;
}
    2af6:	84 2f       	mov	r24, r20
    2af8:	1f 91       	pop	r17
    2afa:	08 95       	ret

00002afc <__udivmodhi4>:
    2afc:	aa 1b       	sub	r26, r26
    2afe:	bb 1b       	sub	r27, r27
    2b00:	51 e1       	ldi	r21, 0x11	; 17
    2b02:	07 c0       	rjmp	.+14     	; 0x2b12 <__udivmodhi4_ep>

00002b04 <__udivmodhi4_loop>:
    2b04:	aa 1f       	adc	r26, r26
    2b06:	bb 1f       	adc	r27, r27
    2b08:	a6 17       	cp	r26, r22
    2b0a:	b7 07       	cpc	r27, r23
    2b0c:	10 f0       	brcs	.+4      	; 0x2b12 <__udivmodhi4_ep>
    2b0e:	a6 1b       	sub	r26, r22
    2b10:	b7 0b       	sbc	r27, r23

00002b12 <__udivmodhi4_ep>:
    2b12:	88 1f       	adc	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	5a 95       	dec	r21
    2b18:	a9 f7       	brne	.-22     	; 0x2b04 <__udivmodhi4_loop>
    2b1a:	80 95       	com	r24
    2b1c:	90 95       	com	r25
    2b1e:	bc 01       	movw	r22, r24
    2b20:	cd 01       	movw	r24, r26
    2b22:	08 95       	ret

00002b24 <__eerd_block_m32>:
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22

00002b28 <__eerd_blraw_m32>:
    2b28:	fc 01       	movw	r30, r24
    2b2a:	e1 99       	sbic	0x1c, 1	; 28
    2b2c:	fe cf       	rjmp	.-4      	; 0x2b2a <__eerd_blraw_m32+0x2>
    2b2e:	06 c0       	rjmp	.+12     	; 0x2b3c <__eerd_blraw_m32+0x14>
    2b30:	ff bb       	out	0x1f, r31	; 31
    2b32:	ee bb       	out	0x1e, r30	; 30
    2b34:	e0 9a       	sbi	0x1c, 0	; 28
    2b36:	31 96       	adiw	r30, 0x01	; 1
    2b38:	0d b2       	in	r0, 0x1d	; 29
    2b3a:	0d 92       	st	X+, r0
    2b3c:	41 50       	subi	r20, 0x01	; 1
    2b3e:	50 40       	sbci	r21, 0x00	; 0
    2b40:	b8 f7       	brcc	.-18     	; 0x2b30 <__eerd_blraw_m32+0x8>
    2b42:	08 95       	ret

00002b44 <__eerd_byte_m32>:
    2b44:	e1 99       	sbic	0x1c, 1	; 28
    2b46:	fe cf       	rjmp	.-4      	; 0x2b44 <__eerd_byte_m32>
    2b48:	9f bb       	out	0x1f, r25	; 31
    2b4a:	8e bb       	out	0x1e, r24	; 30
    2b4c:	e0 9a       	sbi	0x1c, 0	; 28
    2b4e:	99 27       	eor	r25, r25
    2b50:	8d b3       	in	r24, 0x1d	; 29
    2b52:	08 95       	ret

00002b54 <__eewr_block_m32>:
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	03 c0       	rjmp	.+6      	; 0x2b60 <__eewr_block_m32+0xc>
    2b5a:	2d 91       	ld	r18, X+
    2b5c:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <__eewr_r18_m32>
    2b60:	41 50       	subi	r20, 0x01	; 1
    2b62:	50 40       	sbci	r21, 0x00	; 0
    2b64:	d0 f7       	brcc	.-12     	; 0x2b5a <__eewr_block_m32+0x6>
    2b66:	08 95       	ret

00002b68 <__eewr_byte_m32>:
    2b68:	26 2f       	mov	r18, r22

00002b6a <__eewr_r18_m32>:
    2b6a:	e1 99       	sbic	0x1c, 1	; 28
    2b6c:	fe cf       	rjmp	.-4      	; 0x2b6a <__eewr_r18_m32>
    2b6e:	9f bb       	out	0x1f, r25	; 31
    2b70:	8e bb       	out	0x1e, r24	; 30
    2b72:	2d bb       	out	0x1d, r18	; 29
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	e2 9a       	sbi	0x1c, 2	; 28
    2b7a:	e1 9a       	sbi	0x1c, 1	; 28
    2b7c:	0f be       	out	0x3f, r0	; 63
    2b7e:	01 96       	adiw	r24, 0x01	; 1
    2b80:	08 95       	ret

00002b82 <_exit>:
    2b82:	f8 94       	cli

00002b84 <__stop_program>:
    2b84:	ff cf       	rjmp	.-2      	; 0x2b84 <__stop_program>
